<?php
// $Id: wallyctools.module,v 1.1.2.2 2010/07/23 21:47:20 merlinofchaos Exp $

/**
 * @file
 * wallyctools module
 *
 * This module allows styles to be created and managed on behalf of modules
 * that implement styles.
 *
 * The wallyctools tool allows recolorable styles to be created via a miniature
 * scripting language. Panels utilizes this to allow administrators to add
 * styles directly to any panel display.
 */

/**
 * Implementation of hook_perm()
 */
function wallyctools_perm() {
  return array(
    'administer wallyctools',
  );
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function wallyctools_ctools_plugin_directory($module, $plugin) {
  // Most of this module is implemented as an export ui plugin, and the
  // rest is in ctools/includes/wallyctools.inc
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
  if ($module == 'ctools' && $plugin == 'content_types') {
    return "plugins/$plugin";
  }
}

/**
 * Create callback for creating a new CTools custom content type.
 *
 * This ensures we get proper defaults from the plugin for its settings.
 */
function wallyctools_content_type_new($set_defaults) {
  $item = ctools_export_new_object('wallyctools', $set_defaults);
  ctools_include('content');
  $plugin = ctools_get_content_type('redacblock');
  $item->settings = ctools_content_get_defaults($plugin, array());
  return $item;
}

/**
 * Implementation of hook_panels_dashboard_blocks().
 *
 * Adds page information to the Panels dashboard.
 */
function wallyctools_panels_dashboard_blocks(&$vars) {
  $vars['links']['wallyctools'] = array(
    'title' => l(t('Redactional Block'), 'admin/build/wallyctools/add'),
    'description' => t('Custom content panes are basic HTML you enter that can be reused in all of your panels.'),
  );
  
  

   // Load all mini panels and their displays.
  ctools_include('export');
  $items = ctools_export_crud_load_all('wallyctools');
  $count = 0;
  $rows = array();

  foreach ($items as $item) {
    $rows[] = array(
      check_plain($item->admin_title),
      array(
        'data' => l(t('Edit'), "admin/build/wallyctools/list/$item->name/edit"),
        'class' => 'links',
      ),
    );

    // Only show 10.
    if (++$count >= 10) {
      break;
    }
  }

  if ($rows) {
    $content = theme('table', array(), $rows, array('class' => 'panels-manage'));
  }
  else {
    $content = '<p>' . t('There are no redactional Blocks.') . '</p>';
  }

  $vars['blocks']['wallyctools'] = array(
    'title' => t('Manage Redactional Block'),
    'link' => l(t('Go to list'), 'admin/build/wallyctools'),
    'content' => $content,
    'class' => 'dashboard-content',
    'section' => 'right',
  );
}



/**
 * Implementation of hook_views_api().
 *
 * This one is used as the base to reduce errors when updating.
 */
function wallyctools_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'wallyctools') . '/plugins/views',
  );
}
//-----------------------------------------------


function wallyctools_content_get_subtypes($type) {
  
  $subtypes = array();

  if (is_array($type)) {
    $plugin = $type;
  }
  else {
    $plugin = ctools_get_content_type($type);
  }

  if (empty($plugin) || empty($plugin['name'])) {
    return;
  }
  
  if (isset($plugin['content types'])) {
    $function = $plugin['content types'];
    if (is_array($function)) {
      $subtypes = $function;
    }
    else if (function_exists($function)) {
      // Cast to array to prevent errors from non-array returns.
      $subtypes = (array) $function($plugin);
    }
  }

  // Walk through the subtypes and ensure minimal settings are
  // retained.
  foreach ($subtypes as $id => $subtype) {
    // Use exact name since this is a modify by reference.
    ctools_content_prepare_subtype($subtypes[$id], $plugin);
  }

  return $subtypes;
}

function wallyctools_get_redac_view_array(){
  $display_plugin='redacblock';
  $query="SELECT vv.name, vv.vid, vd.display_plugin,vd.id, vd.display_title  FROM {views_display}  AS vd LEFT JOIN {views_view} AS  vv ON vv.vid=vd.vid WHERE display_plugin='%s'"; 
  $results=db_query($query,$display_plugin);
  
  $array=array();
  while($result=db_fetch_object($results)){
  $array[]=$result;
  }
  return $array;
}

function wallyctools_get_redac_view_options(){
  $options=array();
  $views=wallyctools_get_redac_view_array() ;
  foreach($views as $view){
    $options[$view->name.'+'.$view->id]=$view->name.'-'.$view->display_title.' ('.$view->id.')';
  }
  return $options;
}


function wallyctools_get_redac_block_list(){
  
$query="Select wb.name,wb.view_id,wb.view_id,wb.view_vid,wb.comment, vd.display_title, vv.name as view_name from {wallogic_block} wb LEFT JOIN {views_view} vv ON vv.vid=wb.view_vid LEFT JOIN {views_display} AS vd ON vd.id=wb.view_id";
  $results=db_query($query);
  
  $blocks=array();
  while($result=db_fetch_object($results)){
    $blocks[]=$result;
  }
  


$query="Select wb.name,wb.view_id,wb.view_id,wb.view_vid,wb.comment, vd.display_title, vv.name as view_name from {wallogic_block} wb LEFT JOIN {views_view} vv ON vv.vid=wb.view_vid LEFT JOIN {views_display} AS vd ON vd.id=wb.view_id";
  $results=db_query($query);
  
  $blocks=array();
  while($result=db_fetch_object($results)){
    $blocks[]=$result;
  }
  
  return  $blocks;
}


function wallyctools_form_alter(&$form, &$form_state, $form_id){
  if($form_id=='views_ui_edit_view_form'){
    $form['buttons']['save']["#submit"]=array_merge(array('wallyctools_save_views_layout'),$form['buttons']['save']["#submit"]);    
  }
}



function wallyctools_save_views_layout($form,$form_state){
  //Do what I need
  $view=$form_state['view'];
  foreach($view->display as $display){

    if($display->display_plugin=='redacblock'){
      
      
      //@todo: Handle the deletion of a view.
      foreach($display->display_options['redacblock_layout']  as $layout_id=>$layout_value){
        $row=new stdClass;
        $row->view_vid=$view_vid=$view->name;
        $row->view_id=$view_id=$display->id;
        $row->layout_id=$layout_id;
       
        //if checked
        if($layout_value!=FALSE){
          $sql="Select id FROM {wallyctools_views_layout} WHERE view_id='%s' and view_vid='%s' and layout_id='%s'";
          $result=db_result(db_query($sql,$view_id,$view_vid,$layout_id));

          
          if($result>0){
              $row->id=$result;
              drupal_write_record('wallyctools_views_layout',$row,'id');
          }
          else{
            drupal_write_record('wallyctools_views_layout',$row);
          }
        }

        
        //remove reference if exist
        else{
          $sql="DELETE  FROM {wallyctools_views_layout} WHERE view_id='%s' and view_vid='%s' and layout_id='%s'";
          $result=db_query($sql,$view_id,$view_vid,$layout_id);
          
        }
      }
    }
  }
}



function wallyctools_get_hierarchies(){
  
  //@todo remove hard coding of the vid
  $terms=taxonomy_get_tree(2);
  $depth=0;
  
  $tid_did_mapping=wallyctools_get_term_handler_mapping($terms,$depth);
  
  $array_of_redacblock_panes=wallyctools_get_redacblock_panes();
  
  foreach($tid_did_mapping as $tid=>$did_infos){
          $tid_did_mapping[$tid]['redacblocks']=array();  
        
    foreach($array_of_redacblock_panes as $pane){
      if($did_infos['did']==$pane->did){
        
        
        $tid_did_mapping[$tid]['redacblocks'][$pane->name]=array_merge($tid_did_mapping[$tid]['redacblocks'][$pane->name],array('title'=>$pane->admin_title,'name'=>$pane->name));
        $tid_did_mapping[$tid]['redacblocks'][$pane->name]['layouts'][$pane->layout_id]=array('name'=>$pane->layout_id);
      }
    }
  }
  return $tid_did_mapping;
  
}
  
function wallyctools_get_term_handler_mapping($terms,$depth){

  $availlable_handlers=array();
  
  foreach($terms as $term){
    $handler= wallyctools_get_active_handler($term->tid,$depth);
    $tid_did_mapping[$term->tid]=array('name'=>$handler->name,'did'=>$handler->did,'title'=>$handler->conf['title'],'term_name'=>$term->name);
  }
  return $tid_did_mapping;
  
}
function wallyctools_get_active_handler($term_tid,$depth){
  $task=page_manager_get_task('term_view');
  ctools_include('context');
  ctools_include('context-task-handler');
  
  $contexts=ctools_context_handler_get_task_contexts($task,'',array($term_tid,$depth));
  
  $handlers= page_manager_load_sorted_handlers($task,NULL,TRUE);
  
  foreach($handlers as $handler){
    //add my contexts
    $contexts= ctools_context_handler_get_handler_contexts($contexts, $handler);
    
    //Test if a handler match the context (ie: the term)
    if(ctools_context_handler_select($handler, $contexts)){
      return $handler;
    }
  }
  //No Handlers match
  return NULL;
    
}

function wallyctools_get_redacblock_panes(){
 $array_of_panes=array();
  $sql="Select pp.did, pp.subtype, wct.view_name,wct.name,wct.admin_title, wct.view_id, wctvl.layout_id FROM {panels_pane} AS pp LEFT JOIN {wallyctools} as wct ON wct.name=pp.subtype LEFT JOIN {wallyctools_views_layout} as wctvl ON wct.view_name=wctvl.view_vid AND wct.view_id=wctvl.view_id WHERE type='%s'";
  $results=(db_query($sql,"redacblock"));
  
  while($result=db_fetch_object($results)){
    $array_of_panes[]=$result;
  }
    return $array_of_panes;
}