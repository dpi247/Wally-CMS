<?php
/**
 * A true boolean conversion function.
 * 
 * @param $path
 *   The taxonomy term path to match ( /term1/term2/term3 ). 
 * @param $voc
 *   The taxonomy vocabulary used for filtering on a single vocabulary.
 *
 * @return
 *   an array of term object
 */
function wallytoolbox_toboolean($v,$def=null) {
	if ($v===false) return false;
	if ($v===true) return true;
	if ($v=="true") return true;
	if ($v=="false") return false;
	if ($v==0) return false;
	if ($v==1) return true;
	return $def;
}


/**
 * Taxonomy get term by path
 * 
 * Search for taxonomy terms for a specific path 
 *
 * @param $path
 *   The taxonomy term path to match ( /term1/term2/term3 ). 
 * @param $voc
 *   The taxonomy vocabulary used for filtering on a single vocabulary.
 *
 * @return
 *   an array of term object
 */
function wallytoolbox_taxonomy_get_term_by_path($path, $voc=null) {

	$t = explode("/", trim($path,"/"));
	$t = $t[count($t)-1];

	if ($voc) {
		$db_result = db_query("SELECT t.tid, t.* FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s') AND t.vid = %s", trim($t), $voc);
	} else {
		$db_result = db_query("SELECT t.tid, t.* FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s')", trim($t));
	}

	$result = array();

	// Reverse building of path for founded terms.
	while ($term = db_fetch_object($db_result)) {
		$ppath = "";
		$parents = taxonomy_get_parents_all($term->tid);
		foreach ($parents as $parent) $ppath = strtolower($parent->name)."/".$ppath;
		if (trim($ppath,"/")==strtolower(trim($path,"/"))) $result[] = $term;
	}
	
	return $result;
}