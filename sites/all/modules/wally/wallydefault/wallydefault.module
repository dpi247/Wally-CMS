<?php
/**
 * @defgroup wallydefault Wally Default Core Functions
 * @{
 * In this module we define core functions of wally.  
 */

define('WALLY_ADMIN_PATH', 'admin/wally');

/**
 * Implementation of hook_menu().
 */
function wallydefault_menu(){
 $items[WALLY_ADMIN_PATH] = array(
    'title' => 'Wally',
    'description' => 'Wally administration links.',
    'position' => 'right',
    'weight' => 5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer wally'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items; 
}


function wallydefault_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){

 switch ($op) {
    case 'view':
      _wallydefault_packagepopulate($node,$op);
		break;
	case 'presave' :
		if($node->type=='wally_articlepackage' || 
       $node->type=='wally_gallerypackage' || 
       $node->type=='wally_pollpackage')
        _wallydefault_addtaxonomywheninserted($node);
		break;
	case 'update' :
    if($node->type=='wally_articlepackage' || 
       $node->type=='wally_gallerypackage' ||
       $node->type=='wally_pollpackage')
        _wallydefault_addtaxonomywheninserted($node);
		elseif($node->type=='wally_textobject' ||
           $node->type=='wally_audioobject' ||
           $node->type=='wally_digitalobject' || 
           $node->type=='wally_photoobject' || 
           $node->type=='wally_videoobject' ||
           $node->type=='wally_pollobject')
			       _wallydefault_addtaxonomywhenupdated($node);
    
		break;
		}
}
/** 
 * Load related nodes into package object via nodepi - "op view". 
 * 
 * When a Wally specific node is loaded, this hook will load all the extra 
 * nodes from all the node reference fields.
 * 
 * Specific wally fields supported:
 *  
 * - NID (node reference) specific link ( NODE -> NODE ).
 *   - field_mainstory: Load the Mainstory text node. Load extra "types" into mainstory node.
 *   - field_linkedobjects: Load all the linked objects (any type).
 *   - field_embededobjects: Load all the embeded objects (any type).
 * 
 * - TID (Taxonomy field) specific link ( NODE -> TAXONOMY -> NODE ). 
 *   - field_authors: Load the Persons content type for authors.
 *   - field_locations: Load the Location content type for locations.
 *   - field_entities: Load the entity content type for entities.
 *   - field_persons: Load the Persons content type for persons.
 *
 * @param: &$node
 *   The node that will be inspected for node/taxonomy reference
 * @param: $op
 *   Nodeapi operation
 * @param: $a3
 *   3rd argument - depending of $op ( see @link http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_nodeapi/6  hook_nodeapi @endlink
 * @param: $a4
 *   4th argument - depending of $op ( see @link http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_nodeapi/6  hook_nodeapi @endlink
 * 
 * @return Nothing but modify the $node
 */
function _wallydefault_packagepopulate($node,$op){
  _wallydefault_field_NID($node, $op);
  _wallydefault_field_TID($node, $op);
  }
/**
 * Process Node Reference fields.
 */
function _wallydefault_field_NID(&$node, $op) {
	foreach ($node as $field=>$value) {
			switch($field) {
				case "field_mainstory":
					$node->field_mainstory_nodes = wallydefault_field_nodeload($field, $value);
					_wallydefault_field_TID(&$node->field_mainstory_nodes[0]);
					break;
				case "field_linkedobjects":
					$node->field_linkedobjects_nodes = wallydefault_field_nodeload($field, $value);
					break;
				case "field_embededobjects":
					$node->field_embededobjects_nodes = wallydefault_field_nodeload($field, $value);
					break;
			}
	}
	return $node;
}

/**
 * Process Content Taxonomy fields.
 */
function _wallydefault_field_TID(&$node) {
	foreach ($node as $field=>$value) {
		switch($field) {
			case "field_authors":
				$node->field_authors_nodes = wallydefault_field_tidload($field, $value, "wally_persontype");
				break;
			case "field_locations":	
				$node->field_locations_nodes = wallydefault_field_tidload($field, $value, "wally_locationtype");
				break;
			case "field_entities":	
				$node->field_entities_nodes = wallydefault_field_tidload($field, $value, "wally_entitytype");
				break;
			case "field_persons":
				$node->field_persons_nodes = wallydefault_field_tidload($field, $value, "wally_persontype");
				break;
		}
	}
	return $node;
}


/**
 * Process all taxonomy reference and return an array of node
 */
function wallydefault_field_tidload($field, $values, $type) {

	$r = array();
	$tids = array();  
	foreach ($values as $value=>$tid2load) {
		if ($tid2load["value"]) {
			$tids[] = $tid2load["value"]; 
		}
	}
	$results = wallytoolbox_taxonomy_get_nodes($tids, 'or', 0, false, $type);
	foreach ($results as $value=>$node2load) {
		if (!($r[$value] = node_load($node2load))) { 
			unset($r[$value]); 
		}
	}
	return $r; 
}


/**
 * Process all node reference fields and return array of node
 */
function wallydefault_field_nodeload($field, $values=null) {
	$r = array(); 
	foreach ($values as $value=>$node2load) {
		if (!($r[$value] = node_load($node2load["nid"]))) { 
			unset($r[$value]); 
		}
	} 
	return $r; 
}
/**
 * Add taxonomy term from textobject to articlepackage when textobject is updated
*  packagenode is the node who reference the current node (It can be ArticlePackage, GalleryPackage or PollPackage
* 
* @param $node
*   Node currently processed(TextObject, AudioObject, DigitalObject,PhotoObject, Videoobject, PollObject)
*
* @return
*   Nothing
*/
function _wallydefault_addtaxonomywhenupdated($node){
	
			$rows=_wallydefault_getpackagesid($node);
			foreach($rows as $row){
				$packagenode=node_load($row['nid']);
				$packagenode->taxonomy=$node->taxonomy;
				$packagenode->field_markers=$node->field_markers;
				$packagenode->field_locations=$node->field_locations;
				$packagenode->field_entities=$node->field_entities;
				$packagenode->field_persons=$node->field_persons;
				$packagenode->field_tags=$node->field_tags;
				$packagenode->field_free_tags=$node->field_free_tags;	
				node_save($packagenode);	
			}
	}
/**
 * Add taxonomy term of textobject to articlepackage when articlepackage is inserted or updated
 * 
 *  objectnode is the node who is referenced by the current node (It can be TextObject, AudioObject, DigitalObject,PhotoObject, Videoobject or PollObject)
 * @param $node
 *   Node currently processed(ArticlePackage, GalleryPackage or PollPackage)
 *
 * @return
 *   Nothing
*/
 function _wallydefault_addtaxonomywheninserted(&$node){
			
      $objectnode=node_load($node->field_mainstory[0]['nid']);
			$node->taxonomy=$objectnode->taxonomy;
			$node->field_markers=$objectnode->field_markers;
			$node->field_locations=$objectnode->field_locations;
			$node->field_entities=$objectnode->field_entities;
			$node->field_persons=$objectnode->field_persons;
			$node->field_tags=$objectnode->field_tags;
			$node->field_free_tags=$objectnode->field_free_tags;
      
	 }

   
/**
 * Get nid from packages who reference the current node
 * 
* @param $node
*   Node currently processed(TextObject, AudioObject, DigitalObject,PhotoObject, Videoobject, PollObject)
*
* @return
*   Array() of array() of nid
*/
function _wallydefault_getpackagesid($node){
  if($node->type=='wally_textobject'){
	$res=db_query("SELECT nid FROM {content_type_wally_articlepackage} WHERE field_mainstory_nid = %d", $node->nid);
	while ($row = db_fetch_array($res)) {
	  $rows[] = $row;
	}
  }
  elseif($node->type=='wally_audioobject' || $node->type=='wally_digitalobject' || $node->type=='wally_photoobject' || $node->type=='wally_videoobject'){
	$res=db_query("SELECT nid FROM {content_type_wally_gallerypackage} WHERE field_mainobject_nid = %d", $node->nid);
	while ($row = db_fetch_array($res)) {
	  $rows[] = $row;
	}
  }
  elseif($node->type=='wally_pollobject'){
	$res=db_query("SELECT nid FROM {content_type_wally_pollpackage} WHERE field_mainpoll_nid = %d", $node->nid);
	while ($row = db_fetch_array($res)) {
	  $rows[] = $row;
	}
  }
  return $rows;
}

/**
 * @} End of "defgroup wallydefault".
 */
