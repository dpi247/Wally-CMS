<?php

include_once('wallycontenttypes.features.inc');

/**
 * @defgroup WallyCTtheming Wally Content Types theming functions
 * @{
 * 
 * In this module we define all wally specific theming functions.
 * 
 */


/**
 *  Implémentation du Hook_theme(); 
 */
function wallycontenttypes_theme(&$var) {
 return array(

    'wallyct_personslist' => array(
    'arguments' => array("persons" => NULL, "node" => NULL),
    'template' => 'templates/wallyct_personslist',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_personslist_detail' => array(
    'arguments' => array("persons" => NULL, "node" => NULL),
    'template' => 'templates/wallyct_personslist_detail',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_photoobject_slideshow' => array(
    'arguments' => array("nodes" => NULL, "node" => NULL),
    'template' => 'templates/wallyct_photoobject_slideshow',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_mainmenu' => array(
    'arguments' => array("menu" => 'primary-links', "menuid" =>'menu-primary-links' ),
    'template' => 'templates/wallyct_mainmenu',
   // 'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),


    'wallyct_rss' => array(
    'arguments' => array("feed" => NULL, "options" => NULL),
    'template' => 'templates/wallyct_rss',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_tofacebook' => array(
    'arguments' => array("node" => NULL, "options" => NULL),
    'template' => 'templates/wallyct_tofacebook',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),



    'wallyct_taxotermlist' => array(
    'arguments' => array("tids" => NULL, "node" => NULL, "options" => NULL),
    'template' => 'templates/wallyct_taxotermlist',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_taxotermlist_tree' => array(
    'arguments' => array("tids" => NULL, "node" => NULL, "options" => NULL),
    'template' => 'templates/wallyct_taxotermlist_tree',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_mainstory' => array(
    'arguments' => array("mainstory" => NULL, "node" => NULL),
    'template' => 'templates/wallyct_mainstory',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    
  ); 
}


/*
 * Implementation of hook_ctools_plugin_directory().
 * 
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function wallycontenttypes_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}
/*
 * Implement hook_ctools_plugin_api().
 
  If you do this, CTools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function wallycontenttypes_ctools_plugin_api($module, $api) {
  // @todo -- this example should explain how to put it in a different file.
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}



/**
 * Insert additional template suggestions to wally specific theme functions.
 * this preprocess function could be set by any hook_theme.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered.
 */
function wally_get_tpl_suggestions(&$variables, $hook) {
    $suggestion = get_package_suggestions($variables, $hook); 
    if(count($suggestion)) $variables['template_files'] = array_merge($suggestion, $variables['template_files']);
}

/**
 *  Implémentation du hook_preprocess_page(); 
 */
function wallycontenttypes_preprocess_page(&$variables) {
  $suggestion = array(); 

  // For all Nodes types with a destination field.
  if (isset($variables['node']->field_destinations)) {
    $suggestion = get_package_suggestions(&$variables, 'page'); 
  }
  if(count($suggestion)) $variables['template_files'] = array_merge($suggestion, $variables['template_files']);
} 


/**
 *  Implémentation du hook_preprocess_node(); 
 */
function wallycontenttypes_preprocess_node(&$variables) {
  $suggestion = array(); 

  // For all Nodes types with a destination field.
  if (isset($variables['node']->field_destinations)) {
    $suggestion = get_package_suggestions(&$variables, 'node'); 
  }
  if(count($suggestion)) $variables['template_files'] = array_merge($suggestion, $variables['template_files']);
} 


/**
 * Extract page layout information from the node. 
 *
 * @param $node
 *   The node currently processed
 *
 * @return 
 *   The Package layout as a string or NULL.
 */
function get_wallypackage_layout($node) {
  if (isset($node->field_packagelayout)) {
    $package_layout = taxonomy_get_term($node->field_packagelayout[0]["value"]);
    $package_layout = strtolower(trim($package_layout->name));
  } else {
    $package_layout = NULL;
  }
  return $package_layout; 
}

/**
 * Build all the page/node suggestions template for a node of type "package"
 * of any content type with Destinations information.   
 *
 * Wally specific suggestions are (for pages):  
 * 
 * page_{destinations_terms_underscore_separated}.tpl.php
 * page_{destinations_terms_underscore_separated}_{node_type}.tpl.php
 * page_{destinations_terms_underscore_separated}_{node_type}_{package_layout}.tpl.php
 * page_{node_type}_{package_layout}.tpl.php
 * page_{node_type}.tpl.php
 * page.tpl.php
 * 
 * Wally specific suggestions are (for nodes):  
 * 
 * node-{node_type}.tpl.php
 * node_{destinations_terms_underscore_separated}.tpl.php
 * node_{destinations_terms_underscore_separated}_{node_type}.tpl.php
 * node_{destinations_terms_underscore_separated}_{node_type}_{package_layout}.tpl.php
 * node_{node_type}_{package_layout}.tpl.php
 * node_{node_type}.tpl.php < node.tpl.php
 *
 * Wally specific suggestions are (other hooks - types):  
 * 
 * {type}-{node_type}.tpl.php
 * {type}_{destinations_terms_underscore_separated}.tpl.php
 * {type}_{destinations_terms_underscore_separated}_{node_type}.tpl.php
 * {type}_{destinations_terms_underscore_separated}_{node_type}_{package_layout}.tpl.php
 * {type}_{node_type}_{package_layout}.tpl.php
 * {type}_{node_type}.tpl.php < node.tpl.php
 * 
 * @param $variables
 *   Templating variables
 * 
 * @param $type
 *   Prefix added to suggestions (default = page). Could be "page" or "node".
 * 
 * @return 
 *   Array of suggestion pages templates.
 */
function get_package_suggestions(&$variables, $type="page") {

  $suggestion = array(); 
  $tax_children = array(); 
  $vid=variable_get('wallymport_destinationpath',null);
  $path = ""; 
  $package_layout = (isset($variables['node'])) ? get_wallypackage_layout($variables['node']) : NULL ; 

// TODO: get from the node information from the node.
//
  $destinations = array(456,443);
//
// 
 
    (isset($variables['node']->type)) ? $suggestion[] = $type . '_' . strtolower($variables['node']->type) : NULL ;
 
    if ($package_layout) $suggestion[] = $type . '_' . strtolower($variables['node']->type) . '_' . $package_layout;

    if (count($destinations)) {
      $destination = $destinations[0];
      $tax_children = taxonomy_get_parents_all($destination, $vid);
      $count = count($tax_children);
      for ($i = $count-1; $i >= 0; $i--) {
        ($i == $count-1) ? $path .= strtolower($tax_children[$i]->name) : $path .= "_".strtolower($tax_children[$i]->name);
        if ($type) $suggestion[] = $type . '_' . $path;
        if (isset($variables['node']->type)) $suggestion[] = $type . '_' . $path . '_' . strtolower($variables['node']->type);
        if ($package_layout) $suggestion[] = $type . '_' .$path . '_' . strtolower($variables['node']->type) . '_' . $package_layout;
      }
    }  
  return $suggestion;  
}

/**
 * @} End of "defgroup wallycontenttypes".
 */




/**
 * @defgroup wallycontenttypes Wally Wally Content Types & Taxonomy definition
 * @{
   * 
 * In this module we define all wally specific content types & taxonomies
 * Also include all invocation for specific theme hook & theming preprocess
 * functions.
 * 
 */


/**
 *  Implémentation du Hook_form_alter(); 
 */
function wallycontenttypes_form_alter(&$form, $form_state, $form_id){
  if (isset($form['type']) && isset($form['#node'])) {
    switch ($form_id) {
      case "wally_articlepackage_node_form":
      case "wally_gallerypackage_node_form" :
      case "wally_pollpackage_node_form":
        _wallycontenttypes_disable_taxonomy($form, $form_state, $form_id);
      break;
    }
  }
}

/**
 * In case of package editing, all taxonomy/entities/persons/locations/...
 * are taken from the main object. So we disabled the edition for these
 * fields.
 * 
 * Because CCK fields didn't suppor the "disabled = true" attribute, and
 * because we must set all sub-element from a cck_field we add
 * an after_build callback function to the form. So all cck fields are
 * completly build.    
 *
 * @param &$form
 *   The form currently build
 * @param $form_state 
 *   A keyed array containing the current state of the form.
 * @param $form_id 
 *   String representing the name of the form itself. Typically this is the name of the function that generated the form.
 *
 * @return
 *   Nothing
 */
function _wallycontenttypes_disable_taxonomy(&$form, $form_state, $form_id){
  $form['#after_build'][] = '_disable_taxonomy_after_build';
}

/**
 * Call back function used by after_build attribute to 
 * disabled all "taxonomy" from a package content types. 
 * 
 * Because CCK fields didn't suppor the "disabled = true" attribute, and
 * because we must set all sub-element from a cck_field we had to put 
 * a disabled attribute to all sub-element of the cck field. 
 * 
 * Because, we're in an after-build process, cck_field could
 * be already relocated to a cck_fieldset. So we have to 
 * seach recursivly for fields.
 *
 * @param &$form
 *   The form currently build
 * @param $form_state 
 *   A keyed array containing the current state of the form.
 *
 * @return
 *   Nothing
 */
function _disable_taxonomy_after_build(&$form, &$form_state) {

 $fields = array(   "field_locations",
                    "field_markers",
                    "field_entities",
                    "field_persons",
                    "field_tags",
                    "field_free_tags"
                 );

  foreach ($fields as $field) {
    
    // CCK field on the 1st level of $form
    if (isset($form[$field])) {
      _mysnippet_fix_disabled($form[$field]);
    } else {
      // Because we're in afterbuild function, fields could be already
      // relocated into cck fieldsets > $form['fiedset']['cckfield'] 
      foreach (element_children($form) as $k) {
          if (isset($form[$k][$field])) {
            _mysnippet_fix_disabled($form[$k][$field]);
          }
      }
    } 
  }
  return($form);
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements. For a content_taxonomy_tree
* cck field, we must disbaled all the childrens: checkboxes or radios.
* 
* @param $element
*   The form element to procedd.
* 
* @return
*   Nothing
*/
function _mysnippet_fix_disabled(&$elements) {
  if ($elements["#type"]!="content_taxonomy_tree") {
    foreach (element_children($elements) as $key) {
      if (isset($elements[$key]) && $elements[$key]) {
        _mysnippet_fix_disabled($elements[$key]);
      }
    }
    if (!isset($elements['#attributes'])) {
      $elements['#attributes'] = array();
    }
    $elements['#attributes']['disabled'] = 'disabled';
  } else {
    foreach (element_children($elements['value']['#elements']) as $key) {
      _mysnippet_disabled_taxonomy_tree($elements['value']['#elements'][$key]);
    }
 }
}

/**
 * Recursvly search for each children element of a  content_taxonomy_tree
 * field. To disable all childrens. 
 * 
 * @param $element 
 *   Form element to proceed. Must be a content_taxonomy_tree element.
 *
 * @return
 *   Nothing
 */
function _mysnippet_disabled_taxonomy_tree(&$elements) {
  foreach (element_children($elements) as $k) {
    $elements[$k]['#attributes']['disabled'] = 'disabled';
    if ($k=='children') {
      foreach (element_children($elements[$k]) as $key) {
        _mysnippet_disabled_taxonomy_tree($elements[$k][$key]);
      }
    }
  }
 }

/**
 * @} End of "defgroup wallycontenttypes".
 */
