<?php
/**
 * @defgroup cckdestination Wally CCK Destination Functions
 * @{
 * In this module we define a new CCK field for destinatins (4 cascading select).  
 */

/**
 * Implementation of hook_install().
 */
function cckdestinations_install(){
  content_notify('install', 'destinationsfield');
}

/**
 * Implementation of hook_uninstall().
 */
function cckdestinations_uninstall(){
  content_notify('uninstall', 'destinationsfield');
}

/**
 * Implementation of hook_enable().
 */
function cckdestinations_enable(){
  content_notify('enable', 'destinationsfield');
}

/**
 * Implementation of hook_desable().
 */
function cckdestinations_disable(){
  content_notify('disable', 'destinationsfield');
}

/**
 * Implementation of hook_field_info().
 */
function cckdestinations_field_info(){
  return array(
    'destinationsfield' => array(
      'label' => t('Destinations'),
      'description' => t('Destinations for wally instances (triple )'),
    ),
  );
}

/**
 * Implementation of hook_field_settings() for cck_destination
 * 
 * Create an form element to be used on the field settings form. Field
 * settings will be same for all shared instances of the same field. 
 * Also define how data will be stored into database
 * 
 * @param: $op
 *   - "database columns": Declare the columns that content.module should create
 *     and manage on behalf of the field. If the field module wishes to handle
 *     its own database storage, this should be omitted.
 *   - "views data": 
 * @param: $field
 *   The field on which the operation is to be performed.
 * 
 * @return Nothing
 */
function cckdestinations_field_settings( $op, $field ){
  switch( $op ) {
    case 'database columns':
      $columns['tid'] = array('type' => 'int', 'length' => 10, 'not null' => FALSE, 'sortable' => TRUE, 'default' => 0);
      $columns['target'] = array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'default' => '');
      $columns['layout'] = array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'default' => '');
      $columns['rank'] = array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'default' => '');
      return $columns;
      break;
    case 'views data':
      module_load_include('inc', 'cckdestinations', 'views/cckdestinations.views');
	  return cckdestinations_views_content_field_data($field);
	  break;
  }
}

/**
 * Implementation of CCK hook_field().
 */
function cckdestinations_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      break;
    case 'sanitize':
      foreach ($items as $delta => $item) {
        foreach ( $item as $col => $dat ) {
          $items[$delta]['safe_' . $col ] = check_plain($item[ $col ]);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function cckdestinations_content_is_empty($item, $field) {
  if (empty($item['tid']) && empty($item['taaget']) & empty($item['layout'])& empty($item['rank'])) {
    return TRUE;
  }    
  return FALSE;
}

/**
 * Implementation of hook_widget_info().
 */
function cckdestinations_widget_info() {
  return array(
    'cckdestinations_widget' => array(
      'label' => t('Destination Select  fields'),
      'field types' => array('destinationsfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of Form API's hook_elements().
 *
 * @Returns A skeleton Form API array that defines callbacks for the widget form.
 */
function cckdestinations_elements() {
  $elements = array( 'cckdestinations_widget' =>
    array(
      '#input' => TRUE,
      '#process' => array( 'cckdestinations_cckdestinations_widget_process' ),
    ),
  );
  return $elements;
}

/**
 * Process callback for widget
 *
 * @return A Forms API array that defines the widget's editing form.
 */
function cckdestinations_cckdestinations_widget_process($element, $edit, &$form_state, $form) {

  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  $element['tid'] = array(
    '#title' => t( 'Taxonomy Term' ),
    '#type' => 'textfield',
    '#default_value' => $defaults['tid'],
    '#weight' => 2,
  );
   
  $vocabulary_id=variable_get('wallymport_destinationpath', 0);
   
  $element['tid']=_taxonomy_term_select(t('Taxonomy "Destination Path"'), $name, $defaults['tid'], $vocabulary_id, '', FALSE);
  $element['tid']['#required']=False;
  // add a new #attribute to the element.
  $element['tid']['#attributes'] = array('class' => 'tid');

/**
 * @todo Get the real values from database. 
 */
  $element['target'] = array(
    '#title' => t( 'Target' ),
    '#type' => 'select',
    '#default_value' => $defaults['target'],
    '#options'=>array(''=>'',"primary_list"=>"Primary list","secondary_list"=>"2nd List","AMEUBLEMENT"=>"A&D-AMEUBLEMENT","AUTOMOBILE"=>"A&D-AUTOMOBILE","GADGET"=>"A&D-GADGET",),
    '#classes'=>array(''=>'',"primary_list"=>"19","secondary_list"=>"19","AMEUBLEMENT"=>"453","AUTOMOBILE"=>"453","GADGET"=>"453", ),
    '#required'=>FALSE,
    '#weight' => 3,
     // specify theming callback & add a new #attribute to the element.
 	'#theme' => 'cckdestinations_cascading_select',
 	'#attributes' => array('class' => 'target'),
 );
  $element['layout'] = array(
    '#title' => t( 'Layout' ),
    '#type' => 'select',
    '#default_value' => $defaults['layout'],
    '#options'=>array(''=>'',"layout_system_name1"=>"LaYoout 1","layout_system_name2"=>"LaYouT 2","layout_system_name3"=>"Layout 3","LAPIN"=>"ART-ANIMAUX-LAPIN","CHIEN"=>"ART-ANIMAUX-CHIEN","CHAISE"=>"A&D-AMEUBLEMENT-CHAISE", "TABLE"=>"A&D-AMEUBLEMENT-TABLE", "AUDI"=>"A&D-AMEUBLEMENT-AUTO-AUDI", "VW"=>"A&D-AMEUBLEMENT-AUTO-VW", "PHONE"=>"A&D-GADGET-PHONE", "APN"=>"A&D-GADGET-APN",),
    '#classes'=>array(''=>'',"layout_system_name1"=>"primary_list","layout_system_name2"=>"primary_list","layout_system_name3"=>"secondary_list","LAPIN"=>"ANIMAUX","CHIEN"=>"ANIMAUX","CHAISE"=>"AMEUBLEMENT", "TABLE"=>"AMEUBLEMENT", "AUDI"=>"AUTOMOBILE", "VW"=>"AUTOMOBILE", "PHONE"=>"GADGET", "APN"=>"GADGET",),
    '#required'=>FALSE,
    '#weight' => 4,
     // specify theming callback & add a new #attribute to the element.
 	'#theme' => 'cckdestinations_cascading_select',
 	'#attributes' => array('class' => 'layout'),
 );
  $element['rank'] = array(
    '#title' => t( 'Rank' ),
    '#type' => 'select',
    '#default_value' => $defaults['rank'],
    '#options'=>array(''=>'',1=>"Rank 1",2=>"Rank 2",3=>"Rank 3",4=>"Rank 4",5=>"Rank 5",),
    '#classes'=>array(''=>'',1=>"Class R1",2=>"Class R2",3=>"Class R3",4=>"Class R4",5=>"Class R5",),
    '#required'=>FALSE,
    '#weight' => 5,
  );
  return $element;
}

function cckdestinations_get_classes_and_options(){
 
  $result['target']['#options']=array();
  $result['target']['#classes']=array();
 
  $result['layout']['#options']=array();
  $result['layout']['#classes']=array();
 
  $hierarchies=wallyctools_get_hierarchies();
  dsm($hierarchies);

  foreach($hierarchies as $tid=>$hierarchie){
    dsm($hierarchie);
    dsm($tid);
    foreach($hierarchie['redacblocks'] as $redacblock_id=>$redacblock){
      dsm($redacblock);
      $result['target']['#options']+=array($redacblock_id=>$redacblock['title']);
      $result['target']['#classes']+=array($tid.'_'.$redacblock_id=>$tid);
     
      foreach($redacblock['layouts'] as $layout_id=>$value){
        $result['layout']['#options']+=array($layout_id=>$layout_id);
        $result['layout']['#classes']+=array($layout_id=> $tid.'_'.$redacblock_id);
     
      }
   }
 }
 dsm($result);
 return $result;
}

/**
 * Implementation of hook_theme() for cascading select.
 * 
 * Call to cckdestinations_cascading_select_options() for theming "option". 
 *
 * @return HTML select form element. 
 */
function theme_cckdestinations_cascading_select($element) {
  $select = '';
  $size = $element['#size'] ? ' size="'. $element['#size'] .'"' : '';
  _form_set_class($element, array('form-select'));
  $multiple = $element['#multiple'];
  return theme('form_element', $element, '<select name="'. $element['#name'] .''. ($multiple ? '[]' : '') .'"'. ($multiple ? ' multiple="multiple" ' : '') . drupal_attributes($element['#attributes']) .' id="'. $element['#id'] .'" '. $size .'>'. cckdestinations_cascading_select_options($element) .'</select>');
}

/**
 * Specific theming function for Options on Cascading Selects.
 * 
 * Purpose is to add a html class attribute: sub_xxxx so, jquery can
 * act on these specials options (hide or show). 
 *
 * @return HTML options form elements. 
 */
function cckdestinations_cascading_select_options($element, $choices = NULL) {
	  
  if (!isset($choices)) {
    $choices = $element['#options'];
    $classes = $element['#classes'];

	// Add additional Jquery scripts. 
    $module_path = drupal_get_path('module', 'cckdestinations') .'/';
    drupal_add_js($module_path .'js/cckdestinations.js');
  }

  // array_key_exists() accommodates the rare event where $element['#value'] is NULL.
  // isset() fails in this situation.
  $value_valid = isset($element['#value']) || array_key_exists('#value', $element);
  $value_is_array = is_array($element['#value']);
  $options = '';

  foreach ($choices as $key => $choice) {

	if ($classes[$key]) {
		$class = 'class="sub_'.$classes[$key].'" ';
	}
	
    if (is_array($choice)) {
      $options .= '<optgroup label="'. $key .'">';
      $options .= form_select_options($element, $choice);
      $options .= '</optgroup>';
    }
    elseif (is_object($choice)) {
      $options .= form_select_options($element, $choice->option);
    }
    else {
      $key = (string)$key;
      if ($value_valid && (!$value_is_array && (string)$element['#value'] === $key || ($value_is_array && in_array($key, $element['#value'])))) {
        $selected = ' selected="selected"';
      }
      else {
        $selected = '';
      }
      $options .= '<option '.$class.'value="'. check_plain($key) .'"'. $selected .'>'. check_plain($choice) .'</option>';
    }
  }
  return $options;
}

/**
 * Validate callback for widget
 *
 * @return Nothing
 */
function cckdestinations_widget_validate(&$element, &$form_state) {
/**
 * @todo validate link between tid, target and display. 
 */
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_cckdestinations_widget($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_widget().
 */  
function cckdestinations_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 *
 * @return Information about available field formatters.
 */
function cckdestinations_field_formatter_info() {
  return array(
    'default' => array(
       'label' => t( 'Default Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'tid' => array(
       'label' => t( 'Term Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'target' => array(
       'label' => t( 'Target Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'layout' => array(
       'label' => t( 'Layout Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'rank' => array(
       'label' => t( 'Rank Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    
  );
}

/**
 * Implementation of hook_theme().
 *
 * @return Array of theme callback
 */
function cckdestinations_theme() {
  return array(
    'cckdestinations_widget' => array(
       'arguments' => array('element' => NULL),
    ),

    'cckdestinations_formatter_default' => array(
       'arguments' => array('element' => NULL),
    ),
    'cckdestinations_formatter_tid' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_formatter_target' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_formatter_layout' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_formatter_rank' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_cascading_select' => array(
       'arguments' => array('element' => NULL),
    ),    
);
}

/**
 * Implementation of CCK's hook_field_formatter_default().
 *
 * @return HTML for destination form element
 */
function theme_cckdestinations_formatter_default($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }
  $ret .= '</div>';
  return $ret;
}


/**
 * Implementation of CCK's hook_field_formatter().
 *
 * @return HTML for destination form element
 */
function theme_cckdestinations_formatter_tid($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }
  $ret .= '</div>';
  return $ret;
}

/**
 * Implementation of CCK's hook_field_formatter for target element.  
 */
function theme_cckdestinations_formatter_target($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

	$stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }
  $ret .= '</div>';
  return $ret;
}


/**
 * Implementation of CCK's hook_field_formatter for layout element.  
 */
function theme_cckdestinations_formatter_layout($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }
  $ret .= '</div>';
  return $ret;
}

/**
 * Implementation of CCK's hook_field_formatter for rank element.  
 */
function theme_cckdestinations_formatter_rank($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }
  $ret .= '</div>';
  return $ret;
}

/**
 * Implementation of hook_views_api().
 */
function cckdestinations_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'cckdestinations') .'/views',
  );
}
