<?php


function cckdestinations_install() {
  content_notify('install', 'destinationsfield');
}

function cckdestinations_uninstall() {
  content_notify('uninstall', 'destinationsfield');
}

function cckdestinations_enable() {
  content_notify('enable', 'destinationsfield');
}

function cckdestinations_disable() {
  content_notify('disable', 'destinationsfield');
}


/**
 * Implementation of hook_field_info().
 */
function cckdestinations_field_info() {
  return array(
    'destinationsfield' => array(
      'label' => t('Destinations'),
      'description' => t('Destinations for wally instances (triple )'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function cckdestinations_field_settings( $op, $field ) {
  switch( $op ) {
    case 'database columns':
      $columns['tid'] = array('type' => 'int', 'length' => 10, 'not null' => FALSE, 'sortable' => TRUE, 'default' => 0);
      $columns['target'] = array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'default' => '');
      $columns['layout'] = array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'default' => '');
      $columns['rank'] = array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => FALSE, 'default' => '');
      return $columns;
     break;
     case 'views data':
       module_load_include('inc', 'cckdestinations', 'views/cckdestinations.views');
     return cckdestinations_views_content_field_data($field);
     break;
  }
}
/**
 * Implementation of CCK hook_field().
 */
function cckdestinations_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      
     break;

    case 'sanitize':
      foreach ($items as $delta => $item) {
        foreach ( $item as $col => $dat ) {
          $items[$delta]['safe_' . $col ] = check_plain($item[ $col ]);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function cckdestinations_content_is_empty($item, $field) {
  
  
  if (empty($item['tid']) && empty($item['taaget']) & empty($item['layout'])& empty($item['rank'])) {
    return TRUE;
  }  
  return FALSE;
}

/**
 * Implementation of hook_widget_info().
 */
function cckdestinations_widget_info() {
  return array(
    'cckdestinations_widget' => array(
      'label' => t('Destination Select  fields'),
      'field types' => array('destinationsfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of Form API's hook_elements().
 *
 * Returns a skeleton Form API array that defines callbacks
 * for the widget form.
 */
function cckdestinations_elements() {
  $elements = array( 'cckdestinations_widget' =>
    array(
      '#input' => TRUE,
      '#process' => array( 'cckdestinations_cckdestinations_widget_process' ),
    ),
  );

  return $elements;
}



/**
 * Process callback for widget
 *
 * Returns a Forms API array that defines the widget's editing form.
 */
function cckdestinations_cckdestinations_widget_process($element, $edit, &$form_state, $form) {

  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  $element['tid'] = array(
    '#title' => t( 'Taxonomy Term' ),
    '#type' => 'textfield',
    '#default_value' => $defaults['tid'],
    '#weight' => 2,
  );
  
   
  $vocabulary_id=variable_get('wallymport_destinationpath', 0);
   
  $element['tid']=_taxonomy_term_select(t('Taxonomy "Destination Path"'), $name, $defaults['tid'], $vocabulary_id, '', FALSE);
  $element['tid']['#required']=False;
  $element['tid']['#attributes'] = array('class' => 'tid');
 
 
  $element['target'] = array(
    '#title' => t( 'Target' ),
    '#type' => 'select',
    '#default_value' => $defaults['target'],
    '#options'=>array(''=>'',"FLEUR"=>"ART-FLEURS","ANIMAUX"=>"ART-ANIMAUX","AMEUBLEMENT"=>"A&D-AMEUBLEMENT","AUTOMOBILE"=>"A&D-AUTOMOBILE","GADGET"=>"A&D-GADGET",),
    '#classes'=>array(''=>'',"FLEUR"=>"429","ANIMAUX"=>"429","AMEUBLEMENT"=>"453","AUTOMOBILE"=>"453","GADGET"=>"453", ),
    '#required'=>FALSE,
    '#weight' => 3,
 	'#theme' => 'cckdestinations_cascading_select',
 	'#attributes' => array('class' => 'target'),
 );

  $element['layout'] = array(
    '#title' => t( 'Layout' ),
    '#type' => 'select',
    '#default_value' => $defaults['layout'],
    '#options'=>array(''=>'',"ROSE"=>"ART-FLEURS-ROSE","TULIPE"=>"ART-FLEURS-TULIPE","CHEVAL"=>"ART-ANIMAUX-CHEVAL","LAPIN"=>"ART-ANIMAUX-LAPIN","CHIEN"=>"ART-ANIMAUX-CHIEN","CHAISE"=>"A&D-AMEUBLEMENT-CHAISE", "TABLE"=>"A&D-AMEUBLEMENT-TABLE", "AUDI"=>"A&D-AMEUBLEMENT-AUTO-AUDI", "VW"=>"A&D-AMEUBLEMENT-AUTO-VW", "PHONE"=>"A&D-GADGET-PHONE", "APN"=>"A&D-GADGET-APN",),
    '#classes'=>array(''=>'',"ROSE"=>"FLEUR","TULIPE"=>"FLEUR","CHEVAL"=>"ANIMAUX","LAPIN"=>"ANIMAUX","CHIEN"=>"ANIMAUX","CHAISE"=>"AMEUBLEMENT", "TABLE"=>"AMEUBLEMENT", "AUDI"=>"AUTOMOBILE", "VW"=>"AUTOMOBILE", "PHONE"=>"GADGET", "APN"=>"GADGET",),
    '#required'=>FALSE,
    '#weight' => 4,
 	'#theme' => 'cckdestinations_cascading_select',
 	'#attributes' => array('class' => 'layout'),
 );

  $element['rank'] = array(
    '#title' => t( 'Rank' ),
    '#type' => 'select',
    '#default_value' => $defaults['rank'],
    '#options'=>array(''=>'',1=>"Rank 1",2=>"Rank 2",3=>"Rank 3",4=>"Rank 4",5=>"Rank 5",),
    '#classes'=>array(''=>'',1=>"Class R1",2=>"Class R2",3=>"Class R3",4=>"Class R4",5=>"Class R5",),
    '#required'=>FALSE,
    '#weight' => 5,
	'#theme' => 'cckdestinations_cascading_select',
  );

  return $element;
}


function theme_cckdestinations_cascading_select($element) {

  $select = '';
  $size = $element['#size'] ? ' size="'. $element['#size'] .'"' : '';
  _form_set_class($element, array('form-select'));
  $multiple = $element['#multiple'];
  return theme('form_element', $element, '<select name="'. $element['#name'] .''. ($multiple ? '[]' : '') .'"'. ($multiple ? ' multiple="multiple" ' : '') . drupal_attributes($element['#attributes']) .' id="'. $element['#id'] .'" '. $size .'>'. cckdestinations_cascading_select_options($element) .'</select>');
}


function cckdestinations_cascading_select_options($element, $choices = NULL) {
	  
  if (!isset($choices)) {
    $choices = $element['#options'];
    $classes = $element['#classes'];

	// Add additional Jquery scripts. 
    $module_path = drupal_get_path('module', 'cckdestinations') .'/';
    drupal_add_js($module_path .'js/cckdestinations.js');
  }

  // array_key_exists() accommodates the rare event where $element['#value'] is NULL.
  // isset() fails in this situation.
  $value_valid = isset($element['#value']) || array_key_exists('#value', $element);
  $value_is_array = is_array($element['#value']);
  $options = '';

  foreach ($choices as $key => $choice) {

	if ($classes[$key]) {
		$class = 'class="sub_'.$classes[$key].'" ';
	}
	
    if (is_array($choice)) {
      $options .= '<optgroup label="'. $key .'">';
      $options .= form_select_options($element, $choice);
      $options .= '</optgroup>';
    }
    elseif (is_object($choice)) {
      $options .= form_select_options($element, $choice->option);
    }
    else {
      $key = (string)$key;
      if ($value_valid && (!$value_is_array && (string)$element['#value'] === $key || ($value_is_array && in_array($key, $element['#value'])))) {
        $selected = ' selected="selected"';
      }
      else {
        $selected = '';
      }
      $options .= '<option '.$class.'value="'. check_plain($key) .'"'. $selected .'>'. check_plain($choice) .'</option>';
    }
  }
  return $options;
}



function cckdestinations_widget_validate(&$element, &$form_state) {
  //@todo: validate link between tid, target and display
  ;
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_cckdestinations_widget($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_widget().
 */  
function cckdestinations_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}


/**
 * Implementation of CCK's hook_field_formatter_info().
 *
 * Returns information about available field formatters.
 */
function cckdestinations_field_formatter_info() {
  return array(
    'default' => array(
       'label' => t( 'Default Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'tid' => array(
       'label' => t( 'Term Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'target' => array(
       'label' => t( 'Target Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'layout' => array(
       'label' => t( 'Layout Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    'rank' => array(
       'label' => t( 'Rank Only Formater' ),
       'field types' => array( 'destinationsfield' ),
    ),
    
  );
}

function cckdestinations_theme() {
  return array(
    'cckdestinations_widget' => array(
       'arguments' => array('element' => NULL),
    ),

    'cckdestinations_formatter_default' => array(
       'arguments' => array('element' => NULL),
    ),
    'cckdestinations_formatter_tid' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_formatter_target' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_formatter_layout' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_formatter_rank' => array(
       'arguments' => array('element' => NULL),
    ),
        'cckdestinations_cascading_select' => array(
       'arguments' => array('element' => NULL),
    ),    
);
}

function theme_cckdestinations_formatter_default($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }

  
  $ret .= '</div>';

  return $ret;
}


function theme_cckdestinations_formatter_tid($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }

  
  $ret .= '</div>';

  return $ret;
}


function theme_cckdestinations_formatter_target($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }

  
  $ret .= '</div>';

  return $ret;
}


function theme_cckdestinations_formatter_layout($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }

  
  $ret .= '</div>';

  return $ret;
}


function theme_cckdestinations_formatter_rank($element = NULL) {
  if(empty($element['#item'])) {
    return '';
  }

  $stuff = $element['#item'];

  $flds = array('tid', 'target', 'layout', 'rank');
  $sep = '';
  $ret='<div class="cckdestinations">';
  foreach($flds as $fld) {
    if(!empty($stuff['safe_' . $fld ])) {
      $ret .= $sep . '<span class="' . $fld . '">' . $stuff['safe_' . $fld ] . '</span>';
      $sep = "<br />\n";
    }
  }
  
  $ret .= '</div>';
  return $ret;
}

/**
 * Implementation of hook_views_api().
 */
function cckdestinations_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'cckdestinations') .'/views',
  );
}


/* 
 * Implementation du nodeapi 
 * 
 * When a Wally specific node is loaded, this hook will load all the extra 
 * nodes from all the node reference fields.
 * 
 * Specific wally fields supported:
 *  
 */
function cckdestinations_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

 switch ($op) {
    case 'view':
		wallylogic_field_NID($node, $op);
		wallylogic_field_TID($node, $op);

//		dsm("node apres le view");
//		dsm($node); 

		break;
	}
}

function wallylogic_field_NID(&$node, $op) {
	foreach ($node as $field=>$value) {
			switch($field) {
				case "field_mainstory":
					$node->field_mainstory_nodes = wallylogic_field_nodeload($field, $value);
					wallylogic_field_TID(&$node->field_mainstory_nodes[0]);
					break;
				case "field_linkedobjects":
					$node->field_linkedobjects_nodes = wallylogic_field_nodeload($field, $value);
					break;
				case "field_embededobjects":
					$node->field_embededobjects_nodes = wallylogic_field_nodeload($field, $value);
					break;
			}
	}
	return $node;
}

function wallylogic_field_TID(&$node) {
	foreach ($node as $field=>$value) {
		switch($field) {
			case "field_authors":
				$node->field_authors_nodes = wallylogic_field_tidload($field, $value, "wally_persontype");
				break;
			case "field_locations":	
				$node->field_locations_nodes = wallylogic_field_tidload($field, $value, "wally_locationtype");
				break;
			case "field_entities":	
				$node->field_entities_nodes = wallylogic_field_tidload($field, $value, "wally_entitytype");
				break;
			case "field_persons":
				$node->field_persons_nodes = wallylogic_field_tidload($field, $value, "wally_persontype");
				break;
		}
	}
	return $node;
}


/**
 * Process all taxonomy reference and return an array of node
 */
function wallylogic_field_tidload($field, $values, $type) {

	$r = array();
	$tids = array();  
	foreach ($values as $value=>$tid2load) {
		if ($tid2load["value"]) {
			$tids[] = $tid2load["value"]; 
		}
	}
	
	$results = wallytoolbox_taxonomy_get_nodes($tids, 'or', 0, false, $type);

	foreach ($results as $value=>$node2load) {
		if (!($r[$value] = node_load($node2load))) { 
			unset($r[$value]); 
		}
	}
	return $r; 
}


/**
 * Process all node reference fields and return array of node
 */
function wallylogic_field_nodeload($field, $values=null) {
	$r = array(); 
	foreach ($values as $value=>$node2load) {
		if (!($r[$value] = node_load($node2load["nid"]))) { 
			unset($r[$value]); 
		}
	} 
	return $r; 
}



