<?php
// $Id: emother.module $

/**
 * @file
 * Embedded Other module is a handler for other medias hosted on 3rd party sites.
 */

define('EMOTHER_DEFAULT_FULL_WIDTH', 470);
define('EMOTHER_DEFAULT_FULL_HEIGHT', 550);
define('EMOTHER_DEFAULT_PREVIEW_WIDTH',235);
define('EMOTHER_DEFAULT_PREVIEW_HEIGHT',275);
define('EMOTHER_DEFAULT_THUMBNAIL_WIDTH',115);
define('EMOTHER_DEFAULT_THUMBNAIL_HEIGHT',135);
define('EMOTHER_DEFAULT_THUMBNAIL_PATH', '');

/**
 * Implementation of hook_menu()
 */
function emother_menu() {
  $items = module_invoke('emfield', 'provider_menus', 'emother');
  return $items;
}

/**
 *  Implement hook_emfield_info()
 */
function emother_emfield_info() {
  return array(
    '#name' => t('Embedded Other Field'),
    '#settings_title' => t('Other Medias'),
    '#settings_description' => t('The following settings configure content with any fields controlled by Embedded Others Field.'),
  );
}

/**
 * Implement hook_settings()
 */
function emother_emfield_settings() {
  $form = array();
  return $form;
}

/**
 * Implementation of hook_field_info()
 */
function emother_field_info() {
  $fields = array(
    'emother' => array(
      'label' => t('Embedded Other'),
	  'description' => t('Automatically parse and display other medias from a 3rd party by submitting its URL or embed code.'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );

  return $fields;
}

/**
 * Implementation of hook_field_settings()
 */
function emother_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      return module_invoke('emfield', 'field_columns', $field);
      break;
  }
}

/*
 * Handle the provider argument. This is called from a wrapper that includes the module. 
 * If you need to create a similar module, just change the emother part by the name of your module.
 */
function emother_handler_arg_provider($op, &$query, $argtype, $arg = '') {
  return _emfield_handler_arg_provider($op, $query, $argtype, $arg, 'emother');
}

/**
 * Implementation of hook_field()
 */
function emother_field($op, &$node, $field, &$items, $teaser, $page) {
  if (module_hook('emfield', 'emfield_field')) {
    return emfield_emfield_field($op, $node, $field, $items, $teaser, $page, 'emother');
  }
}

/**
 * Implementation of hook_content_is_empty()
 */
function emother_content_is_empty($item, $field) {
  return module_invoke('emfield', 'emfield_content_is_empty', $item, $field);
}

/**
 * Implementation of hook_field_formatter_info()
 */
function emother_field_formatter_info() {
  $types = array('emother', );
  $formats = array(
    'default' => array(
      'label' => t('Default'),
      'field types' => $types,
    ),
    'other_full' => array(
      'label' => t('Full Size Other Media'),
      'field types' => $types,
    ),
    'other_preview' => array(
      'label' => t('Preview Size Other Media'),
      'field types' => $types,
    ),
    'other_thumbnail' => array(
      'label' => t('Image Thumbnail'),
      'field types' => $types,
    ),
    'other_embed' => array(
      'label' => t('Embed Code'),
      'field types' => $types,
    ),
  );

  return $formats;
}

/**
 * Implementation of hook_field_formatter()
 */
function emother_field_formatter($field, $item, $formatter, $node) {
  return module_invoke('emfield', 'emfield_field_formatter', $field, $item, $formatter, $node, 'emother');
}

/** Widgets **/

/**
 * Implementation of hook_widget_info()
 */
function emother_widget_info() {
  return array(
    'emother_textfields' => array(
      'label' => t('3rd Party Other Media'),
      'field types' => array('emother', ),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings()
 */
function emother_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      if ($widget['type'] == 'emother_textfields') {
        $form = (array)module_invoke('emfield', 'emfield_widget_settings', 'form', $widget, 'emother');
        $width = variable_get('emother_default_other_width', EMOTHER_DEFAULT_FULL_WIDTH);
        $height = variable_get('emother_default_other_height', EMOTHER_DEFAULT_FULL_HEIGHT);
        $form['other'] = array(
          '#type' => 'fieldset',
          '#title' => t('Other Media Display Settings'),
          '#description' => t('These settings control how this other media is displayed in its full size, which defaults to @widthx@height.', array('@width' => $width, '@height' => $height)),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );
        $form['other']['other_width'] = array(
          '#type' => 'textfield',
          '#title' => t('Other Media display width'),
          '#default_value' => empty($widget['other_width']) ? $width : $widget['other_width'],
          '#required' => TRUE,
          '#description' => t('The width of the other media. It defaults to @width.', array('@width' => $width)),
        );
        $form['other']['other_height'] = array(
          '#type' => 'textfield',
          '#title' => t('Other Media display height'),
          '#default_value' => empty($widget['other_height']) ? $height : $widget['other_height'],
          '#required' => TRUE,
          '#description' => t('The height of the other media. It defaults to @height.', array('@height' => $height)),
        );
        
        $form['other']['other_autoplay'] = array(
          '#type' => 'checkbox',
          '#title' => t('Autoplay'),
          '#default_value' => empty($widget['other_autoplay']) ? '' : $widget['other_autoplay'],
          '#description' => t('If supported by the provider, checking this box will cause the other media to automatically begin after it loads when in its full size.'),
        );
  
        $width = variable_get('emother_default_preview_width', EMOTHER_DEFAULT_PREVIEW_WIDTH);
        $height = variable_get('emother_default_preview_height', EMOTHER_DEFAULT_PREVIEW_HEIGHT);
        $form['preview'] = array(
          '#type' => 'fieldset',
          '#title' => t('Other Media Preview Settings'),
          '#description' => t('These settings control how this other media is displayed in its preview size, which defaults to @widthx@height.', array('@width' => $width, '@height' => $height)),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );
        $form['preview']['preview_width'] = array(
          '#type' => 'textfield',
          '#title' => t('Other media preview width'),
          '#default_value' => empty($widget['preview_width']) ? $width : $widget['preview_width'],
          '#required' => TRUE,
          '#description' => t('The width of the preview other media. It defaults to @width.', array('@width' => $width)),
        );
        $form['preview']['preview_height'] = array(
          '#type' => 'textfield',
          '#title' => t('Other media preview height'),
          '#default_value' => empty($widget['preview_height']) ? $height : $widget['preview_height'],
          '#required' => TRUE,
          '#description' => t('The height of the preview other media. It defaults to @height.', array('@height' => $height)),
        );
        
        $form['preview']['preview_autoplay'] = array(
          '#type' => 'checkbox',
          '#title' => t('Autoplay'),
          '#default_value' => empty($widget['preview_autoplay']) ? '' : $widget['preview_autoplay'],
          '#description' => t('If supported by the provider, checking this box will cause the other player to automatically begin after it loads when in its preview size.'),
        );

        $width = variable_get('emother_default_thumbnail_width', EMOTHER_DEFAULT_THUMBNAIL_WIDTH);
        $height = variable_get('emother_default_thumbnail_height', EMOTHER_DEFAULT_THUMBNAIL_HEIGHT);
        $form['tn'] = array(
          '#type' => 'fieldset',
          '#title' => t('Thumbnail'),
          '#description' => t('When displayed as a thumbnail, these settings control the image returned. Note that not all 3rd party other medias content providers offer thumbnails, and others may require an API key or other requirements. More information from the <a href="@settings">settings page</a>. The default size for thumbnails is @widthx@height.', array('@settings' => url('admin/content/emfield'), '@width' => $width, '@height' => $height)),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );
        $form['tn']['thumbnail_width'] = array(
          '#type' => 'textfield',
          '#title' => t('Thumbnail width'),
          '#default_value' => empty($widget['thumbnail_width']) ? $width : $widget['thumbnail_width'],
          '#required' => TRUE,
          '#description' => t('The width of the thumbnail. It defaults to @width.', array('@width' => $width)),
        );
        $form['tn']['thumbnail_height'] = array(
          '#type' => 'textfield',
          '#title' => t('Thumbnail height'),
          '#default_value' => empty($widget['thumbnail_height']) ? $height : $widget['thumbnail_height'],
          '#required' => TRUE,
          '#description' => t('The height of the thumbnail. It defaults to @height.', array('@height' => $height)),
        );
        // Construct the description of the default path, hinting about the
        // Embedded Media Thumbnail module if it's not enabled.
        $description = t("Path to a local default thumbnail image for cases when a thumbnail can't be found. For example, you might have a default thumbnail at %files.", array('%files' => 'files/thumbnail.png'));
        if (!module_exists('emthumb')) {
          $description = ' '. t('You may be interested in activating the Embedded Media Thumbnails module as well, which will allow you to specify custom thumbnails on a per-node basis.');
        }
        $default_path = variable_get('emother_default_thumbnail_path', EMOTHER_DEFAULT_THUMBNAIL_PATH);
        $form['tn']['thumbnail_default_path'] = array(
          '#type' => 'textfield',
          '#title' => t('Default thumbnail path'),
          '#default_value' => empty($widget['thumbnail_default_path']) ? $default_path : $widget['thumbnail_default_path'],
          '#description' => $description,
        );
      }

      return $form;

    case 'validate':
      if ($widget['type'] == 'emother_textfields') {
        if (!is_numeric($widget['other_width']) || intval($widget['other_width']) != $widget['other_width'] || $widget['other_width'] < 1) {
          form_set_error('other_width', t('"Other media width" must be a positive integer.'));
        }
        if (!is_numeric($widget['other_height']) || intval($widget['other_height']) != $widget['other_height'] || $widget['other_height'] < 1){
          form_set_error('other_height', t('"Other media height" must be a positive integer.'));
        }
        if (!is_numeric($widget['preview_width']) || intval($widget['preview_width']) != $widget['preview_width'] || $widget['preview_width'] < 1) {
          form_set_error('preview_width', t('"Preview width" must be a positive integer.'));
        }
        if (!is_numeric($widget['preview_height']) || intval($widget['preview_height']) != $widget['preview_height'] || $widget['preview_height'] < 1) {
          form_set_error('preview_height', t('"Preview height" must be a positive integer.'));
        }
        if (!is_numeric($widget['thumbnail_width']) || intval($widget['thumbnail_width']) != $widget['thumbnail_width'] || $widget['thumbnail_width'] < 1) {
          form_set_error('thumbnail_width', t('"Thumbnail width" must be a positive integer.'));
        }
        if (!is_numeric($widget['thumbnail_height']) || intval($widget['thumbnail_height']) != $widget['thumbnail_height'] || $widget['thumbnail_height'] < 1) {
          form_set_error('thumbnail_height', t('"Thumbnail height" must be a positive integer.'));
        }
      }
      break;

    case 'save':
      if ($widget['widget_type'] == 'emother_textfields') {
        $columns = array('other_width', 'other_height', 'other_autoplay',  'preview_width', 'preview_height', 'preview_autoplay', 'thumbnail_width', 'thumbnail_height', 'thumbnail_default_path', );
        $columns = array_merge($columns, module_invoke('emfield', 'emfield_widget_settings', 'save', $widget, 'emother'));

        return $columns;
      }
      break;
  }
}

/**
 * Implementation of hook_widget()
 */
function emother_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  if (module_hook('emfield', 'emfield_widget')) {
    return emfield_emfield_widget($form, $form_state, $field, $items, $delta, 'emother');
  }
}

/**
 * Implementation of hook_embed_form()
 */
function emother_embed_form($field, $item, $formatter, $node, $options = array()) {
  $embed = $item['value'];
  $width = $options['width'] ? $options['width'] : $field['widget']['other_width'];
  $height = $options['height'] ? $options['height'] : $field['widget']['other_height'];
  $autoplay = $options['autoplay'] ? $options['autoplay'] : $field['widget']['other_autoplay'];
  $description = $options['description'] ? $options['description'] : t('To embed this other media on your own site, simply copy and paste the html code from this text area.');
  $title = $options['title'] ? $options['title'] : t('Embed Code');
  $text = module_invoke('emfield', 'include_invoke', 'emother', $item['provider'], 'other', $embed, $width, $height, $field, $item , $autoplay);
  $form = array();
  $form['emother_embed'] = array(
    '#type' => 'textarea',
    '#title' => $title,
    '#description' => $description,
    '#default_value' => $text,
  );

  return $form;
}

/**
 * Providers may supply an enclosure for rss feeds. This expects something in a
 * file format, so would be an object in the format of $file->filepath,
 * $file->filesize, and $file->filemime.
 * Calls the providers hook emother_PROVIDER_rss($item, $teaser).
 */
function emother_emfield_rss($node, $items = array(), $teaser = NULL) {
  $rss_data = array();
  foreach ($items as $item) {
    // note only the first $item will get an RSS enclosure, other items may have media: data in the feed however
    if ($item['value'] && $item['provider']) {
      $rss_data[] = module_invoke('emfield', 'include_invoke', 'emother', $item['provider'], 'rss', $item, $teaser);
    }
  }

  return $rss_data;
}

/**
 *  Implements hook_theme()
 */
function emother_theme() {
  $themes = array(
    'emother_other_embed' => array(
       'arguments' => array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL, 'options' => array()),
       'file' => 'emother.theme.inc'
    ),
    'emother_other_flash' => array(
      'arguments' => array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL, 'options' => array()),
      'file' => 'emother.theme.inc'
    ),
    'emother_other_thumbnail' => array(
      'arguments' => array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL, 'options' => array()),
      'file' => 'emother.theme.inc'
    ),
    'emother_other_other' => array(
      'arguments' => array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL, 'options' => array()),
      'file' => 'emother.theme.inc'
    ),
    'emother_other_preview' => array(
      'arguments'	=> array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL, 'options' => array()),
      'file' => 'emother.theme.inc'
    ),
    'emother_default' => array(
      'arguments'	=> array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL, 'options' => array()),
      'file' => 'emother.theme.inc'
    ),
    'emother_formatter_other_embed' => array(
      'arguments' => array('element' => NULL),
      'file' => 'emother.theme.inc'
    ),
    'emother_formatter_other_thumbnail' => array(
      'arguments' => array('element' => NULL),
      'file' => 'emother.theme.inc'
    ),
    'emother_formatter_other_other' => array(
      'arguments' => array('element' => NULL),
      'file' => 'emother.theme.inc'
    ),
    'emother_formatter_other_preview' => array(
      'arguments'	=> array('element' => NULL),
      'file' => 'emother.theme.inc'
    ),
    'emother_formatter_other_flash' => array(
      'arguments'	=> array('element' => NULL),
      'file' => 'emother.theme.inc'
    ),
    'emother_formatter_default' => array(
      'arguments'	=> array('element' => NULL),
      'file' => 'emother.theme.inc'
    ),
  );
  $themes += emfield_provider_themes('emother');

  return $themes;
}
