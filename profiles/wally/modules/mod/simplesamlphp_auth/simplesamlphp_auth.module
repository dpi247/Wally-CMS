<?php

/*
 * simpleSAMLphp authentication module for Drupal.
 *
 * (c) UNINETT, Andreas Ã…kre Solberg, <andreas.solberg@uninett.no>. http://rnd.feide.no
 *
 * This authentication module is based on the shibboleth authentication module, with changes
 * to adopt to use simpleSAMLphp.
 *
 * Homepage of this project: http://code.google.com/p/drupalsimplesaml/
 *
 */


/**
 * Implementation of hook_menu().
 */
function simplesamlphp_auth_menu() {
  $items = array();
  
  $items['admin/user/simplesamlphp_auth'] = array(
    'title'              => t('simpleSAMLphp authentication module settings'),
    'description'        => t('Control the various settings of the simpleSAMLphp authentication module'),
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('simplesamlphp_auth_settings_form'),
    'access arguments'   => array('administer simpleSAMLphp authentication'),
    'type'               => MENU_NORMAL_ITEM,
    'file'							 => 'includes/simplesamlphp_auth.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function simplesamlphp_auth_init() {
  global $user;
  global $saml_session;
  global $saml_config;

  //get the simplesamlphp session
  $basedir = variable_get('simplesamlphp_auth_installdir', '/var/www/php/ssoLibs/simplesamlphp_1_4');
  require_once($basedir . '/www/_include.php');
  /* Load simpleSAMLphp, configuration and metadata */
  $saml_config = SimpleSAML_Configuration::getInstance();
  $saml_session = SimpleSAML_Session::getInstance();

  if ($user->uid) {
    //user is logged in - Drupal
    // Do nothing if user is admin (1) OR no bypass configured for this role
    //_simplesaml_auth_debug('User is already logged in [' . $user->uid . ']');
    $no_bypass = TRUE;
    foreach ($user->roles as $role) {
      if (variable_get('simplesamlphp_auth_bypass_role_'.str_replace(' ', '_', $role), 0) === 1) {
        $no_bypass = FALSE;
        break;
      }
    }
    if ( $user->uid != 1 && $no_bypass  && ! (isset($saml_session) && $saml_session->isValid())) {
      // User is logged but the SAML session is not valid anymore
      // Force user deconnection
      require_once drupal_get_path('module', 'user') .'/user.pages.inc';
      user_logout();
    }
  } else {
    // user is not logged in - Drupal

    if (isset($saml_session) && $saml_session->isValid() ) {

      //user is logged in - SimpleSAMLphp, user is not logged in - Drupal

      //get unique identifier from saml attributes
      $authname = _simplesamlphp_auth_get_authname();
      _simplesaml_auth_debug('Authname is [' .$authname . '] userid is [' . $user->uid . ']');

      // Retrieve user mapping. Get drupal uid by looking up identifier in authmap
      //$result = db_query("SELECT uid FROM {authmap} WHERE authname = '%s' AND module = 'simplesamlphp_auth'", $authname)
      //$expected = db_fetch_array($result);

      if (!empty($authname)) {
        // User is logged in with SAML authentication and we got the unique identifier.
        // Try to log into Drupal.
        _simplesaml_auth_debug('Load user [' .$authname . ']');
        $user = user_external_load($authname);

        if (!$user) {
          // If unsuccessful, register the user. This will trigger
          // simplesamlphp_auth_user() and any other _user() hooks.
          _simplesaml_auth_debug('Register user [' . $authname . ']');
          user_external_login_register($authname, 'simplesamlphp_auth');
          if ($user) {
            //populate roles based on configuration setting
            _simplesaml_auth_debug('setting roles' );
            $roles = _simplesamlphp_auth_rolepopulation(variable_get('simplesamlphp_auth_rolepopulation', ''));
            _simplesaml_auth_debug('get mail' );
            $mail_address = _simplesamlphp_auth_get_mail();
            _simplesaml_auth_debug('get name' );
            $name = _simplesamlphp_auth_get_name();
            _simplesaml_auth_debug('setting mail to [' . $mail_address . ']');
            _simplesaml_auth_debug('setting name to [' .$name[0] . ' - ' . $name[1] . ']');
            /*if($user->name =="webmaster"){
             $roles = array_push($roles, 3);
             }
             */
            $userinfo = array('roles' => $roles, 'mail' => $mail_address, 'profile_name' => $name[0], 'profile_surname' => $name[1]);
            //var_dump($roles);
            //exit;
            $user = user_save($user, $userinfo);
          }
        }
        //finalizing the login, calls hook_user op login
        $edit = array();
        user_authenticate_finalize(&$edit);
      } //if !empty authname

    } else {
      _simplesaml_auth_debug('User not logged');
      //user is not logged in - SimpleSAMLphp, user is not logged in - Drupal
      //anonymous user
      //_simplesaml_auth_debug('No valid session [' .$user->uid. ']');
    } //if isset saml_session
  } //if user->uid
  /*}
  else{
    drupal_set_message("You need to configure the simpleSAML auth module");
  }*/
}

/**
 * Implementation of hook_user().
 */
function simplesamlphp_auth_user($op, &$edit, &$account, $category = NULL) {
  global $saml_session;
  if ($op == 'insert' && $category = 'account') {
    //if user registration has a valid session
    if (isset($saml_session) && $saml_session->isValid() ) {
      //Get name from default attributes
      _simplesaml_auth_debug('Registering user [' . $account->name . ']');
      $account->name = _simplesamlphp_auth_get_default_name($account->uid);
      db_query("UPDATE {users} SET name = '%s' WHERE uid = %d", $account->name, $account->uid);
      _simplesaml_auth_debug('Updating username [' . $account->name . ']');

      //Get mail from default attribute
      $mail_address = _simplesamlphp_auth_get_mail();
      db_query("UPDATE {users} SET mail = '%s' WHERE uid = %d", $mail_address, $account->uid);
      _simplesaml_auth_debug('Updating mail [' . $mail_address . ']');
    }
  }
  elseif ($op == 'logout') {
    global $saml_session;
    global $saml_config;
    $initSLOurl = '/';
  
    /* Check if valid local session exists.. */
    if (isset($saml_session) && $saml_session->isValid() ) {
      $logout_url = _simplesamlphp_auth_get_logouturl();
      _simplesaml_auth_debug('Logging out username [' . $account->name . ']');
      drupal_goto($logout_url);
    }
  } elseif ($op == 'login') {
    global $saml_session;
    
    _simplesaml_auth_debug('Logging in username [' . $account->name . ']');
    //populate roles based on configuration setting
    $no_bypass = TRUE;
    foreach ($account->roles as $role) {
      if (variable_get('simplesamlphp_auth_bypass_role_'.str_replace(' ', '_', $role), 0) === 1) {
        $no_bypass = FALSE;
        break;
      }
    }
    if($no_bypass){
      $roles = _simplesamlphp_auth_rolepopulation(variable_get('simplesamlphp_auth_rolepopulation', ''));
      $mail_address = _simplesamlphp_auth_get_mail();
      $name = _simplesamlphp_auth_get_name();
      _simplesaml_auth_debug('setting mail login to  [' . $mail_address . ']');
      _simplesaml_auth_debug('setting name login to [' .$name[0] . ' - ' . $name[1] . ']');
      $userinfo = array('roles' => $roles, 'mail' => $mail_address, 'profile_name' => $name[0], 'profile_surname' => $name[1]);
      $user = user_save($account, $userinfo);
      drupal_set_message(t('You are now logged in as '.$account->name));
    }
  }
}

/*function simplesamlphp_auth_form_user_login_alter(&$form, &$form_state) {
  $form['simplesaml_login_link'] = array(
    '#value' => _simplesamlphp_auth_generate_login_text(FALSE),
  );
}*/

/**
 * Implementation of hook_block()
 */
function simplesamlphp_auth_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks = array();
    
    $blocks['simplesamlphp_auth_link_block'] = array(
			'info' => t('simpleSAMLphp authentication'), 
			'weight' => 0,
			'status' => 1,
			'region' => 'left',
			'cache'   => BLOCK_NO_CACHE,
    );
    
    $blocks['simplesamlphp_auth_login'] = array(
      'info' => t('OpenSSO login'),
      'cache' => BLOCK_CACHE_PER_PAGE,
    );
    
    return $blocks;
  } else if ($op == 'view') {
    switch($delta) {
      case 'simplesamlphp_auth_link_block':
        $block = array(
        	'subject' => t('simpleSAMLphp login'),
					'content' => _simplesamlphp_auth_generate_block_text(),
        );
        break;
      case 'simplesamlphp_auth_login':
        $block = array(
          'subject' => t('OpenSSO login'), 
          'content' => drupal_get_form('simplesamlphp_auth_form_login_block_form'),
        );
        break;
    }
    return $block;
  }
}

/**
 * Return form of the OpenSSO login block.
 */
function simplesamlphp_auth_form_login_block_form() {
  global $user;
  $form = array();

  // If we are already logged on, go to the user page instead.
  if (!$user->uid) {
    //drupal_goto('user/'. $user->uid);

    // Display login form:
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#size' => 60,
      '#maxlength' => USERNAME_MAX_LENGTH,
      '#required' => TRUE,
      '#weight' => 0,
      '#description' => t('Enter your @s username.', array('@s' => variable_get('site_name', 'Pressflow'))),
    );
  
    $form['pass'] = array(
    	'#type' => 'password',
      '#title' => t('Password'),
      '#description' => t('Enter the password that accompanies your username.'),
    	'#weight' => 1,
      '#required' => TRUE,
    );
    
    $form['submit'] = array(
    	'#type' => 'submit',
    	'#value' => t('Log in'),
    	'#weight' => 2,
    );
    
    $sso_validators = array('simplesaml_auth_form_login_block_sso_validator');
    $user_validators = user_login_default_validators();
    $form['#validate'] = array_unique(array_merge($sso_validators, $user_validators));
    
    drupal_add_js(_simplesamlphp_auth_sso_login_js(), 'inline');
  }
  
  return $form;
}

/**
 * SSO validator for the login form.
 */
function simplesaml_auth_form_login_block_sso_validator(&$form, &$form_state) {
  if ($form_state['values']['name'] != 'admin') {
    $sso_verif_auth = drupal_http_request (
      variable_get('simplesamlphp_auth_login_post_url', 'http://sso1.rossel.be:8080/opensso').'/identity/authenticate',
      array('Content-Type' => 'application/x-www-form-urlencoded'),
      'POST',
      'username='.$form_state['values']['name'].'&password='.$form_state['values']['pass']
    );
    
    if ($sso_verif_auth->code == '200') {
      global $saml_config;
      require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Utilities.php');
      require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Session.php');
      require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/XHTML/Template.php');
      $local_simplesaml = SimpleSAML_Utilities::selfURLhost() . '/' . $saml_config->getValue('baseurlpath');
      $return_url = variable_get('simplesamlphp_auth_login_return_url', 'home');
      $goto = $local_simplesaml . 'sso_SAMLRedirect.php?sp='.urlencode($local_simplesaml) . '&url=' . urlencode($return_url) . '&dummy=' . time();
      $goto = '';
      $params = array(
        'IDToken0=',
        'IDToken1='.$form_state['values']['name'],
        'IDToken2='.$form_state['values']['pass'],
        'IDButton=Connexion',
        'goto='.urlencode($goto),
        'SunQueryParamsString=',
        'encoded=false',
        'gx_charset=UTF-8',
        'submitButton=login',
      );
      
      $sso_auth = drupal_http_request (
        variable_get('simplesamlphp_auth_login_post_url', 'http://sso1.rossel.be:8080/opensso').'/UI/login',
        array('Content-Type' => 'application/x-www-form-urlencoded'),
        'POST',
        implode('&', $params)
      );
      
      watchdog('VALIDATE', print_r($sso_auth, TRUE), null, WATCHDOG_INFO);
      drupal_goto();
    } else {
      drupal_set_message(t('SSO authentification failed.'), 'error');
      drupal_goto();
    }
  }
}

/*
 --------------------------------------------------------------------------------------------------
 */
function _simplesamlphp_auth_get_authname() {
  global $saml_session;

  $authname = '';

  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    _simplesaml_auth_debug('_simplesamlphp_auth_get_authname: Valid local session exist');
    $attributes = $saml_session->getAttributes();

    if (isset($attributes[variable_get('simplesamlphp_auth_unique_id', 'eduPersonPrincipalName')])) {
      $authname = $attributes[variable_get('simplesamlphp_auth_unique_id', 'eduPersonPrincipalName')][0];
    } else {
      throw new Exception(t('error in simplesamlphp_auth.module: no valid unique id attribute set'));
    }
  }
  return $authname;
}

function _simplesamlphp_auth_get_default_name($account) {
  global $saml_session;
  $default_name = '';

  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $attributes = $saml_session->getAttributes();
    switch (variable_get('simplesamlphp_auth_user_name', 'eduPersonPrincipalName')) {
      case "eduPersonPrincipalName":
        if (!isset($attributes['eduPersonPrincipalName'])) {
          throw new Exception(t('eduPersonPrincipalName was not set for your user.'));
        }
        $default_name = $attributes['eduPersonPrincipalName'][0];
        break;
      case "smartname-fullname-eduPersonPrincipalName":
        if (!isset($attributes['smartname-fullname'])) {
          throw new Exception(t('smartname-fullname was not set for your user.'));
        }
        if (!isset($attributes['eduPersonPrincipalName'])) {
          throw new Exception(t('eduPersonPrincipalName was not set for your user.'));
        }
        $default_name = $attributes['smartname-fullname'][0] . " [" . $attributes['eduPersonPrincipalName'][0]. "]";
        break;
      case "smartname-fullname-drupaluid":
        if (!isset($attributes['smartname-fullname'])) {
          throw new Exception(t('smartname-fullname was not set for your user.'));
        }
        $default_name = $attributes['smartname-fullname'][0]. " [" . $account->uid . "]";
        break;
      case "smartname-fullname":
        if (!isset($attributes['smartname-fullname'])) {
          throw new Exception(t('smartname-fullname was not set for your user.'));
        }
        $default_name = $attributes['smartname-fullname'][0];
        break;
      default:
        throw new Exception(t('error in simplesamlphp_auth.module: no valid name attribute set'));
    }

  }
  return $default_name;
}

function _simplesamlphp_auth_get_mail() {
  global $saml_session;
  $mail_address = '';
  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $attributes = $saml_session->getAttributes();
    if (isset($attributes[variable_get('simplesamlphp_auth_mailattr', 'mail')])) {
      $mail_address = $attributes[variable_get('simplesamlphp_auth_mailattr', 'mail')][0];
    } else {
      throw new Exception(t('error in simplesamlphp_auth.module: no valid mail attribute set'));
    }
  }

  return $mail_address;
}

function _simplesamlphp_auth_get_name() {
  global $saml_session;
  $name = array();
  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $attributes = $saml_session->getAttributes();
    if (isset($attributes[variable_get('simplesamlphp_auth_nameattr', 'sn')])) {
      $name[0] = $attributes[variable_get('simplesamlphp_auth_nameattr', 'sn')][0];
    } else {
      $name[0] = '';
    }
    if (isset($attributes[variable_get('simplesamlphp_auth_nameattr', 'givenName')])) {
      $name[1] = $attributes[variable_get('simplesamlphp_auth_nameattr', 'givenName')][0];
    } else {
      $name[1] = '';
    }
  }

  return $name;
}

function _simplesamlphp_auth_get_ssoID() {
  global $saml_session;
  $ssoID = '';
  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $attributes = $saml_session->getAttributes();
    if (isset($attributes[variable_get('simplesamlphp_auth_ssoID', 'uid')])) {
      $ssoID = $attributes[variable_get('simplesamlphp_auth_ssoID', 'uid')][0];
    } else {
      throw new Exception(t('error in simplesamlphp_auth.module: no valid SSO ID attribute set'));
    }
  }

  return $ssoID;
}

function _simplesamlphp_auth_get_logouturl() {
  global $saml_session;
  global $saml_config;
  $initSLOurl = '/';

  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $initSLOurl = str_replace('http://', 'http://', SimpleSAML_Utilities::selfURLhost()) .
		    '/' . $saml_config->getValue('baseurlpath') . 'saml2/sp/initSLO.php?RelayState=' . 
    urlencode(variable_get('simplesamlphp_auth_logout_page','/'));
  }

  return $initSLOurl;
}

function _simplesamlphp_auth_generate_login_text($url = FALSE) {
  global $saml_session;
  global $saml_config;
  $block_content = '';
  global $base_url;

  /**
   * We need to load a few classes from simpleSAMLphp. These are available because
   * the _include script above did set the PHP class PATH properly.
   */
  require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Utilities.php');
  require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Session.php');
  require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/XHTML/Template.php');

  $initSSOurl = str_replace('http://', 'http://', SimpleSAML_Utilities::selfURLhost()) .
		'/' . $saml_config->getValue('baseurlpath') . 'saml2/sp/initSSO.php?RelayState=' . 
  urlencode(str_replace('http://', 'http://', SimpleSAML_Utilities::selfURL()));


  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $block_content .= '<p><a href="/logout">' . t('Click here to logout via simpleSAMLphp') . '</a></p>';
    if ($url)
      return "/logout";
  } else {
    $block_content .= '<p><a href="' . $initSSOurl . '">' . t('Click here to login via simpleSAMLphp') . '</a></p>';
    if ($url)
      return $initSSOurl;
  }

  return $block_content;
}

function _simplesamlphp_auth_generate_block_text() {
  global $saml_session;
  global $saml_config;
  $block_content = '';
  global $base_url;
  global $user;

  require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Utilities.php');
  require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Session.php');
  require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/XHTML/Template.php');

  $initSSOurl = str_replace('http://', 'http://', SimpleSAML_Utilities::selfURLhost()) .
		'/' . $saml_config->getValue('baseurlpath') . 'saml2/sp/initSSO.php?RelayState=' . 
  urlencode(str_replace('http://', 'http://', SimpleSAML_Utilities::selfURL()));
   
  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $block_content .= '<p>Logged in as: '. $user->name . '<br /><a href="/logout">' . t('Federated logout') . '</a></p>';
  } else {
    $block_content .= '<p><a href="' . $initSSOurl . '">' . t('Federated login') . '</a></p>';
  }

  return $block_content;
}

function _simplesamlphp_auth_evaulaterolerule($roleruleevaluation, $attributes) {

 	_simplesaml_auth_debug('Evaluate rule (key=' . $roleruleevaluation[0]  . ',operator=' . $roleruleevaluation[1] . ',value=' . $roleruleevaluation[2] . ')');

 	if (!array_key_exists($roleruleevaluation[0], $attributes)) return false;
 	$attribute = $attributes[$roleruleevaluation[0]];

 	switch($roleruleevaluation[1]) {
 	  case '=' :
 	    return in_array($roleruleevaluation[2], $attribute);
 	     
 	  case '@=' :
 	    $dc = explode('@', $attribute[0]);
 	    if (count($dc) != 2) return false;
 	    return ($dc[1] == $roleruleevaluation[2]);
 	  case '!=' :
 	    $dc = explode(';', $attribute[0]);
 	    return in_array($roleruleevaluation[2],$dc);
 	}

 	return false;
}

function _simplesamlphp_auth_rolepopulation($rolemap) {
  global $saml_session;
  $roles = array();

  _simplesaml_auth_debug('Rolemap: ' . $rolemap);

  /* Check if valid local session exists.. */
  if (isset($saml_session) && $saml_session->isValid() ) {
    $attributes = $saml_session->getAttributes();
    	
    if (empty($rolemap)) return $roles;
     
    _simplesaml_auth_debug('Evaluate rolemap: ' . $rolemap);
     
    $rolerules = explode('|', $rolemap);
     
    foreach($rolerules AS $rolerule) {
       
      _simplesaml_auth_debug('Evaluate role rule: ' . $rolerule);
       
      $roleruledecompose = explode(':', $rolerule);
       
      $roleid = $roleruledecompose[0];
      $roleruleevaluations = explode(';', $roleruledecompose[1]);
       
       
      $addnew = true;
      foreach ($roleruleevaluations AS $roleruleevaluation) {
         
        _simplesaml_auth_debug('Evaluate rule evaulation: ' . $roleruleevaluation);
         
        $roleruleevaluationdc = explode(',', $roleruleevaluation);
        if (!_simplesamlphp_auth_evaulaterolerule($roleruleevaluationdc, $attributes)) $addnew = false;
      }
      if ($addnew) {
        $roles[$roleid] = $roleid;
        _simplesaml_auth_debug('Add new role: ' . $roleid);
      }
       
    }
 	}
 	return $roles;
}

function _simplesamlphp_auth_sso_login_js() {
  $js = '';
  
  $js.= '$(document).ready( function() {
  	$("form#simplesamlphp-auth-form-login-block-form input#edit-submit").click( function () {
  		var name = $("form#simplesamlphp-auth-form-login-block-form input#edit-name").val();
  		var pass = $("form#simplesamlphp-auth-form-login-block-form input#edit-pass").val();
  		$.post(
  			"'.variable_get('simplesamlphp_auth_login_post_url', 'http://sso1.rossel.be:8080/opensso').'/identity/authenticate",
  			{ username: name, password: pass },
      	function(data) {
        	alert(data);
       	},
      );
  	});
  });';
    
    /*if ($sso_verif_auth->code == '200') {
      global $saml_config;
      require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Utilities.php');
      require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/Session.php');
      require_once((isset($SIMPLESAML_INCPREFIX)?$SIMPLESAML_INCPREFIX:'') . 'SimpleSAML/XHTML/Template.php');
      $local_simplesaml = SimpleSAML_Utilities::selfURLhost() . '/' . $saml_config->getValue('baseurlpath');
      $return_url = variable_get('simplesamlphp_auth_login_return_url', 'home');
      $goto = $local_simplesaml . 'sso_SAMLRedirect.php?sp='.urlencode($local_simplesaml) . '&url=' . urlencode($return_url) . '&dummy=' . time();
      $goto = '';
      $params = array(
        'IDToken0=',
        'IDToken1='.$form_state['values']['name'],
        'IDToken2='.$form_state['values']['pass'],
        'IDButton=Connexion',
        'goto='.urlencode($goto),
        'SunQueryParamsString=',
        'encoded=false',
        'gx_charset=UTF-8',
        'submitButton=login',
      );
      
      $sso_auth = drupal_http_request (
        variable_get('simplesamlphp_auth_login_post_url', 'http://sso1.rossel.be:8080/opensso').'/UI/login',
        array('Content-Type' => 'application/x-www-form-urlencoded'),
        'POST',
        implode('&', $params)
      );
      
      watchdog('VALIDATE', print_r($sso_auth, TRUE), null, WATCHDOG_INFO);
      drupal_goto();
    } else {
      drupal_set_message(t('SSO authentification failed.'), 'error');
      drupal_goto();
    }*/
  
  return $js;
}

/**
 * This helper function is used by developers to debug the form API workflow in this module.
 * Uncomment the function body to activate.
 */
function _simplesaml_auth_debug($message) {
  watchdog('simplesamlphp_auth', $message, NULL, WATCHDOG_DEBUG);
}
