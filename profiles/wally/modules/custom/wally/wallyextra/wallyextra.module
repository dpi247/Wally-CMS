<?php 

include_once('wallyextra.features.inc');

/**
 * Implementation of hook_menu().
 */
function wallyextra_menu() {
  $items = array();
  
  $items['admin/wally/wallyextra/supercron'] = array(
    'title'             => 'Wally Extra "Supercon" Settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'		=> array('wallyextra_supercron_settings'),
    'access arguments'  => array('access administration pages'),
    'description'       => 'Allows administrators to set paramaters for this module to function properly.',
    'file'              => 'includes/wallyextra.admin.inc',
  );
  
  $items['admin/wally/wallyextra/supercron/output/%'] = array(
    'page callback'    => 'wallyextra_supercron_output',
    'page arguments'   => array(5),
    'access arguments' => array('access administration pages'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/wallyextra.admin.inc',
  );
  
  $items['admin/wally/wallyextra/supercron/call/%'] = array(
    'page callback'    => 'wallyextra_supercron_call',
    'page arguments'   => array(5),
    'access arguments' => array('access administration pages'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/wallyextra.admin.inc',
  );
  
  return $items;
}

/**
 *  ImplÃ©mentation du hook_theme(); 
 */
function wallyextra_theme(&$var) {

  $path = drupal_get_path('module', 'wallyextra');
  $base = array(
    'file' => 'theme.inc',
    'path' => "$path/theme",
  );
  
 return array(
 
		'wallyct_mainmenu' => $base + array(
    'arguments' => array("menu" => 'primary-links', "menuid" =>'menu-primary-links' ),
    'template' => 'wallyct_mainmenu',
    'preprocess functions' => array('wally_get_tpl_suggestions_from_plugins'),
    ),
    
    'wallyct_rss' => $base + array(
    'arguments' => array("subtype" => NULL, "context" => NULL, "feed" => NULL, "options" => NULL),
    'template' => 'wallyct_rss',
    'preprocess functions' => array('wally_get_tpl_suggestions_from_plugins'),
    ),
    
    'wallyct_remotehtml' => $base + array(
    'arguments' => array("subtype" => NULL, "context" => NULL, "htmlblock" => NULL, "settings" => NULL),
    'template' => 'wallyct_remotehtml',
    'preprocess functions' => array('wally_get_tpl_suggestions_from_plugins'),
    ),
    
    'wallyct_twit' => $base + array(
    'arguments' => array("feed" => NULL, "options" => NULL),
    'template' => 'wallyct_twit',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_tofacebook' => $base + array(
    'arguments' => array("node" => NULL, "options" => NULL),
    'template' => 'wallyct_tofacebook',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_taxotermlist' => $base + array(
    'arguments' => array("tids" => NULL, "node" => NULL, "options" => NULL),
    'template' => 'wallyct_taxotermlist',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),

    'wallyct_taxotermlist_tree' => $base + array(
    'arguments' => array("tids" => NULL, "node" => NULL, "options" => NULL),
    'template' => 'wallyct_taxotermlist_tree',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),
    
    'wallyct_personslist_detail' => $base + array(
    'arguments' => array("persons" => NULL, "node" => NULL),
    'template' => 'wallyct_personslist_detail',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),
    
     'wallyct_entitylist_detail' => $base + array(
    'arguments' => array("entities" => NULL, "node" => NULL),
    'template' => 'wallyct_entitylist_detail',
    'preprocess functions' => array('wally_get_tpl_suggestions'),
    ),
    
    'wallyextra_template_points_up_down' => $base + array(
      'arguments' => array('links' => NULL, 'results' => NULL, 'mode' => NULL),
      'template' => 'wallyextra_points-up-down',
    ),
    
    'wallyextra_supercron_settings' => array(
      'arguments' => array('form' => NULL),
    ),

  );
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 * 
 * Add submit callback to refresh the wallyextra_cache_torefresh table after saving a page contents.
 */
function wallyextra_form_panels_panel_context_edit_content_alter(&$form, $form_state) {
  $form['#submit'][] = 'wallyextra_refresh_cache_list';
}

/**
 * Implementation of hook_form_alter()
 */
function wallyextra_form_alter(&$form, $form_state, $form_id) {
  if (strstr($form_id, '_content_type_edit_form')) {
    // We add a rule field to every CTools content type configuration form.
    $form['wally_rule'] = array (
      '#type'             => 'textfield',
      '#title'            => t('Refresh time (minutes)'),
      '#description'			=> t('This is the frequency with which the hook_wallyextra_refresh_block will be called for this content.'),
      '#default_value'		=> isset($form_state['conf']['wally_rule']) ? $form_state['conf']['wally_rule'] : 15,
    );
    
    $form['#validate'][] = 'wallyextra_content_type_form_validate';
    $form['#submit'][] = 'wallyextra_content_type_form_submit';
  }
}

/**
 * Validation for the refresh rule added to CTools content types.
 */
function wallyextra_content_type_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];
  
  if (isset($values['wally_rule']) && !is_numeric($values['wally_rule'])) {
    form_set_error('wally_rule', t('The refresh time isn\'t a numeric value'));
  } elseif (isset($values['wally_rule']) && ($values['wally_rule'] < 0 || $values['wally_rule'] >= 60)) {
    form_set_error('wally_rule', t('The refresh time must be greater or equal to 0 and smaller than 60 minutes'));
  }
}

/**
 * Submit for the refresh rule added to CTools content types.
 */
function wallyextra_content_type_form_submit(&$form, &$form_state) {
  $form_state['conf']['wally_rule'] = $form_state['values']['wally_rule'];
}

/**
 * Implementation of hook_perm()
 */
function wallyextra_rssmixread_content_perm() {
  return array(
    'administer rssmixread content',
  );
}

/**
 * Implementation of hook_perm()
 */
function wallyextra_rssread_content_perm() {
  return array(
    'administer rssread content',
  );
}

/**
 * Implementation of hook_perm()
 */
function wallyextra_taxonomylist_content_perm() {
  return array(
    'administer taxonomylist content',
  );
}

/**
 * Implementation of hook_perm()
 */
function wallyextra_twitread_content_perm() {
  return array(
    'administer twitread content',
  );
}

/*
 * Implementation of hook_ctools_plugin_directory().
 * 
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function wallyextra_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/*
 * Implement hook_ctools_plugin_api().
 * 
 * If you do this, CTools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function wallyextra_ctools_plugin_api($module, $api) {
  // @todo this example should explain how to put it in a different file.
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Insert additional template suggestions to wally specific theme functions.
 * This preprocess function could be set by any hook_theme but for content type CTolls only.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered.
 */
function wally_get_tpl_suggestions_from_plugins(&$variables) {
  $suggestion = wallyextra_getsuggestions_from_plugins($variables); 
  if(count($suggestion)) $variables['template_files'] = array_merge($suggestion, $variables['template_files']);
}

/**
 * Build all the suggestions template for a content type CTools
 * of any content type with Destinations information.   
 *
 *  Wally specific suggestions are:  
 * 
 *  - {plugin_type}_{destinations_terms_underscore_separated}.tpl.php
 *  - {plugin_type}.tpl.php
 * 
 * @param $variables
 *   Templating variables
 * @param $type
 *   Prefix added to suggestions (default = page). Could be "page" or "node".
 * 
 * @return 
 *   Array of suggestion pages templates.
 */
function wallyextra_getsuggestions_from_plugins(&$variables) {
  $context = isset($variables['context']) ? $variables['context'] : array();
  $context_keys = array_keys($context);
  $context = isset($context_keys[0]) ? $context[$context_keys[0]] : array();
  $subtype = isset($variables['subtype']) ? $variables['subtype'] : '';
  $destinations = array();
  $suggestion = array();
  $tax_children = array();
  $vid=variable_get('wallymport_destinationpath',null);
  $path = "";
  $package_layout = (isset($variables['node'])) ? wallyextra_getpackagelayout($variables['node']) : NULL ; 

  if(isset($context->tids)){
	  foreach ($context->tids as $tid) {
	    $destinations[] = taxonomy_get_term($tid);
	  }
  }
  $suggestion[] = 'plugins';
  $suggestion[] = 'plugins_'.$subtype;

  if (count($destinations)) {
    foreach ($destinations as $destination) {
      $tax_children = taxonomy_get_parents_all($destination->tid, $vid);
      $count = count($tax_children);
      for ($i = $count-1; $i >= 0; $i--) {
        ($i == $count-1) ? $path .= strtolower($tax_children[$i]->name) : $path .= "_".strtolower($tax_children[$i]->name);
        if ($subtype) $suggestion[] = 'plugins_'.$subtype . '_' . $path;
      }
    }
  }

  return $suggestion;  
}

/**
 * Extract page layout information from the node. 
 *
 * @param $node
 *   The node currently processed
 *
 * @return 
 *   The Package layout as a string or NULL.
 */
function wallyextra_getpackagelayout($node) {
  if (isset($node->field_packagelayout)) {
    $package_layout = taxonomy_get_term($node->field_packagelayout[0]["value"]);
    $package_layout = strtolower(trim($package_layout->name));
  } else {
    $package_layout = NULL;
  }
  return $package_layout; 
}

/**
 * Create a new object for the given $table.
 *
 * @param $table
 *   The name of the table to use to retrieve $schema values. This table
 *   must have an 'export' section containing data or this function
 *   will fail.
 * @param $plugin_name
 *   The name of the concerned plugin.
 * @param $set_defaults
 *   If TRUE, which is the default, then default values will be retrieved
 *   from schema fields and set on the object.
 *
 * @return
 *   The loaded object.
 */
function wallyextra_newctoolsexport($table, $plugin_name, $set_defaults = TRUE) {
  $schema = ctools_export_get_schema($table);
  $export = $schema['export'];

  if (!empty($export['create callback']) && function_exists($export['create callback'])) {
    return $export['create callback']($plugin_name, $set_defaults);
  }
  else {
    return ctools_export_new_object($table, $set_defaults);
  }
}

/**
 * Create callback for creating a new Wallyextra content type.
 *
 * This ensures we get proper defaults from the plugin for its settings.
 * 
 * @param $plugin_name
 *   The name of the concerned plugin.
 * @param $set_defaults
 *   If TRUE, which is the default, then default values will be retrieved
 *   from schema fields and set on the object.
 * 
 * @return
 *   The default values for this plugin.
 */
function wallyextra_content_type_new($plugin_name, $set_defaults) {
  $item = ctools_export_new_object('wallyextra_'.$plugin_name.'_content', $set_defaults);
  ctools_include('content');
  ctools_include('context');
  ctools_include('plugins');
  $plugin = ctools_get_plugins('wallyextra', 'content_types', $plugin_name);
  $item->settings = ctools_content_get_defaults($plugin, array());
  return $item;
}

/*
 * Implementation of hook_rate_templates().
 */ 
function wallyextra_rate_templates() {
 $templates = array();
  $templates['points_up_down'] = new stdClass();
  $templates['points_up_down']->value_type = 'points';
  $templates['points_up_down']->options = array(
    array(1, 'up'),
    array(-1, 'down'),
  );
  $templates['points_up_down']->theme = 'wallyextra_template_points_up_down';
  $templates['points_up_down']->css = drupal_get_path('module', 'wallyextra') . '/theme/wallyextra_points-up-down.css';
  $templates['points_up_down']->customizable = FALSE;
  $templates['points_up_down']->translate = TRUE;
  $templates['points_up_down']->template_title = t('Points up / down');
    return $templates;
  }

/*
 * Implementation of hook_cron().
 */ 
function wallyextra_cron(){
  $return = '<b>Run '.date('Y-m-d H:i:s').' :</b></br>';
  
  $blocks_list = db_query('SELECT * FROM {wallyextra_cache_torefresh} WHERE enabled = 1 AND last_run < %d - rule ORDER BY weight ASC, cid ASC', time());
  while ($block = db_fetch_array($blocks_list)) {
    while (is_string($block['settings']))
      $block['settings'] = unserialize($block['settings']);
    $output = module_invoke_all('wallyextra_refresh_block', $block['cid'], $block['settings']);
    $block['output'] .= serialize($output);
    $block['last_run'] = time();
    drupal_write_record('wallyextra_cache_torefresh', $block, 'cid');
    $return .= $block['cid'].'</br>';
  }
  
  print $return;
}

/**
 * Get all blocks and put them in the wallyextra_cache_torefresh table.
 */
function wallyextra_refresh_cache_list($form = null, $form_state = null) {
  // Get a list of all blocks set in all pages
  $pages = page_manager_get_tasks_by_type('page');
  $handlers = array();
  foreach ($pages as $page_name => $page) {
    $cached_page = page_manager_get_page_cache($page_name);
    $handlers[$page_name] = isset($cached_page->handlers->conf['display']) ? $cached_page->handlers->conf['display'] : array();
    foreach ($cached_page->handlers as $handler) {
      $cached_panels = panels_edit_cache_get('panel_context:' . $page_name . ':' . $handler->name);
      foreach ($cached_panels->display->content as $display_content)
        $handlers[$page_name][] = $display_content;
    }
  }
  
  // Get previous settings from DB to save the cron config
  $blocks_list_db = db_query('SELECT * FROM {wallyextra_cache_torefresh}');
  $blocks_list = array();
  while ($temp_block = db_fetch_array($blocks_list_db))
    $blocks_list[$temp_block['cid']] = $temp_block;
  
  // Restart from an empty table
  db_query('TRUNCATE TABLE wallyextra_cache_torefresh');
  
  // Transform the list to get the same structure as the table and add an entry to the table
  foreach ($handlers as $page_name => $page_handlers) {
    if (is_array($page_handlers) && !empty($page_handlers)) {
      foreach ($page_handlers as $handler) {
        $block = array();
        $config = $handler->configuration;
        $block['cid'] = isset($config['caid']) ? $config['caid'] : $page_name.':'.$handler->type.':'.$handler->subtype.':'.$handler->panel.':'.$handler->pid;
        
        if (isset($blocks_list[$block['cid']])) {
          $block['output'] = $blocks_list[$block['cid']]['output'];
          $block['last_run'] = $blocks_list[$block['cid']]['last_run'];
          $block['enabled'] = $blocks_list[$block['cid']]['enabled'];
          $block['weight'] = $blocks_list[$block['cid']]['weight'];
          $block['rule'] = $blocks_list[$block['cid']]['rule'];
        } else {
          $block['rule'] = isset($config['wally_rule']) ? 60*$config['wally_rule'] : 0;
        }
        
        $config['wally_rule'] = 0; // Just to be sure the rule parameter si setted before unset it
        unset($config['wally_rule']);
        $block['settings'] = $config;
        
        drupal_write_record('wallyextra_cache_torefresh', $block);
      }
    }
  }
}

/**
 * Implementation of hook_wallyextra_refresh_block()
 */
function wallyextra_wallyextra_refresh_block($cid, $settings) {
  $return = array();
  if (strstr($cid, 'rssmix_')) {
    module_load_include('inc', 'wallyextra', 'plugins/content_types/rssmixread');
    $old_feed = cache_get($cid);
    $return[] = 'Cache updated for : '.$cid.' on '.date('Y-m-d H:i:s', time());
    if (is_object($old_feed) && isset($old_feed) && !empty($old_feed)) {
      _wallyextra_rssmix_setcache($settings, $old_feed->data);
    } else {
      _wallyextra_rssmix_setcache($settings);
    }
  }
  return $return;
}

/**
 * @} End of "defgroup wallyextra".
 */
