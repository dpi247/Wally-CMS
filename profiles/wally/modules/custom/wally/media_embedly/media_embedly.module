<?php
// $Id: media_embedly.module,v 1.0 2011/01/07 ODM $

/**
 *  @file
 *  Embedded Video Field provider file for Kewego.com.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

// A registry of variable_get defaults.
include_once('includes/media_embedly.variables.inc');

/**
 * Implementation of hook_menu().
 */
function media_embedly_menu() {
  return array(
    'admin/settings/media_embedly' => array(
      'title' => 'Media: Embedly',
      'description' => 'Administer the Media: Embedly module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_embedly_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/media_embedly.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function media_embedly_theme($existing, $type, $theme, $path) {
  return array(
    'media_embedly_default' => array(
      'arguments' => array('variables' => array()),
      'path' => $path.'/themes',
      'template' => 'media-embedly-default',
    ),
  );
}

/**
 * Implementation of hook_flush_caches().
 */
/*function media_embedly_flush_caches() {
  return array('');
}*/

/**
 * Implementation of hook_emfield_status().
 */
function media_embedly_emfield_status($item, $field = NULL, $module = 'emvideo') {
  // Return the availability of the video.
  $status = media_embedly_check_status($item['value']);
  return $status;
}

/**
 * Implementation of hook_emfield_providers().
 */
function media_embedly_emfield_providers($module, $provider = NULL) {
	// This will return a listing of all provider files supported by the module.
  return drupal_system_listing("$provider\.inc$", drupal_get_path('module', 'media_embedly') ."/providers/$module", 'name', 0);
}


/**
 * Check the availability of a video.
 */
function media_embedly_check_status($video_id, $reset = FALSE) {
  $status[$video_id] = EMFIELD_STATUS_AVAILABLE;  
  return $status[$video_id];
}


/**
 *  Make the GET request to the embed.ly API, get back the xml result and parse it
 *  
 *  @param $src_url
 *    the url from the user's input
 *  
 *  @param $return
 *    array with the casted as string simplexml objects
 *  
 */

/**
* @TODO
*   manage error bahaviour when we get back an empty xml from embed.LY 
*/

function  _media_embedly_video_request($src_url){
  return _media_embedly_cached_request($src_url, 'video');
}

function  _media_embedly_audio_request($src_url){
  return _media_embedly_cached_request($src_url, 'audio');
}

function _media_embedly_cached_request($src_url, $type){
  // get back the administration variables values
  $width_adm = media_embedly_variable_get($type.'_width');
  $delta_t = media_embedly_variable_get('cache_time');
  $embedly_result = array();
  $url = "http://api.embed.ly/1/oembed";
  $data = "?url=".$src_url."&maxwidth=".$width_adm."&format=xml";
  $data = str_replace(":","%3A",$data);
  $data = str_replace("/","%2F",$data);
  $data = str_replace("#","%23",$data);
  $cid = 'embedly_'.$src_url;
  $cached_xml = cache_get($cid);
  if (!is_object($cached_xml) || !isset($cached_xml) || empty($cached_xml)) {
		watchdog('Embedly', 'Non existant cache, new embedly xml. Plugin ID : %id.', array('%id' => $src_url), WATCHDOG_INFO);
    $xml = simplexml_load_file($url.$data);
    if($xml!='FALSE'){
      cache_set($cid, $xml->asXML(), 'cache', time() + $delta_t*60);
    }
  }elseif($cached_xml->created <= time()){ 
    watchdog('Embedly', 'Too old cache, new embedly xml. Plugin ID : %id.', array('%id' => $src_url), WATCHDOG_INFO);
    $xml = simplexml_load_file($url.$data);
    if($xml!='FALSE'){
      cache_set($cid, $xml->asXML(), 'cache', time() + $delta_t*60);
    }else{
      $xml = simplexml_load_string($cached_xml->data);
    }
  }else{
    watchdog('Embedly', 'Good cache, serving cached embedly xml. Plugin ID : %id.', array('%id' => $src_url), WATCHDOG_INFO);
    $xml = simplexml_load_string($cached_xml->data);
  }
  $embedly_result = array(
   'version' => (string)$xml->version,
   'type' => (string)$xml->type, 
   'provider_url' => (string)$xml->provider_url,
   'provider_name' => (string)$xml->provider_name,
   'description' => (string)$xml->description,
   'title' => (string)$xml->title,
   'author' => (string)$xml->author_name,
   'author_url' => (string)$xml->author_url,
   'height' => (string)$xml->height,
   'width' => (string)$xml->width,
   'html' => (string)$xml->html,
   'thumbnail_url' => (string)$xml->thumbnail_url,
   'thumbnail_width' => (string)$xml->thumbnail_width,   
   'thumbnail_height' => (string)$xml->thumbnail_height
  );
  return $embedly_result;
}