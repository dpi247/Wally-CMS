<?php

/**
 * Implementation of hook_menu().
 */
function wallylog_menu() {
  $items = array();

  $items['admin/reports/wallylog'] = array(
    'title' => t('Wally Log'),
    'description' => t('Display and configure informations about your Wally system state'),
    'page callback' => 'wallylog_page_main_board',
    'access arguments' => array('access site reports'),
    'file' => 'includes/wallylog.admin.inc',
  );

  $items['admin/reports/wallylog/main-board'] = array(
    'title' => t('Main Board'),
    'page callback' => 'wallylog_page_main_board',
    'access arguments' => array('access site reports'),
    'file' => 'includes/wallylog.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items['admin/reports/wallylog/procedure'] = array(
    'title' => t('Procedure'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallylog_page_procedure_form'),
    'access arguments' => array('access site reports'),
    'file' => 'includes/wallylog.procedure.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/reports/wallylog/logs'] = array(
    'title' => t('DataBase Logs'),
    'page callback' => 'wallylog_page_logs',
    'access arguments' => array('access site reports'),
    'file' => 'includes/wallylog.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  
  if (module_exists('syslog')) {
    $items['admin/reports/wallylog/syslog'] = array(
      'title' => t('Syslog'),
      'page callback' => 'wallylog_page_syslog',
      'access arguments' => array('access site reports'),
      'file' => 'includes/wallylog.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
  }
  
  $items['admin/reports/wallylog/event/%/%'] = array(
    'title' => t('Details'),
    'page callback' => 'wallylog_page_event_details',
    'page arguments' => array(4, 5),
    'access arguments' => array('access site reports'),
    'file' => 'includes/wallylog.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/reports/wallylog/settings'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallylog_page_settings_form'),
    'access arguments' => array('access site reports'),
    'file' => 'includes/wallylog.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function wallylog_theme() {
  $items = array();

  $path = drupal_get_path('module', 'wallylog');
  $base = array(
    'file' => 'theme.inc',
    'path' => $path.'/theme',
  );

  $items['wallylog_page_main_board'] = $base + array(
    'arguments' => array('status' => array()),
  );
  
  $items['wallylog_filters'] = $base + array(
    'arguments' => array('form' => array()),
  );

  return $items;
}

function wallylog_theme_registry_alter(&$registry) {
  $registry['syslog_format']['function'] = 'theme_wallylog_syslog_format';
}

/**
 * Implementation of hook_cron().
 * Remove expired log messages and flood control events.
 */
function wallylog_cron() {
  // Cleanup the wallylog table
  $max = db_result(db_query('SELECT MAX(wid) FROM {wallylog}'));
  db_query('DELETE FROM {wallylog} WHERE wid <= %d', $max - variable_get('wallylog_logs_flush_number', 1000));
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function wallylog_form_syslog_admin_settings_alter(&$form, $form_state) {
  $form['syslog_log_dir'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Log directory'),
    '#default_value' => variable_get('syslog_log_dir', '/var/log'),
    '#description'   => t('Directory set in your Syslog configuration file, used to display logs in WallyLog.'),
  );
}

/**
 * Implementation of hook_wallylog_board().
 */
function wallylog_wallylog_board($op, $delta = '') {
  switch ($op) {
    case 'list':
      $items = array(
        'devel' => 'Devel',
        'system' => t('System'),
      );
      if (module_exists('hacked')) {
        $items['hacked'] = 'Hacked';
      }
      if (module_exists('memcache_admin')) {
        $items['memcache'] = 'Memcached';
      }
      if (module_exists('supercron')) {
        $items['supercron'] = 'SuperCron';
      }
      return $items;
      
    case 'content':
      $status = array();
      switch ($delta) {
        case 'devel':
          $error = FALSE;
          $status['devel'] = array(
            'title' => 'Devel',
            'description' => l(t('Devel settings page'), 'admin/settings/devel'),
            'content' => _wallylog_admin_devel_status($error),
            'error' => $error,
            'weight' => 0,
          );
          return $status;
          
        case 'system':
          module_load_include('inc', 'system', 'system.admin');
          $system_status_content = system_status();
          $status['system'] = array(
            'title' => t('System'),
            'content' => $system_status_content,
            'error' => preg_match('@<tr class="error@U', $system_status_content, $match = array()) ? TRUE : FALSE,
            'weight' => 10,
          );
          return $status;
          
        case 'hacked':
          $error = FALSE;
          $status['devel'] = array(
            'title' => 'Hacked',
            'content' => _wallylog_admin_hacked_status($error),
            'error' => $error,
            'weight' => 11,
          );
          return $status;
          
        case 'memcache':
          $status['devel'] = array(
            'title' => 'Memcached',
            'content' => memcache_admin_stats(),
          );
          return $status;
          
        case 'supercron':
          $error = FALSE;
          $status['supercron'] = array(
            'title' => 'SuperCron',
            'description' => l(t('Supercron page'), 'admin/settings/supercron'),
            'content' => _wallylog_admin_supercron_status($devel_error),
            'error' => $devel_error,
            'weight' => 5,
          );
          return $status;
      }
      break;
  }
}

/**
 * Implementation of hook_wallylog_logs().
 */
function wallylog_wallylog_logs() {
  return array(
    'wallylog' => 'WallyLog',
  );
}

/**
 * Implementation of hook_watchdog().
 */
function wallylog_watchdog($log = array()) {
  $logs_modules_accepted = wally_variable_get('wallylog_logs_modules', array());

  if (isset($logs_modules_accepted[$log['type']]) && $logs_modules_accepted[$log['type']]) {
    $current_db = db_set_active();
    db_query("INSERT INTO {wallylog}
      (uid, type, message, variables, severity, link, location, referer, hostname, timestamp)
      VALUES
      (%d, '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s', %d)",
      $log['user']->uid,
      $log['type'],
      $log['message'],
      serialize($log['variables']),
      $log['severity'],
      $log['link'],
      $log['request_uri'],
      $log['referer'],
      $log['ip'],
      $log['timestamp']);

    if ($current_db) {
      db_set_active($current_db);
    }
  }
}

function theme_wallylog_syslog_format($entry) {
  global $base_url;

  $message  = $base_url;
  $message .= '|'. $entry['severity'];
  $message .= '|'. $entry['timestamp'];
  $message .= '|'. $entry['type'];
  $message .= '|'. $entry['ip'];
  $message .= '|'. $entry['request_uri'];
  $message .= '|'. $entry['referer'];
  $message .= '|'. $entry['user']->uid;
  $message .= '|'. strip_tags($entry['link']);
  $message .= '|'. strip_tags(is_null($entry['variables']) ? $entry['message'] : strtr($entry['message'], $entry['variables']));

  return $message;
}
