<?php

/**
 * Implementation of hook_perm().
 */
function wallystat_perm() {
  return array(
    'administer statistics',
  );
}

/**
 * Implementation of hook_menu()
 */
function wallystat_menu() {
  $items = array();

  $items['admin/wally/wallystat/settings'] = array(
    'title' => t('Wally Statistics Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallystat_page_admin_form'),
    'access arguments' => array('administer statistics'),
    'description' => 'Allows administrators to set paramaters for this module to function properly.',
    'file' => 'includes/wallystat.admin.inc',
  );

  $items['wallystat/showstats/%'] = array(
    'page callback' => 'wallystat_show_stats',
    'page arguments' => array(2),
    'access arguments' => array('access statistics'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/wallystat.stats_follower.inc',
  );

  $items['wallystat/setdisplayfollower/%'] = array(
    'page callback' => 'wallystat_set_display_follower',
    'page arguments' => array(2),
    'access arguments' => array('access statistics'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/wallystat.stats_follower.inc',
  );

  return $items;
}

/**
 * Implementation of hook_theme()
 */
function wallystat_theme() {
  $module_path = drupal_get_path('module', 'wallystat');
  $base = array(
    'path' => $module_path.'/templates',
    //'file' => 'theme.inc',
  );

  return array(
    'wallystat_show_stats_48h' => $base + array(
      'arguments' => array('nid' => NULL, 'width' => 300, 'height' => 250, 'display_title' => TRUE),
      'template' => 'wallystat-show-stats-48h',
    ),
    'wallystat_show_stats_param' => $base + array(
      'arguments' => array('nid' => NULL, 'param_i' => 0, 'params_callback' => array(), 'width' => 400, 'height' => 250),
      'template' => 'wallystat-show-stats-param',
    ),
  );
}

/**
 * Implementation of hook_cron()
 */
function wallystat_cron(){
  print t('WallyStat started : @date', array('@date' => date('Y-m-d H:i:s'))).'<br/>';

  // Fetch the cron semaphore
  $semaphore = wally_variable_get('wallystat_cron_semaphore', FALSE);

  if ($semaphore && (time() - $semaphore) > 3600) {
    // Either cron has been running for more than an hour or the semaphore
    // was not reset due to a database error.
    // Release cron semaphore
    wally_variable_del('wallystat_cron_semaphore');
  } elseif ($semaphore) {
    print t('Process already running.');
  } else {
    module_load_include('inc', 'wallystat', 'includes/wallystat.process');

    // Register shutdown callback
    register_shutdown_function('_wallystat_cron_cleanup');

    // Lock cron semaphore
    wally_variable_set('wallystat_cron_semaphore', time());

    // Call the function calling the flows
    _wallystat_process_cron();

    // Release cron semaphore
    wally_variable_del('wallystat_cron_semaphore');
  }

  print t('WallyStat finished : @date', array('@date' => date('Y-m-d H:i:s'))).'<br/>';
}

function wallystat_init() {
  if (arg(0) == 'node' && arg(1) != '' && is_numeric(arg(1)) && arg(2) == NULL) {
    if ($vars['node'] = node_load(arg(1))) {
      module_load_include('inc', 'wallystat', 'includes/wallystat.updater_helpers');
      _wallystat_add_updater_callback($vars);
    }
  }
}

/**
 * Implementation of hook_views_api().
 */
function wallystat_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'wallystat') .'/views',
  );
}

/**
 * Theme preprocess function for views-view-row-unformatted.tpl.php
 */
function wallystat_preprocess_wallyctools_row_redacblock(&$vars) {
  if (wally_variable_get('wallystat_display_follower', 0) && user_access('access statistics')) {
    drupal_add_css('/'.drupal_get_path('module', 'wallystat').'/css/follower.css');
    $nid = $vars['row']->{$vars['field_alias']};
    $vars['node'] = '<div class = "wallystat_follower" id = "'.$nid.'">'.$vars['node'].'</div>';
    drupal_add_js(drupal_get_path('module', 'wallystat').'/scripts/display_stats_follower.js');
  }
}

/**
 * Implementation of hook_views_admin_links_alter()
 * Add link to activate the statistics follower
 */
function wallystat_views_admin_links_alter(&$vars, $view) {
  if (isset($view->wallyedit_preview) && $view->wallyedit_preview) {
    $vars = array();
  } else {
    if (get_class($view) == 'redac_view') {
      if (wally_variable_get('wallystat_display_follower', 0)) {
        $vars[] = array(
          'title' => t('Disable live statistics'),
          'alt' => t('Disable statistics displayer'),
          'href' => 'wallystat/setdisplayfollower/0',
          'query' => 'destination='.$_GET['q'],
        );
      } else {
        $vars[] = array(
          'title' => t('Enable live statistics'),
          'alt' => t('Enable statistics displayer'),
          'href' => 'wallystat/setdisplayfollower/1',
          'query' => 'destination='.$_GET['q'],
        );
      }
    }
  }
}

function wallystat_dynamicfeedback_options($op, $delta = '', $node = NULL) {
  switch ($op) {
    case 'list':
      return array(
        'comments_count' => t('Comments count'),
        'views_count' => t('Total views count'),
        'hourly_count' => t('Last hour count'),
      );

    case 'content':
      $datas = array();
      switch ($delta) {
        case 'comments_count':
          $datas = array(
            'label' => t('Comments'),
            'value' => $node->comment_count,
          );
          break;

        case 'views_count':
          $counts = wallystat_node_get_counts($node->nid);
          if (isset($counts['totalcount'])) {
            $datas = array(
              'label' => t('Total views count'),
              'value' => $counts['totalcount'],
            );
          }
          break;

        case 'hourly_count':
          $hourly_counts = wallystat_node_get_hourly_counts($node->nid);
          if (!empty($hourly_counts)) {
            $most_recent_time = max(array_keys($hourly_counts));
            $datas = array(
              'label' => t('Last hour count'),
              'value' => $hourly_counts[$most_recent_time],
            );
          }
          break;
      }
      return $datas;
  }
}

function wallystat_node_get_counts($nid) {
  $return_counts = array();
  if ($db_counts = db_query('SELECT SUM(totalcount), SUM(daycount), SUM(weekcount), SUM(monthcount), SUM(yearcount) FROM {wallystat_node_counter} WHERE nid = %d', $nid)) {
    $counts = db_fetch_array($db_counts);
    $return_counts = array(
      'totalcount' => $counts['SUM(totalcount)'],
      'daycount' => $counts['SUM(daycount)'],
      'weekcount' => $counts['SUM(weekcount)'],
      'monthcount' => $counts['SUM(monthcount)'],
      'yearcount' => $counts['SUM(yearcount)'],
    );
  }
  return $return_counts;
}

function wallystat_node_get_hourly_counts($nid) {
  $return_counts = array();
  if ($node_hours_stats_db = db_query('SELECT timestamp, SUM(count) FROM {wallystat_node_hourly_counter} WHERE nid = "%s" GROUP BY timestamp ORDER BY timestamp ASC', $nid)) {
    while ($stat = db_fetch_array($node_hours_stats_db)) {
      $return_counts[$stat['timestamp']] = $stat['SUM(count)'];
    }
  }
  return $return_counts;
}

function wallystat_generate_stats($tids, $targets, $node_amout = 10, $options = array()) {
  if (is_numeric($tids)) {
    $tids = array($tids);
  }
  if (is_string($targets)) {
    $target = $targets;
    $targets = array();
    foreach ($tids as $tid) {
      $targets[$tid] = $target;
    }
  }

  $default_options = array(
    'daycount' => array('min' => 300, 'max' => 1000),
    'weekcount' => array('min' => 3000, 'max' => 5000),
    'monthcount' => array('min' => 5000, 'max' => 7000),
    'yearcount' => array('min' => 7000, 'max' => 9000),
    'totalcount' => array('min' => 9000, 'max' => 10000),
    'hourly_count' => array('min' => 200, 'max' => 500),
  );
  $timestamp = time();
  $current_hour = $timestamp - (date('i', $timestamp) * 60 + date('s', $timestamp));

  foreach ($tids as $tid) {
    $target = $targets[$tid];
    $db_res = db_query("SELECT DISTINCT(n.nid), n.title
      FROM {content_field_destinations} cfd INNER JOIN {node} n ON cfd.nid = n.nid 
      WHERE cfd.field_destinations_tid = %d AND cfd.field_destinations_target = '%s' 
      ORDER BY cfd.field_destinations_time_rank DESC 
      LIMIT 0, %d", $tid, $target, $node_amout);
    while ($res = db_fetch_object($db_res)) {
      db_query("DELETE FROM {wallystat_node_counter} WHERE nid = %d", $res->nid);
      db_query("DELETE FROM {wallystat_node_hourly_counter} WHERE nid = %d", $res->nid);
      //db_query("DELETE FROM {wallystat_term_counter} WHERE nid = %d", $res->nid);

      if (!isset($options['param01'])) {
        $options['param01'] = array('');
      }
      
      for ($i = 2; $i < 10; $i++) {
        $res->{'param0'.$i} = '';
      }
      $res->param10 = '';
      foreach ($options['param01'] as $param) {
        $res->param01 = $param;
        
        // Node counter
        foreach ($default_options as $option_key => $option) {
          $min = isset($option['min']) ? $option['min'] : $default_options[$option_key]['min'];
          $max = isset($option['max']) ? $option['max'] : $default_options[$option_key]['max'];
          $res->{$option_key} = rand($min, $max) / rand(1, sizeof($options['param01']));
        }
        drupal_write_record('wallystat_node_counter', $res);
        
        for ($i = 0; $i <=48; $i++) {
          $res->timestamp = $current_hour - $i * 3600;
          $min = isset($options['hourly_count']['min']) ? $options['hourly_count']['min'] : $default_options['hourly_count']['min'];
          $max = isset($options['hourly_count']['max']) ? $options['hourly_count']['max'] : $default_options['hourly_count']['max'];
          $res->count = rand($min, $max) / rand(1, sizeof($options['param01']));
          drupal_write_record('wallystat_node_hourly_counter', $res);
        }
      }
    }
  }
}
