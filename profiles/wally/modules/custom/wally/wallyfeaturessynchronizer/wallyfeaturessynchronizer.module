<?php

/**
 * Implémentation du hook_form_FORM_ID_alter.
 */
function wallyfeaturessynchronizer_form_taxonomy_form_term_alter (&$form, &$form_state) {
  $form['#validate'][] = 'wallyfeaturessynchronizer_form_taxonomy_form_term_alter_validate';
}

/**
 * Validation du formulaire d'ajout/d'édition d'un terme taxonomique.
 */
function wallyfeaturessynchronizer_form_taxonomy_form_term_alter_validate (&$form, &$form_state) {
  if ($values['op'] == $values['submit']) {
    $values = $form_state['values'];
    $bad_car = array('_', ' ', '\'');
    if ($form_state['values']['tid'])
      $term = taxonomy_get_term($form_state['values']['tid']);
  
    if (!$form_state['values']['tid'] || !isset($term->featid))
      $form_state['values']['featid'] = $values['vid'] .'_'. str_replace($bad_car, '-', strtolower($values['name']));
  }
}

/**
 * Implémentation du hook_schema_alter.
 */
function wallyfeaturessynchronizer_schema_alter (&$schema) {
  if ($schema['term_data']) {
    $schema['term_data']['fields']['featid'] = array(
      'type' => 'varchar',
      'length' => '255',
      'description' => 'An unique name used to synchronize features between instances of Wally.'
    );
  }
}

/**
 * Implementation of hook_features_api
 */
function wallyfeaturessynchronizer_features_api() {
  return array(
    'views' => array(
      'base' => 'wallyfeaturessynchronizer_views',
    ),
    'page_manager_handlers' => array(
      'base' => 'wallyfeaturessynchronizer_page_manager_handlers',
    ),
  );
}

/**
 * Alter the object considered by features as default value to replace
 * the complete taxonomy terms by their IDs.
 * 
 * @param &$cached
 *   The unaltered default values object.
 */
function wallyfeaturessynchronizer_views_default_views_alter (&$cached) {
  $bad_car = array('_', ' ', '\'');
  $types = views_object_types();
  $type = 'filter';
  
  foreach ($cached as $view_name => $view) {
    foreach ($view->display as $display_id => $display) {
      $new_fields = array();
      foreach ($display->handler->get_option($types[$type]['plural']) as $id => $field) {
        $handler = views_get_handler($field['table'], $field['field'], $type);
        // Build handler to get field informations
        if (!isset($handler->content_field['type'])) {
          $handler->content_field['type'] = '';
        }

        $new_fields[$id] = $field;
        // Only handle fields with taxonomy values
        if ($id == 'field_destinations_tid' || $handler->content_field['type'] == 'content_taxonomy') {
          foreach ($field['value'] as $key => $value) {
            if (is_array($value) && isset($value['featid'])) {
              // Replace TID with the full term
              $new_fields[$id]['value'][$key] = _wallyfeaturessynchronizer_get_tid_from_featid((object)$value);
            }
          }
        }
      }
      // Save new values in the view
      $display->handler->set_option($types[$type]['plural'], $new_fields);
      $view->display[$display_id] = $display;
    }
    $cached[$view_name] = $view;
  }
}

/**
 * Alter the object considered by features as default value to replace
 * the complete taxonomy terms by their IDs.
 * 
 * @param &$cached
 *   The unaltered default values object.
 */
function wallyfeaturessynchronizer_default_page_manager_handlers_alter (&$cached) {
  foreach ($cached as $component => $comp_infos) {
    $temp_conf = $cached[$component]->conf;
    $plugins = isset($temp_conf['access']['plugins']) ? $temp_conf['access']['plugins'] : array();
    foreach ($plugins as $plug_id => $plugin) {
      if ($plugin['name'] == 'term') {
        $settings = $plugin['settings'] ? $plugin['settings'] : array();
        foreach ($settings as $set_id => $setting) {
          if (is_array($setting) && sizeof($setting)>0) {
            foreach ($setting as $featid => $featid_infos) {
              if (sizeof(explode('_', $featid)) == 2 && isset($featid_infos->featid)) {
                $tid = _wallyfeaturessynchronizer_get_tid_from_featid($featid_infos);
                $temp_conf['access']['plugins'][$plug_id]['settings'][$set_id][$tid] = $tid;
                unset($temp_conf['access']['plugins'][$plug_id]['settings'][$set_id][$featid]);
              }
            }
          }
        }
      }
    }
    $cached[$component]->conf = $temp_conf;
  }
}

/**
 * Implementation of hook_features_export_render() for views.
 * 
 * @see features.views.inc
 */
function wallyfeaturessynchronizer_views_features_export_render($module, $data, $export = 'normal') {
  $code = array();
  $code[] = '  $views = array();';
  $code[] = '';
  
  // Build views & add to export array
  foreach ($data as $view_name) {
    // Build the view
    $view = views_get_view($view_name, TRUE);
    
    // Beginning of custom code
    $bad_car = array('_', ' ', '\'');
    if ($export !== NULL) {
      $view->set_display();
      $types = views_object_types();
      $type = 'filter';
      foreach ($view->display as $display_id => $display) {
        $new_fields = array();
        foreach ($display->handler->get_option($types[$type]['plural']) as $id => $field) {
          // Build handler to get field informations
          $handler = views_get_handler($field['table'], $field['field'], $type);
          $handler->init($view, $field);
          if (!isset($handler->content_field['type'])) {
            $handler->content_field['type'] = '';
          }
          
          $new_fields[$id] = $field;
          // Only handle fields with taxonomy values
          if ($id == 'field_destinations_tid' || $handler->content_field['type'] == 'content_taxonomy') {
            foreach ($field['value'] as $key => $value) {
              if (is_numeric($value)) {
                $term = taxonomy_get_term($value);
                if (!isset($term->featid)) {
                  $term->featid = $term->vid .'_'. str_replace($bad_car, '-', strtolower($term->name));
                  drupal_write_record('term_data', $term, 'tid');
                }
                // Replace TID with the full term
                $new_fields[$id]['value'][$key] = (array)$term;
              }
            }
          }
        }
        // Save new values in the view
        $display->handler->set_option($types[$type]['plural'], $new_fields);
        $view->display[$display_id] = $display;
      }
    }
    // End of custom code
    
    if ($view) {
      $code[] = '  // Exported view: '. $view_name;
      $code[] = $view->export('  ');
      $code[] = '  $views[$view->name] = $view;';
      $code[] = '';
    }
  }
  $code[] = '  return $views;';
  $code = implode("\n", $code);
  return array('views_default_views' => $code);
}

/**
 * Implementation of hook_features_export_render() for page_manager_handlers.
 * 
 * @see features.ctools.inc
 */
function wallyfeaturessynchronizer_page_manager_handlers_features_export_render($module, $data, $export = 'normal') {
  ctools_include('export');
  
  $component = 'page_manager_handlers';
  $schema = ctools_export_get_schema($component);
  /*if (function_exists($schema['export']['to hook code callback'])) {
    $export = $schema['export']['to hook code callback']($data, $module);
    $code = explode("{\n", $export);
    array_shift($code);
    $code = explode('}', implode($code, "{\n"));
    array_pop($code);
    $code = implode('}', $code);
  }
  else {*/
    $code = '  $export = array();'."\n";
    foreach ($data as $object_name) {
      if ($object = _ctools_features_export_crud_load($component, $object_name)) {
        if (sizeof($object->conf['access']['plugins'])>0 && $export != 'normal') {
          _wallyfeaturessynchronizer_set_featid_from_object($object);
        }
        $identifier = $schema['export']['identifier'];
        $code .= _ctools_features_export_crud_export($component, $object, '  ');
        $code .= "\n";
        $code .= "  \$export[" . ctools_var_export($object_name) . "] = \${$identifier};\n";
      }
    }
    $code .= '  return $export;';
  //}
  return array($schema['export']['default hook'] => $code);
}

/**
 * Replace the taxonomy term ID by the complete term object.
 * 
 * @param &$object
 *   The object in which the replacement is done.
 */
function _wallyfeaturessynchronizer_set_featid_from_object (&$object) {
  $plugins = $object->conf['access']['plugins'];
  $bad_car = array('_', ' ', '\'');

  foreach ($plugins as $plug_id => $plugin) {
    if ($plugin['name'] == 'term') {
      $settings = $plugin['settings'] ? $plugin['settings'] : array();
      foreach ($settings as $set_id => $setting) {
        if (is_array($setting) && sizeof($setting)>0) {
          foreach ($setting as $tid => $tid_infos) {
            $term = taxonomy_get_term($tid);
            if (!isset($term->featid)) {
              $term->featid = $term->vid .'_'. str_replace($bad_car, '-', strtolower($term->name));
              drupal_write_record('term_data', $term, 'tid');
            }
            
            $plugins[$plug_id]['settings'][$set_id][$term->featid] = $term;
            unset($plugins[$plug_id]['settings'][$set_id][$tid]);
            $object->conf['access']['plugins'][$plug_id] = $plugins[$plug_id];
          }
        }
      }
    }
  }
}

/**
 * Find the taxonomy term associated to a given featid. If no term is
 * found, a new taxonomy term is created.
 * 
 * @return
 *   The tid of the founded or created term.
 */
function _wallyfeaturessynchronizer_get_tid_from_featid($feat_term) {
  $terms = taxonomy_get_tree($feat_term->vid);
  $temp_term = new stdClass();
  foreach ($terms as $term) {
    if ($term->featid == $feat_term->featid) {
      $temp_term = $term;
    }
  }

  if (!isset($temp_term->tid)) {
    $array_feat_term = (array)$feat_term;
    taxonomy_save_term($array_feat_term);
    $temp_term = $array_feat_term;
  }

  return $temp_term->tid;
}

/*
 * Redirection of hooks to their original implementation if they have not been implemented if this module
 */

function wallyfeaturessynchronizer_views_features_export($data, &$export, $module_name = '') {
  views_features_export($data, $export, $module_name);
}

function wallyfeaturessynchronizer_views_features_export_options() {
  return views_features_export_options();
}

function wallyfeaturessynchronizer_views_features_revert($module) {
  views_features_revert($module);
}

function wallyfeaturessynchronizer_page_manager_handlers_features_export($data, &$export, $module_name = '') {
  page_manager_handlers_features_export($data, $export, $module_name);
}

function wallyfeaturessynchronizer_page_manager_handlers_features_export_options() {
  return page_manager_handlers_features_export_options();
}

function wallyfeaturessynchronizer_page_manager_handlers_features_revert($module) {
  page_manager_handlers_features_revert($module);
}

