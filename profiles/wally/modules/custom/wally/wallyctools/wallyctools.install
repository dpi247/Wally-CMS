<?php
// $Id: ctools_custom_content.install,v 1.1.2.1 2010/07/14 01:57:42 merlinofchaos Exp $

/**
 * Schema for CTools custom content.
 */
function wallyctools_schema() {
  return wallyctools_schema_1();
}

function wallyctools_schema_1() {
  $schema = array();

  $schema['wallyctools'] = array(
    'description' => 'Contains exportable customized content for this site.',
  
    'export' => array(
      //'status'=>'enabled',
      'identifier' => 'redacblock',
      'bulk export' => TRUE,
      'primary key' => 'cid',
      'key'=>'name',
      'api' => array(
      //Reffer to _ctools_plugin_api 
        'owner' => 'wallyctools',
        'api' => 'wallyctools_redacblock',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      //'create callback' => 'wallyctools_content_type_new',
    ),
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'description' => 'A database primary key to ensure uniqueness',
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for this content. Used to identify it programmatically.',
      ),
      'admin_title' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Administrative title for this content.',
      ),
      'admin_description' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Administrative description for this content.',
        'object default' => '',
      ),
      'category' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Administrative category for this content.',
      ),
      'view_name' => array(
        'type'=>'varchar',
        'length' => 64,
        'not null' => TRUE
      ),
      'view_id' =>array(
        'type'=>'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'settings' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized settings for the actual content to be used',
        'serialize' => TRUE,
        'object default' => array(),
      ),
    ),
    'primary key' => array('cid'),
  );
  
  $schema['wallyctools_term_handler_mapping'] = array(
    'description' => 'Contains the mapping between terms and displays',
    'fields' => array(
      'mid' => array(
        'type' => 'serial',
        'description' => 'A database primary key to ensure uniqueness',
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The tid of the mapped term.',
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The vid of the mapped term.',
      ),
      'depth' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The depth of the mapped term.',
      ),
      'mapping' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized settings for the actual mapping',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('mid'),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function wallyctools_install() {
  if (!db_table_exists('wallyctools')) {
    drupal_install_schema('wallyctools');
  }
  variable_set('page_manager_term_view_disabled', FALSE);
  variable_set('page_manager_node_view_disabled', FALSE);
}

/**
 * Implementation of hook_uninstall().
 */
function wallyctools_uninstall() {
  module_load_include('inc', 'wallytoolbox', 'includes/wallytoolbox.helpers');
  wallytoolbox_variable_del_like('wallyctools_');
  drupal_uninstall_schema('wallyctools');
}

function wallyctools_update_6001(&$sandbox) {
  $ret = array();
  db_drop_table($ret, 'wallyctools_views_layout');
  return $ret;
}

function wallyctools_update_6002() {
  $ret = array();
  $schemas = wallyctools_schema_1();
  db_create_table($ret, 'wallyctools_term_handler_mapping', $schemas['wallyctools_term_handler_mapping']);
  wallyctools_build_term_handler_mapping(variable_get('wallymport_destinationpath', 0), 0, TRUE);
  return $ret;
}
function wallyctools_update_6003() { 
  $ret = array();
  //Set view calc on redacbloc views
/*
  $result = db_query("SELECT vid, id, display_options  FROM {views_display} WHERE display_plugin = 'redacblock'");
  while ($obj = db_fetch_object($result)){ 
    $display_options = unserialize($obj->display_options);
     if ($display_options['pager']['type'] == 'full' || $display_options['pager']['type'] == 'mini') {
      $display_options['pager']['type'] = 'wallyctools_calc';
      $display_options['pager']['options']['id'] = '0';
      $display_options['pager']['options']['expose']['items_per_page_options_all'] = 0;
      $obj->display_options = serialize($display_options);
      db_query("UPDATE {views_display} SET display_options = '%s' WHERE vid = %d AND id = '%s'", $obj->display_options, $obj->vid, $obj->id);
    }
  }
  */
  //Update redacbloc
  $result = db_query("SELECT pid, configuration FROM {panels_pane} WHERE type = 'redacblock'");
  while ($obj = db_fetch_object($result)){
    $conf = unserialize($obj->configuration);
    if ($conf['split_index_count'] == ''){
      $conf['use_splitted'] = 0;
    } else {
      $conf['use_splitted'] = 1;
    }
    $obj->configuration = $conf;
    drupal_write_record('panels_pane', $obj, array('pid'));
  }
  return $ret;  
}