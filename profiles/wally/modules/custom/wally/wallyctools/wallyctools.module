<?php
// $Id: wallyctools.module,v 1.1.2.2 2010/07/23 21:47:20 merlinofchaos Exp $

/**
 * @file
 * wallyctools module
 *
 * This module allows styles to be created and managed on behalf of modules
 * that implement styles.
 *
 * The wallyctools tool allows recolorable styles to be created via a miniature
 * scripting language. Panels utilizes this to allow administrators to add
 * styles directly to any panel display.
 */

/**
 * Implementation du hook menu
 */
function wallyctools_menu() {
  $items = array();

  $items['admin/wally/wallyctools'] = array(
    'title'                         => t('Wally CTools Settings'),
    'description'                   => t('Manage settings used in Wally CTools (default target, reorder and destinations tree caching)'),
    'page callback'                 => 'drupal_get_form',
    'page arguments'                => array('wallyctools_page_default_target_form'),
    'access arguments'              => array('administer nodes'),
    'file'                          => 'includes/page_admin.inc',
  );
  
  $items['admin/wally/wallyctools/defaulttarget'] = array(
    'title'                         => t('Default Target'),
    'page callback'                 => 'drupal_get_form',
    'page arguments'                => array('wallyctools_page_default_target_form'),
    'access arguments'              => array('administer nodes'),
    'file'                          => 'includes/page_admin.inc',
    'type'                          => MENU_DEFAULT_LOCAL_TASK,
    'weight'                        => 0,
  );

  $items['admin/wally/wallyctools/reordersettings'] = array(
    'title'                         => t('Reorder Settings'),
    'page callback'                 => 'drupal_get_form',
    'page arguments'                => array('wallyctools_page_reorder_settings_form'),
    'access arguments'              => array('administer nodes'),
    'file'                          => 'includes/page_admin.inc',
    'type'                          => MENU_LOCAL_TASK,
    'weight'                        => 1,
  );

  $items['admin/wally/wallyctools/desttreecaching'] = array(
    'title'                         => t('Destinations Tree Caching'),
    'page callback'                 => 'drupal_get_form',
    'page arguments'                => array('wallyctools_page_destinations_tree_caching_form'),
    'access arguments'              => array('manage cache'),
    'file'                          => 'includes/page_admin.inc',
    'type'                          => MENU_LOCAL_TASK,
    'weight'                        => 2,
  );

  $items['admin/wally/wallyctools-operations'] = array(
    'title'                         => t('Reorder and manipulate'),
    'description'                   => t('Reorder destinations and apply some modifications to nodes in destinations'),
    'page callback'                 => 'wallyctools_page_reorder_destination',
    'page arguments'                => array(),
    'access arguments'              => array('administer nodes'),
    'type'                          => MENU_CALLBACK,
    'file'                          => 'includes/wallyctools.reorder.inc',
  );

  $items['admin/wally/wallyctools-operations/reorder/%/%/%'] = array(
    'title'                         => t('Reorder'),
    'page callback'                 => 'wallyctools_page_reorder_destination',
    'page arguments'                => array(4, 5, 6),
    'access arguments'              => array('administer nodes'),
    'type'                          => MENU_LOCAL_TASK,
    'weight'                        => 0,
    'file'                          => 'includes/wallyctools.reorder.inc',
  );

  $items['admin/wally/wallyctools-operations/batchoperations/%/%/%'] = array(
    'title'                         => t('Batch operations'),
    'page callback'                 => 'wallyctools_page_destination_batch_operations',
    'page arguments'                => array(4, 5, 6),
    'access arguments'              => array('administer nodes'),
    'type'                          => MENU_LOCAL_TASK,
    'weight'                        => 1,
    'file'                          => 'includes/wallyctools.reorder.inc',
  );

  return $items;
}

function wallyctools_form_alter($form, $form_state, $form_id) {
  if (strstr($form_id, 'views_bulk_operations_form__')) {
    if ($form['step']['#value'] == 1) {
      $view = $form['#plugin']->view;
      if ($view->name == 'batch_destinations' && $view->current_display == 'page_1') {
        $form['#suffix'] = drupal_get_form('wallyctools_form_batch_operations_form', $view->args[0]);
      }
    }
  }
}

function wallyctools_form_page_manager_handler_rearrange_alter(&$form, $form_state) {
  if ($form_state['task_name'] == 'term_view') {
    $form['#submit'][] = 'wallyctools_page_manager_rearrange_submit';
  }
}

/**
 * Implementation of hook_taxonomy.
 * force refresh of destinations tree cache after modification of a destination term
 */
function wallyctools_taxonomy($op, $type, $array = NULL) {
  if ($type == 'term') {
    $dest_vid = variable_get('wallymport_destinationpath', 0);
    $depth = 0;
    if (isset($array['vid']) && $array['vid'] == $dest_vid) {
      cache_clear_all('wallyctools_term_handler_mapping_'.$dest_vid.'_'.$depth, 'cache', TRUE);
      db_query("DELETE FROM {wallyctools_term_handler_mapping} WHERE vid = %d AND depth = %d", $dest_vid, $depth);
    }
  }
}

/**
 * Implementation of hood_panels_display_save()
 * Refresh the term and handler mapping
 */
function wallyctools_panels_display_save($display) {
  wallyctools_build_term_handler_mapping(variable_get('wallymport_destinationpath', 0), 0, TRUE);
}

/**
 * Refresh destination tree after variants rearrangement
 */
function wallyctools_page_manager_rearrange_submit() {
  db_query("DELETE FROM {wallyctools_term_handler_mapping} WHERE vid = %d AND depth = %d", variable_get('wallymport_destinationpath', 0), $depth);
  cache_clear_all('wallyctools_term_handler_mapping_'.$vid.'_'.$depth, 'cache', TRUE);
}

/**
 * A theme preprocess function to automatically allow view-based node
 * templates if called from a view.
 *
 * The 'modules/node.views.inc' file is a better place for this, but
 * we haven't got a chance to load that file before Drupal builds the
 * node portion of the theme registry.
 */
function wallyctools_preprocess_views_view(&$vars) {
  if (get_class($vars['view']) == 'redac_view') {
    $view = $vars['view'];
 
    //if redacblock is splitted we need to tweak the pager
    if(isset($view->split_index_count) && !empty($view->split_index_count) && is_numeric($view->split_index_count) && ($view->split_index_count > 0)) {
      global $pager_total;
      $pager_total[$view->pager['element']] = (int)(($view->total_rows + $view->pager['offset'] + $view->split_index_count) / $view->split_total_count) + 1;
      $pager_type = ($view->pager['use_pager'] === 'mini' ? 'views_mini_pager' : 'pager');
      $pager_theme = views_theme_functions($pager_type, $view, $view->display_handler->display);
      $vars['pager'] = theme($pager_theme, $exposed_input, $vars['view']->split_total_count, $view->pager['element']);
  
      $funcs = views_theme_functions('views_view', $view, $view->display[$view->current_display]);
  
      $new_funcs = array();
      foreach($funcs as $func) {
        if($func != 'views_view__' && isset($view->split_index_count) && $view->split_index_count != '' && $view->split_index_count != NULL) {
          $needle=str_replace('views_view','',$func);
          if($needle=='') {
            $new_funcs[]='views_view__splitted_redacblock';
            if($vars['view']->split_index_count==1) {
              $new_funcs[]='views_view__splitted_redacblock__first';
            }
            if($vars['view']->split_index_count==$vars['view']->split_total_count) {
              $new_funcs[]='views_view__splitted_redacblock__last';
            }
          } else {
            $new_funcs[]='views_view__splitted_redacblock'.$needle;
            if($vars['view']->split_index_count==1) {
              $new_funcs[]='views_view__splitted_redacblock__first'.$needle;
            }
            if($vars['view']->split_index_count==$vars['view']->split_total_count) {
              $new_funcs[]='views_view__splitted_redacblock__last'.$needle;
            }
          }
        }
      }
  
      $result = array_merge($new_funcs, $funcs);
      $vars['template_files'] = array_merge($result, $vars['template_files']);
    }

    // Add reorder link
    if (user_access('administer nodes')) {
      $handlers = $view->display_handler->handlers;
      foreach($handlers['argument'] as $key => $value){
        if($key == 'field_destinations_tid') {
          $destination_tid = $value->value[0];
          break;
        }
      }
      if ($destination_tid) {
        foreach($handlers['filter'] as $key => $value) {
          if($key == 'field_destinations_target') {
            $target = $value->value;
            if (is_array($target)) {
              $target = $target[0];
            }
            break;
          }
        }
        if ($target) {
          foreach ($view->argument as $arg_name => $argument) {
            if (strstr($arg_name, 'field_destination')) {
              $vars['admin_links_raw'][] = array(
                'title' => t('Reorder'),
                'alt' => t('Reorder the view'),
                'href' => "admin/wally/wallyctools-operations/reorder/25/$destination_tid/$target",
              );

              $vars['admin_links'] = theme('links', $vars['admin_links_raw']);
              break;
            }
          }
        }
      }
    }
  }
}

function wallyctools_preprocess_node_custo(&$vars) {
  if (isset($vars['node']->node_view_destination)) {
    $taxonomy_term = taxonomy_get_term($vars['node']->node_view_destination);
    $taxonomy_term_name = strtolower($taxonomy_term->name);
     
    // The 'view' attribute of the node is added in template_preprocess_views_view_row_node()
    if (!empty($vars['node']->node_view_layout) && !empty($vars['node']->view->name)) {
      $vars['view'] = &$vars['node']->view;

      //$vars['template_files'][] = 'node-view-' . $vars['node']->node_view_layout;
      $vars['template_files'][] = 'node-view-' . $taxonomy_term_name;
      $vars['template_files'][] = 'node-view-' . $taxonomy_term_name.'-'.$vars['node']->node_view_layout;
      
      $vars['template_files'][] = 'node-view-' . $vars['node']->view->name.'-'.$vars['node']->node_view_layout;
      $vars['template_files'][] = 'node-view-' . $vars['node']->view->name.'-'.$taxonomy_term_name;
      $vars['template_files'][] = 'node-view-' . $vars['node']->view->name.'-'.$taxonomy_term_name.'-'.$vars['node']->node_view_layout;

      if(!empty($vars['node']->view->current_display)) {
        $vars['template_files'][] = 'node-view-' . $vars['node']->view->name . '-' . $vars['node']->view->current_display.'-'.$vars['node']->node_view_layout;
        $vars['template_files'][] = 'node-view-' . $vars['node']->view->name . '-' . $vars['node']->view->current_display.'-'.$taxonomy_term_name;
        $vars['template_files'][] = 'node-view-' . $vars['node']->view->name . '-' . $vars['node']->view->current_display.'-'.$taxonomy_term_name.'-'.$vars['node']->node_view_layout;
      }
    }
  }

  if (isset($vars['node_view_destination']) && $vars['node_view_destination'] <> "" && !empty($vars['node_view_destination'])) {
    static $global_count = array();
    if(!isset($global_count[$vars['node_view_destination']][$vars['node_view_target'][0]])) {
      $global_count[$vars['node_view_destination']][$vars['node_view_target'][0]]=0;
    } else {
      $global_count[$vars['node_view_destination']][$vars['node_view_target'][0]]++;
    }
    $vars["global_index"] = $global_count[$vars['node_view_destination']][$vars['node_view_target'][0]];
    $vars["node"]->global_index = $global_count[$vars['node_view_destination']][$vars['node_view_target'][0]];
  }
}

function wallyctools_ctools_plugin_api($owner, $api) {
  if ($owner == 'wallyctools' && $api == 'wallyctools_redacblock') {
    return array('version' => 1);
  }
  if ($owner == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function wallyctools_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Create callback for creating a new CTools custom content type.
 *
 * This ensures we get proper defaults from the plugin for its settings.
 */
function wallyctools_content_type_new($set_defaults) {
  $item = ctools_export_new_object('wallyctools', $set_defaults);
  ctools_include('content');
  $plugin = ctools_get_content_type('redacblock');
  $item->settings = ctools_content_get_defaults($plugin, array());
  return $item;
}

/**
 * Implementation of hook_panels_dashboard_blocks().
 *
 * Adds page information to the Panels dashboard.
 */
function wallyctools_panels_dashboard_blocks(&$vars) {
  $vars['links']['wallyctools'] = array(
    'title' => l(t('Redactional Block'), 'admin/build/wallyctools/add'),
    'description' => t('Custom content panes are basic HTML you enter that can be reused in all of your panels.'),
  );

  // Load all mini panels and their displays.
  ctools_include('export');
  $items = ctools_export_crud_load_all('wallyctools');
  $count = 0;
  $rows = array();

  foreach ($items as $item) {
    $rows[] = array(
      check_plain($item->admin_title),
      array(
        'data' => l(t('Edit'), "admin/build/wallyctools/list/$item->name/edit"),
        'class' => 'links',
      ),
    );

    // Only show 10.
    if (++$count >= 10) {
      break;
    }
  }

  if ($rows) {
    $content = theme('table', array(), $rows, array('class' => 'panels-manage'));
  }
  else {
    $content = '<p>' . t('There are no redactional Blocks.') . '</p>';
  }

  $vars['blocks']['wallyctools'] = array(
    'title' => t('Manage Redactional Block'),
    'link' => l(t('Go to list'), 'admin/build/wallyctools'),
    'content' => $content,
    'class' => 'dashboard-content',
    'section' => 'right',
  );
}

/**
 * Implementation of hook_views_api().
 *
 * This one is used as the base to reduce errors when updating.
 */
function wallyctools_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'wallyctools') . '/plugins/views',
  );
}

/**
 * Implementation of hook_ccimapping_productinfo_alter
 * Add the default target to product info
 */
function wallyctools_ccimapping_productinfo_alter(&$dom, $op) {
  if ($op == 'before_send') {
    $dest_vid = variable_get('wallymport_destinationpath', 0);
    $depth = 0;
    $tid_did_mapping = wallyctools_get_term_handler_mapping($dest_vid, $depth);
    $default_redacblocks = wally_variable_get('wallyctools_default_redacblocks', array());
    $budgettemplate = $dom->getElementsByTagName('budgettemplate')->item(0);

    $level = 1;
    wallyctools_ccimapping_productinfo_alter_hierarchy_items($dom, $budgettemplate, $tid_did_mapping, $default_redacblocks, $dest_vid, $level);
  }
}

function wallyctools_ccimapping_productinfo_alter_hierarchy_items($dom, &$dom_element, $tid_did_mapping, $default_redacblocks, $dest_vid, $level, $tax_path = '') {
  $dom_levels = $dom_element->getElementsByTagName('level'.$level);
  if ($dom_levels->item(0)) {
    foreach ($dom_levels as $dom_level) {
      $default_set = FALSE;
      $term_path = $tax_path.$dom_level->getAttributeNode('name')->value.'/';
      $term = wallytoolbox_taxonomy_get_term_by_path($term_path, $dest_vid);
      $did = $tid_did_mapping[$term[0]->tid]['did'];
      $default_redacblock = $default_redacblocks[$did];
      
      $leafs = $dom_level->getElementsByTagName('leaf');
      if ($leafs->item(0)) {
        foreach ($leafs as $leaf) {
          if ($leaf->getAttributeNode('name')->value == $default_redacblock['default_redacblock']) {
            $leaf->setAttribute('default', 'true');
            $default_set = TRUE;
            break;
          }
        }
      }
      
      if (!$default_set) {
        $leafs->item(0)->setAttribute('default', 'true');
      }

      $next_level = $level + 1;
      wallyctools_ccimapping_productinfo_alter_hierarchy_items($dom, $dom_level, $tid_did_mapping, $default_redacblocks, $dest_vid, $next_level, $term_path);
    }
  }
}

function wallyctools_api_getlayoutfromdestinationandtarget($node,$destination,$target){
  foreach($node->field_destinations as $destination_item){
    if($destination_item['tid']==$destination and $destination_item['target']==$target){
      return $destination_item['layout'];
    }
  }
  return NULL;
}

function wallyctools_content_get_subtypes($type) {
  $subtypes = array();

  if (is_array($type)) {
    $plugin = $type;
  }
  else {
    $plugin = ctools_get_content_type($type);
  }

  if (empty($plugin) || empty($plugin['name'])) {
    return;
  }

  if (isset($plugin['content types'])) {
    $function = $plugin['content types'];
    if (is_array($function)) {
      $subtypes = $function;
    }
    else if (function_exists($function)) {
      // Cast to array to prevent errors from non-array returns.
      $subtypes = (array) $function($plugin);
    }
  }

  // Walk through the subtypes and ensure minimal settings are
  // retained.
  foreach ($subtypes as $id => $subtype) {
    // Use exact name since this is a modify by reference.
    ctools_content_prepare_subtype($subtypes[$id], $plugin);
  }

  return $subtypes;
}

function wallyctools_get_redac_view_array(){
  $display_plugin='redacblock';
  $query="SELECT vv.name, vv.vid, vd.display_plugin,vd.id, vd.display_title  FROM {views_display}  AS vd LEFT JOIN {views_view} AS  vv ON vv.vid=vd.vid WHERE display_plugin='%s'";
  $results=db_query($query,$display_plugin);

  $array=array();
  while($result=db_fetch_object($results)){
    $array[]=$result;
  }
  return $array;
}

function wallyctools_get_redac_view_options(){
  $options=array();
  $views=wallyctools_get_redac_view_array() ;
  foreach($views as $view){
    $options[$view->name.'+'.$view->id]=$view->name.'-'.$view->display_title.' ('.$view->id.')';
  }
  return $options;
}

function wallyctools_get_view_info_from_redacblock ($redacblock) {
  return db_fetch_array(db_query('SELECT view_name, view_id FROM {wallyctools} WHERE name = "%s"', $redacblock));
}

function wallyctools_get_default_target($tid) {
  $dest_vid = variable_get('wallymport_destinationpath', 0);
  $depth = 0;
  $tid_did_mapping = wallyctools_get_term_handler_mapping($dest_vid, $depth);
  $default_redacblocks = wally_variable_get('wallyctools_default_redacblocks', array());
  $did = $tid_did_mapping[$tid]['did'];
  
  $default_redacblock = NULL;
  if (isset($default_redacblocks[$did]['default_redacblock']) && !empty($default_redacblocks[$did]['default_redacblock'])) {
    $default_redacblock = $default_redacblocks[$did]['default_redacblock'];
  } else {
    $hierarchies_array = wallyctools_get_hierarchies();
    if (isset($hierarchies_array[$tid]['redacblocks']) && !empty($hierarchies_array[$tid]['redacblocks'])) {
      $first_redacblock = array_shift($hierarchies_array[$tid]['redacblocks']);
      $default_redacblock = $first_redacblock['name'];
    }
  }
  
  return $default_redacblock;
}

/**
 * Helper function that provide informations about mappings between destinations terms,
 * variant that handle that term and the redacblock available on that variant and the layout associated with the views binded to the redacblock.
 * This function return the strucutre of the redactional content
 *
 * @return an array where term are key and the hierarchical structure of the redactional content.
 */
function wallyctools_get_hierarchies() {
  static $tid_did_mapping = array();
  if (empty($tid_did_mapping)) {
    $dest_vid = variable_get('wallymport_destinationpath', 0);
    $depth = 0;

    $tid_did_mapping = wallyctools_get_term_handler_mapping($dest_vid, $depth);
    $array_of_redacblock_panes = wallyctools_get_redacblock_panes();
    $default_redacblocks = wally_variable_get('wallyctools_default_redacblocks', array());

    foreach($tid_did_mapping as $tid => $did_infos) {
      $tid_did_mapping[$tid]['redacblocks'] = $temp_mapping = array();

      foreach($array_of_redacblock_panes as $pane) {
        if($did_infos['did'] == $pane->did) {
          if (isset($default_redacblocks[$pane->did]) && ($pane->subtype == $default_redacblocks[$pane->did]['default_redacblock'])) {
            $tid_did_mapping[$tid]['redacblocks'][$pane->name]['title'] = $pane->admin_title;
            $tid_did_mapping[$tid]['redacblocks'][$pane->name]['name'] = $pane->name;
            $tid_did_mapping[$tid]['redacblocks'][$pane->name]['layouts'][$pane->layout_id] = array('name' => $pane->layout_id);
          } else {
            $temp_mapping[$pane->name]['title'] = $pane->admin_title;
            $temp_mapping[$pane->name]['name'] = $pane->name;
            $temp_mapping[$pane->name]['layouts'][$pane->layout_id] = array('name' => $pane->layout_id);
          }
        }
      }

      $tid_did_mapping[$tid]['redacblocks'] = array_merge($tid_did_mapping[$tid]['redacblocks'], $temp_mapping);

      $tid_did_mapping[$tid]['redacblocks']['none'] = array(
        'title' => 'none',
        'name' => t('none'),
        'layouts' => array('none' => array('name' => t('none'))),
      );
    }
  }

  return $tid_did_mapping;
}

/**
 * Helper function that give the variant associated with all terms passed as argument  .
 * @param: $terms
 *   an array of terms object
 * @param: $depth
 *   depth to take into account default = 0
 * @return an array where term are key and the handler of the variant for this term
 */
function wallyctools_get_term_handler_mapping($vid, $depth, $reset = FALSE) {
  $tid_did_mapping = array();

  if ($reset) {
    // Force rebuild
    $tid_did_mapping = wallyctools_build_term_handler_mapping($vid, $depth, $reset);
  } else {
    $cached_datas = cache_get('wallyctools_term_handler_mapping_'.$vid.'_'.$depth, 'cache');
    if (!is_object($cached_datas) || !isset($cached_datas) || empty($cached_datas) || !$cached_datas->data) {
      // There is no cache for this page, rebuild it
      $tid_did_mapping = wallyctools_build_term_handler_mapping($vid, $depth);
    } else {
      // Cache present
      $tid_did_mapping = $cached_datas->data;
    }
  }

  return $tid_did_mapping;
}

function wallyctools_build_term_handler_mapping($vid, $depth, $reset = FALSE) {
  $tid_did_mapping = array();
  
  $current_count = db_fetch_array(db_query("SELECT COUNT(tid) FROM {wallyctools_term_handler_mapping} WHERE vid = %d AND depth = %d", $vid, $depth));

  if ($reset || ($current_count['COUNT(tid)'] == 0)) {
    // Completely rebuild the datas, also in DB

    db_query("DELETE FROM {wallyctools_term_handler_mapping} WHERE vid = %d AND depth = %d", $vid, $depth);
    
    $temp_terms = taxonomy_get_tree($vid);
    $terms = array();
    foreach($temp_terms as $term) {
      $terms[$term->tid] = $term;
    }

    foreach($terms as $term) {
      $count_parents = 0;
      wallytoolbox_taxonomy_count_parents($count_parents, $terms, $term);

      $handler = wallyctools_get_active_handler($term->tid, $depth);
      $tid_did_mapping[$term->tid] = array(
        'name' => $handler->name,
        'did' => $handler->conf['did'],
        'title' => $handler->conf['title'],
        'term_name' => $term->name,
        'hierarchic_name' => str_repeat('-', $count_parents).$term->name,
      );

      $datas = array(
        'tid' => $term->tid,
        'vid' => $vid,
        'depth' => $depth,
        'mapping' => $tid_did_mapping[$term->tid],
      );
      drupal_write_record('wallyctools_term_handler_mapping', $datas);
    }
  } else {
    // Rebuild the datas from the DB

    $db_datas = db_query("SELECT * FROM {wallyctools_term_handler_mapping} WHERE vid = %d AND depth = %d", $vid, $depth);
    while ($obj = db_fetch_object($db_datas)) {
      $tid_did_mapping[$obj->tid] = unserialize($obj->mapping);
    }
  }
  
  cache_set('wallyctools_term_handler_mapping_'.$vid.'_'.$depth, $tid_did_mapping, 'cache');
  
  return $tid_did_mapping;
}

/**
 * Helper function that give the active handler for a given tid  .
 * @param: $term_tid
 *   an array of terms object
 * @param: $depth
 *   depth to take into account default = 0
 * @return the active handler
 */
function wallyctools_get_active_handler($term_tid, $depth) {
  $task = page_manager_get_task('term_view');
  ctools_include('context');
  ctools_include('context-task-handler');

  $contexts = ctools_context_handler_get_task_contexts($task, '', array($term_tid, $depth));
  $handlers = page_manager_load_sorted_handlers($task, NULL, TRUE);
  foreach ($handlers as $handler) {
    //add my contexts
    $contexts = ctools_context_handler_get_handler_contexts($contexts, $handler);

    //Test if a handler match the context (ie: the term)
    if (ctools_context_handler_select($handler, $contexts)) {
      return $handler;
    }
  }

  //No Handlers match
  return NULL;
}

/**
 * Helper function that give the redackblock content pane used on CTools page  .
 *
 * @return an array of all redacblocks
 */
function wallyctools_get_redacblock_panes(){
  $array_of_panes=array();

  $sql = "Select name, view_name, view_id, admin_title FROM {wallyctools}";
  $results = db_query($sql);

  while($result=db_fetch_object($results)){
    $redacblocks[$result->name]=$result;
  }

  $handlers=wallytoolbox_get_handlers(FALSE, 'term_view');

  $term_view_handlers=$handlers['term_view'];
  foreach ($term_view_handlers as $term_view_handler){
    if($term_view_handler->type=='redacblock'){
      if(in_array($term_view_handler->subtype, array_keys($redacblocks))){
        $temp_result = $redacblocks[$term_view_handler->subtype];
        $temp_result->did=$term_view_handler->did;
        $temp_result->subtype=$term_view_handler->subtype;
        $temp_result=(array) $temp_result;

        $view = views_get_view($redacblocks[$term_view_handler->subtype]->view_name);
        $view->set_display($redacblocks[$term_view_handler->subtype]->view_id);
        $layouts=$view->display[$redacblocks[$term_view_handler->subtype]->view_id]->display_options['redacblock_layout'];

        if(is_array($layouts)){
          foreach ($layouts as $layout) {
            if($layout){
              $temp_result['layout_id'] = $layout;
              $array_of_panes[]=(object)$temp_result;
            }
          }
        }
      }
    }
  }

  return $array_of_panes;
}

function wallyctools_theme() {
  $path = drupal_get_path('module', 'wallyctools');
  $base = array(
    'file' => 'theme.inc',
    'path' => "$path/theme",
  );

  return array(
    'wallyctools_form_reorder_destination_form' => $base + array(
      'arguments' => array('form' => array()),
    ),
    'wallyctools_form_default_target_form' => $base + array(
      'arguments' => array('form' => array()),
    ),
  );
}

function wallyctools_theme_registry_alter(&$registry) {
  $registry['node']['preprocess functions'][] = 'wallyctools_preprocess_node_custo';
}

function wallyctools_redacblock_load($name){
  ctools_include('export');
  $result = ctools_export_crud_load('wallyctools', $name);;
  if (isset($result)) {
    return $result;
  }
}

function wallyctools_redacblock_save(&$myobj) {
  return ctools_export_crud_save('wallyctools', $myobj);
}

function wallyctools_initial_setup(){
  ctools_include('export');

  //This is the DB crud user ctools_export_load_object instead who search in 'IN CODE' object
  $view=views_get_view('default_destination_view');
  $view->save();

  $content = ctools_export_load_object('wallyctools', 'names', array('default_destination_block'));
  ctools_export_crud_save('wallyctools', $content['default_destination_block']);

  //Special treatement for pages cuz they include several object better reliable to use the "API"
  module_load_include('inc', 'page_manager', 'page_manager.admin');
  $page=page_manager_cache_load('term_view');
  foreach($page->handler_info as $key=>$value){
    $page->handler_info[$key]['changed'] = PAGE_MANAGER_CHANGED_CACHED;
  }
  page_manager_save_page_cache($page);
}

/**
 * Prepare a view to be used in a redacblock.
 * 
 * This also allow other modules to get node results just like a redacblock would get.
 */
function wallyctools_prepare_view_for_redacblock(&$view, $view_id, $redacblock_name, $args, $conf) {
  $success = FALSE;
  if ($view != NULL){
    $view_name = $view->name;
    $view->set_display($view_id);
  
    $options = array(
      'operator' => 'in',
      'value' => array($redacblock_name),
      'group' => '0',
      'exposed' => FALSE,
      'expose' => array(
        'operator' => FALSE,
        'label' => '',
      ),
      'relationship' => 'none',
    );
  
    $view->add_item($view_id, 'filter', 'node_data_field_destinations', 'field_destinations_target', $options);
    $view->is_cacheable = FALSE;
    //init handler should be placed after add_item !!!
    $view->init_handlers();
  
    if (empty($view) || !is_object($view) || empty($view->display_handler)) {
      return FALSE;
    }
  
    if (!$view->display_handler->access($GLOBALS['user'])) {
      return FALSE;
    }
  
    $view->set_arguments($args);
  
    if ($conf['url']) {
      $view->override_path = $conf['url'];
    }
  
    if (!empty($conf['more_link'])) {
      $view->display_handler->set_option('use_more', FALSE);
    }
  
    // Only set use_pager if they differ, this way we can avoid overwriting the
    // pager type that Views uses.
    if ($conf['override_pager_settings']) {
      if (method_exists($view, 'init_pager')) {
        // Views 3 version
        $view->set_items_per_page($conf['nodes_per_page']);
        $view->set_offset($conf['offset']);
  
        $pager = $view->display_handler->get_option('pager');
        if ($conf['use_pager'] && ($pager['type'] == 'none' || $pager['type'] == 'some')) {
          $pager['type'] = 'full';
        }
        elseif (!$conf['use_pager'] && $pager['type'] != 'none' && $pager['type'] != 'some') {
          $pager['type'] = $view->get_items_per_page() ? 'some' : 'none';
        }
  
        if ($conf['use_pager']) {
          if (!isset($pager['options']['id']) || $pager['options']['id'] != $conf['pager_id']) {
            $pager['options']['id'] = $conf['pager_id'];
          }
        }
        $view->display_handler->set_option('pager', $pager);
        $view->pager = $pager;
      }
      else {
        if (!$view->display_handler->get_option('use_pager') || empty($conf['use_pager'])) {
          $view->display_handler->set_option('use_pager', $conf['use_pager']);
          $view->set_use_pager(TRUE);
        }
        if(isset($_GET['page'])){
          $page = (int) $_GET['page'];
        }
        else{
          $page = 0;
        }
  
        $view->display_handler->set_option('pager_element', $conf['pager_id']);
        $view->set_pager_element($conf['pager_id']);
        $view->display_handler->set_option('items_per_page', $conf['nodes_per_page']);
        $view->set_items_per_page($conf['nodes_per_page']);
        $view->display_handler->set_option('offset', $conf['offset']);
        $view->set_offset($conf['offset'] + $page*$conf['nodes_per_page']);
        $view->pager['total_items_per_page'] = $conf['total_nodes_per_page'];
        $view->pager['items_per_page'] = $conf['total_nodes_per_page'];
      }
    }
    $success = TRUE;
  }
  return $success;
}

/**
 * Get a view from the database or from default views.
 *
 * This function is just a static wrapper around views::load(). This function
 * isn't called 'views_load()' primarily because it might get a view
 * from the default views which aren't technically loaded from the database.
 *
 * @param $name
 *   The name of the view.
 * @param $reset
 *   If TRUE, reset this entry in the load cache.
 * @return $view
 *   A reference to the $view object. Use $reset if you're sure you want
 *   a fresh one.
 */
function wallyctools_get_redac_view($name, $reset = FALSE) {
  views_include('view');
  $view = redac_view::load($name, $reset);
  $default_view = views_get_default_view($name);

  if (empty($view) && empty($default_view)) {
    return;
  }
  elseif (empty($view) && !empty($default_view)) {
    $status = variable_get('views_defaults', array());
    if (isset($status[$default_view->name])) {
      $default_view->disabled = $status[$default_view->name];
    }
    $default_view->type = t('Default');
    return $default_view->clone_view();
  }
  elseif (!empty($view) && !empty($default_view)) {
    $view->type = t('Overridden');
  }

  return $view->clone_view();
}