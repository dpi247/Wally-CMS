<?php
// $Id: wallyctools.module,v 1.1.2.2 2010/07/23 21:47:20 merlinofchaos Exp $

/**
 * @file
 * wallyctools module
 *
 * This module allows styles to be created and managed on behalf of modules
 * that implement styles.
 *
 * The wallyctools tool allows recolorable styles to be created via a miniature
 * scripting language. Panels utilizes this to allow administrators to add
 * styles directly to any panel display.
 */

/*
 * Implementation du hook menu
 */
function wallyctools_menu() {
  $items = array();
  
  $base = array(
    'access arguments' => array('reorder destination views'),
    'file' => 'includes/wallyctools.reorder.inc',
  );
  
  $items['admin/wally/wallyctools'] = $base + array(
    'title'                         => t('Reorder and manipulate'),
    'description'                   => t('Reorder destinations and apply some modifications to nodes in destinations'),
    'page callback'                 => 'wallyctools_page_reorder_destination',
  );

  $items['admin/wally/wallyctools-operations'] = $base + array(
    'title'                         => t('Reorder and manipulate'),
    'description'                   => t('Reorder destinations and apply some modifications to nodes in destinations'),
    'page callback'                 => 'wallyctools_page_reorder_destination',
    'page arguments'                => array(),
    'type'                          => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/wally/wallyctools-operations/reorder/%/%/%'] = $base + array(
    'title'                         => t('Reorder'),
    'page callback'                 => 'wallyctools_page_reorder_destination',
    'page arguments'                => array(4, 5, 6),
    'type'                          => MENU_LOCAL_TASK,
    'weight'                        => 0,
  );
  
  $items['admin/wally/wallyctools-operations/batchoperations/%/%/%'] = $base + array(
    'title'                         => t('Batch operations'),
    'page callback'                 => 'wallyctools_page_destination_batch_operations',
    'page arguments'                => array(4, 5, 6),
    'type'                          => MENU_LOCAL_TASK,
    'weight'                        => 1,
  );

  return $items;
}

/**
 * A theme preprocess function to automatically allow view-based node
 * templates if called from a view.
 *
 * The 'modules/node.views.inc' file is a better place for this, but
 * we haven't got a chance to load that file before Drupal builds the
 * node portion of the theme registry.
 */
function wallyctools_preprocess_node(&$vars) {
  if (isset($vars['node']->node_view_destination)) {
    $taxonomy_term = taxonomy_get_term($vars['node']->node_view_destination);
    $taxonomy_term_name = strtolower($taxonomy_term->name);
     
    // The 'view' attribute of the node is added in template_preprocess_views_view_row_node()
    if (!empty($vars['node']->node_view_layout) && !empty($vars['node']->view->name)) {
      $vars['view'] = &$vars['node']->view;

      $vars['template_files'][] = 'node-view-' . $vars['node']->node_view_layout;
      $vars['template_files'][] = 'node-view-' . $taxonomy_term_name.'-'.$vars['node']->node_view_layout;

      $vars['template_files'][] = 'node-view-' . $vars['node']->view->name.'-'.$vars['node']->node_view_layout;
      $vars['template_files'][] = 'node-view-' . $vars['node']->view->name.'-'.$taxonomy_term_name.'-'.$vars['node']->node_view_layout;

      if(!empty($vars['node']->view->current_display)) {
        $vars['template_files'][] = 'node-view-' . $vars['node']->view->name . '-' . $vars['node']->view->current_display.'-'.$vars['node']->node_view_layout;
        $vars['template_files'][] = 'node-view-' . $vars['node']->view->name . '-' . $vars['node']->view->current_display.'-'.$taxonomy_term_name.'-'.$vars['node']->node_view_layout;
      }
    }
  }
}

/**
 * Implementation of hook_perm()
 */
function wallyctools_perm() {
  return array(
    'administer wallyctools',
    'reorder destination views'
  );
}

function wallyctools_ctools_plugin_api($owner, $api) {
  if ($owner == 'wallyctools' && $api == 'wallyctools_redacblock') {
    return array('version' => 1);
  }
  if ($owner == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function wallyctools_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Create callback for creating a new CTools custom content type.
 *
 * This ensures we get proper defaults from the plugin for its settings.
 */
function wallyctools_content_type_new($set_defaults) {
  $item = ctools_export_new_object('wallyctools', $set_defaults);
  ctools_include('content');
  $plugin = ctools_get_content_type('redacblock');
  $item->settings = ctools_content_get_defaults($plugin, array());
  return $item;
}

/**
 * Implementation of hook_panels_dashboard_blocks().
 *
 * Adds page information to the Panels dashboard.
 */
function wallyctools_panels_dashboard_blocks(&$vars) {
  $vars['links']['wallyctools'] = array(
    'title' => l(t('Redactional Block'), 'admin/build/wallyctools/add'),
    'description' => t('Custom content panes are basic HTML you enter that can be reused in all of your panels.'),
  );

  // Load all mini panels and their displays.
  ctools_include('export');
  $items = ctools_export_crud_load_all('wallyctools');
  $count = 0;
  $rows = array();

  foreach ($items as $item) {
    $rows[] = array(
      check_plain($item->admin_title),
      array(
        'data' => l(t('Edit'), "admin/build/wallyctools/list/$item->name/edit"),
        'class' => 'links',
      ),
    );

    // Only show 10.
    if (++$count >= 10) {
      break;
    }
  }

  if ($rows) {
    $content = theme('table', array(), $rows, array('class' => 'panels-manage'));
  }
  else {
    $content = '<p>' . t('There are no redactional Blocks.') . '</p>';
  }

  $vars['blocks']['wallyctools'] = array(
    'title' => t('Manage Redactional Block'),
    'link' => l(t('Go to list'), 'admin/build/wallyctools'),
    'content' => $content,
    'class' => 'dashboard-content',
    'section' => 'right',
  );
}

/**
 * Implementation of hook_views_api().
 *
 * This one is used as the base to reduce errors when updating.
 */
function wallyctools_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'wallyctools') . '/plugins/views',
  );
}
//-----------------------------------------------

function wallyctools_api_getlayoutfromdestinationandtarget($node,$destination,$target){
  foreach($node->field_destinations as $destination_item){
    if($destination_item['tid']==$destination and $destination_item['target']==$target){
      return $destination_item['layout'];
    }
  }
  return NULL;
}
//-----------

function wallyctools_content_get_subtypes($type) {
  $subtypes = array();

  if (is_array($type)) {
    $plugin = $type;
  }
  else {
    $plugin = ctools_get_content_type($type);
  }

  if (empty($plugin) || empty($plugin['name'])) {
    return;
  }

  if (isset($plugin['content types'])) {
    $function = $plugin['content types'];
    if (is_array($function)) {
      $subtypes = $function;
    }
    else if (function_exists($function)) {
      // Cast to array to prevent errors from non-array returns.
      $subtypes = (array) $function($plugin);
    }
  }

  // Walk through the subtypes and ensure minimal settings are
  // retained.
  foreach ($subtypes as $id => $subtype) {
    // Use exact name since this is a modify by reference.
    ctools_content_prepare_subtype($subtypes[$id], $plugin);
  }

  return $subtypes;
}

function wallyctools_get_redac_view_array(){
  $display_plugin='redacblock';
  $query="SELECT vv.name, vv.vid, vd.display_plugin,vd.id, vd.display_title  FROM {views_display}  AS vd LEFT JOIN {views_view} AS  vv ON vv.vid=vd.vid WHERE display_plugin='%s'";
  $results=db_query($query,$display_plugin);

  $array=array();
  while($result=db_fetch_object($results)){
    $array[]=$result;
  }
  return $array;
}

function wallyctools_get_redac_view_options(){
  $options=array();
  $views=wallyctools_get_redac_view_array() ;
  foreach($views as $view){
    $options[$view->name.'+'.$view->id]=$view->name.'-'.$view->display_title.' ('.$view->id.')';
  }
  return $options;
}

function wallyctools_get_view_info_from_redacblock ($redacblock) {
  return db_fetch_array(db_query('SELECT view_name, view_id FROM {wallyctools} WHERE name = "%s"', $redacblock));
}

/**
 * Helper function that provide informations about mappings between destinations terms,
 * variant that handle that term and the redacblock available on that variant and the layout associated with the views binded to the redacblock.
 * This function return the strucutre of the redactional content
 *
 * @return an array where term are key and the hierarchical structure of the redactional content.
 */
function wallyctools_get_hierarchies(){
  $terms=taxonomy_get_tree(variable_get('wallymport_destinationpath', 0));
  $depth=0;
  $tid_did_mapping=wallyctools_get_term_handler_mapping($terms,$depth);
  $array_of_redacblock_panes=wallyctools_get_redacblock_panes();

  foreach($tid_did_mapping as $tid=>$did_infos){
    $tid_did_mapping[$tid]['redacblocks']=array();

    foreach($array_of_redacblock_panes as $pane){
      if($did_infos['did']==$pane->did){
        $tid_did_mapping[$tid]['redacblocks'][$pane->name]['title']=$pane->admin_title;
        $tid_did_mapping[$tid]['redacblocks'][$pane->name]['name']=$pane->name;
        $tid_did_mapping[$tid]['redacblocks'][$pane->name]['layouts'][$pane->layout_id]=array('name'=>$pane->layout_id);
      }
    }
  }
  return $tid_did_mapping;
}

/**
 * Helper function that give the variant associated with all terms passed as argument  .
 * @param: $terms
 *   an array of terms object
 * @param: $depth
 *   depth to take into account default = 0
 * @return an array where term are key and the handler of the variant for this term
 */
function wallyctools_get_term_handler_mapping($terms,$depth){
  $tid_did_mapping = array();
  foreach($terms as $term){
    $term_parents = array_filter($term->parents);

    $handler = wallyctools_get_active_handler($term->tid,$depth);
    $tid_did_mapping[$term->tid] = array(
      'name' => $handler->name,
      'did' => $handler->conf['did'],
      'title' => $handler->conf['title'],
      'term_name' => $term->name,
      'hierarchic_name' => str_repeat('-', count($term_parents)).$term->name,
    );
  }
  return $tid_did_mapping;
}
/**
 * Helper function that give the active handler for a given tid  .
 * @param: $term_tid
 *   an array of terms object
 * @param: $depth
 *   depth to take into account default = 0
 * @return the active handler
 */
function wallyctools_get_active_handler($term_tid,$depth){
  $task=page_manager_get_task('term_view');
  ctools_include('context');
  ctools_include('context-task-handler');

  $contexts=ctools_context_handler_get_task_contexts($task,'',array($term_tid,$depth));

  $handlers= page_manager_load_sorted_handlers($task,NULL,TRUE);
  foreach($handlers as $handler){
    //add my contexts
    $contexts= ctools_context_handler_get_handler_contexts($contexts, $handler);

    //Test if a handler match the context (ie: the term)
    if(ctools_context_handler_select($handler, $contexts)){
      return $handler;
    }
  }
  //No Handlers match
  return NULL;
}

/**
 * Helper function that give the redackblock content pane used on CTools page  .
 *
 * @return an array of all redacblocks
 */
function wallyctools_get_redacblock_panes(){
  $array_of_panes=array();

  $sql="Select name, view_name, view_id, admin_title FROM {wallyctools} ";
  $results=(db_query($sql));

  while($result=db_fetch_object($results)){
    $redacblocks[$result->name]=$result;
  }
  list($panels,$handlers)=wallytoolbox_get_panels_and_handlers();

  $term_view_handlers=$handlers['term_view'];
  foreach ($term_view_handlers as $term_view_handler){
    if($term_view_handler->type=='redacblock'){
      if(in_array($term_view_handler->subtype, array_keys($redacblocks))){
        $temp_result = $redacblocks[$term_view_handler->subtype];
        $temp_result->did=$term_view_handler->did;
        $temp_result->subtype=$term_view_handler->subtype;
        $temp_result=(array) $temp_result;

        $view = views_get_view($redacblocks[$term_view_handler->subtype]->view_name);
        $view->set_display($redacblocks[$term_view_handler->subtype]->view_id);
        $layouts=$view->display[$redacblocks[$term_view_handler->subtype]->view_id]->display_options['redacblock_layout'];

        if(is_array($layouts)){
          foreach ($layouts as $layout) {
            if($layout){
              $temp_result['layout_id'] = $layout;
              $array_of_panes[]=(object)$temp_result;
            }
          }
        }
      }
    }
  }
  return $array_of_panes;
}

function wallyctools_theme() {
  $path = drupal_get_path('module', 'wallyctools');
  $base = array(
    'file' => 'theme.inc',
    'path' => "$path/theme",
  );

  require_once "./$path/theme/theme.inc";
  return array(
    'wallyctools_form_reorder_destination_form' => $base + array(
      'arguments' => array('form' => array()),
    ),
  );
}

function wallyctools_redacblock_load($name){
  ctools_include('export');
  $result = ctools_export_crud_load('wallyctools', $name);;
  if (isset($result)) {
    return $result;
  }
}

function wallyctools_redacblock_save(&$myobj) {
  return ctools_export_crud_save('wallyctools', $myobj);
}

function wallyctools_initial_setup(){
  ctools_include('export');

  //This is the DB crud user ctools_export_load_object instead who search in 'IN CODE' object
  $view=views_get_view('default_destination_view');
  $view->save();

  $content = ctools_export_load_object('wallyctools', 'names', array('default_destination_block'));
  ctools_export_crud_save('wallyctools', $content['default_destination_block']);

  //Special treatement for pages cuz they include several object better reliable to use the "API"
  module_load_include('inc', 'page_manager', 'page_manager.admin');
  $page=page_manager_cache_load('term_view');
  foreach($page->handler_info as $key=>$value){
    $page->handler_info[$key]['changed'] = PAGE_MANAGER_CHANGED_CACHED;
  }
  page_manager_save_page_cache($page);
}
