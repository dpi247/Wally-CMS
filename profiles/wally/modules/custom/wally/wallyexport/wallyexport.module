<?php

/**
 * Implementation of hook_menu().
 */
function wallyexport_menu() {
  $items = array();
  
  $items['admin/wally/wallyexport/settings'] = array(
    'title' => 'Wally Export Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyexport_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to set paramaters for this module to function properly.',
    'file' => 'includes/wallyexport.admin.inc',
  );
  
  $items['admin/wally/wallyexport/export'] = array(
    'title' => 'Export packages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyexport_page_export_form'),
    'access arguments' => array('access administration pages'),
    'description' => 'Export packages to zipped xml files.',
    'file' => 'includes/wallyexport.admin.inc',
  );
  
  return $items;
}

function wallyexport_export_packages($nids) {
  $return = array();
  
  $files = drupal_system_listing('.*\.zip$', '', 'name', 0);
  foreach ($files as $file) {
    file_delete($file->filename);
  }
  
  foreach ($nids as $nid) {
    $package_object = node_load($nid);
    wallycontenttypes_packagepopulate($package_object, '');
    $zip_name = 'Wally_'.$package_object->nid;
    $package_dom_and_images = _wallyexport_createvaliddomfrompackage($package_object, $zip_name);
    if ($package_dom_and_images) {
      $package_dom = $package_dom_and_images[0];
      $files_to_zip = $package_dom_and_images[1];
      $return[] = _wallyexport_createzipfromdom($package_dom, $package_object->nid, $zip_name, $files_to_zip);
    }
  }
  
  return $return;
}

/**
 * Build a dom document based on an array. The array is given by the
 * package_populate function.
 * 
 * @param $package_array
 *   The package given by package_populate.
 * 
 * @return
 *   The dom document and a list of images to add to the zip file.
 * 
 * @see package_populate function
 */
function _wallyexport_createvaliddomfrompackage($package_object, $zip_name) {
  $valid_dom = new DomDocument('1.0', 'UTF-8');
  $packages = $valid_dom->appendChild($valid_dom->createElement('Packages'));
  $packages->setAttribute('xmlns', 'http://rossel.audaxis.com');

  switch ($package_object->type) {
    case 'wally_articlepackage' :
      $package_type = 'ArticlePackageType';
      break;
    case 'wally_gallerypackage' :
      $package_type = 'GalleryPackageType';
      break;
    default :
      return FALSE;
  }
  
  $files_to_zip = array();

  $package = $packages->appendChild($valid_dom->createElement('Package'));
  $package->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', $package_type);
  _wallyexport_fillPackageType($valid_dom, $package, $package_object, $files_to_zip);
  
  switch ($package_type) {
    case 'ArticlePackageType' :
      $mainStory = $package->appendChild($valid_dom->createElement('MainStory'));
      $pack_mainstory = $package_object->field_mainstory_nodes[0];
      $mainStory->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'TextObjectType');
      $mainStory->setAttribute('ObjectID', $pack_mainstory->field_objectid[0]['value']);
      $mainStory->setAttribute('ObjectDescription', $pack_mainstory->field_objectdescription[0]['value']);
      $mainStory->setAttribute('PublicationDate', $package_object->field_publicationdate[0]['value']);
      $mainStory->setAttribute('CreationDate', date('Y-m-d', $pack_mainstory->created).'T'.date('H:i:s', $pack_mainstory->created));
      $mainStory->setAttribute('LastUpdateDate', date('Y-m-d', $pack_mainstory->changed).'T'.date('H:i:s', $pack_mainstory->changed));
      $mainStory->appendChild($valid_dom->createElement('Title', $pack_mainstory->field_objecttitle[0]['value']));
      $mainStory->appendChild($valid_dom->createElement('ExternalReference', $pack_mainstory->field_externalreference[0]['value']));
      $marker = $mainStory->appendChild($valid_dom->createElement('Markers'));
      _wallyexport_createlocationtypes($valid_dom, $marker, $pack_mainstory->field_markers);
      $locations = $mainStory->appendChild($valid_dom->createElement('Locations'));
      _wallyexport_createlocationtypes($valid_dom, $locations, $pack_mainstory->field_locations_nodes);
      $taxonomy = $mainStory->appendChild($valid_dom->createElement('Taxonomy'));
      _wallyexport_createVocItems($valid_dom, $taxonomy, $pack_mainstory->taxonomy);
      $entities =  $mainStory->appendChild($valid_dom->createElement('Entities'));
      _wallyexport_createEntitiesType($valid_dom, $entities, $pack_mainstory->field_entities_nodes);
      $persons = $mainStory->appendChild($valid_dom->createElement('Persons'));
      _wallyexport_createPersonsType($valid_dom, $persons, $pack_mainstory->field_persons_nodes);
      $authors = $mainStory->appendChild($valid_dom->createElement('Authors'));
      _wallyexport_createPersonsType($valid_dom, $authors, $pack_mainstory->field_authors_nodes);
      $mainStory->appendChild($valid_dom->createElement('Copyright', $pack_mainstory->field_copyright[0]['value']));
      $mainStory->appendChild($valid_dom->createElement('EmbeddedObjectsOrder', 0));
      $text_barette = $mainStory->appendChild($valid_dom->createElement('TextBarette', ''));
      $text_barette->appendChild($valid_dom->createCDATASection($pack_mainstory->field_textbarette[0]['value']));
      $text_foretitle = $mainStory->appendChild($valid_dom->createElement('TextForeTitle', ''));
      $text_foretitle->appendChild($valid_dom->createCDATASection($pack_mainstory->field_textforetitle[0]['value']));
      $text_title = $mainStory->appendChild($valid_dom->createElement('TextTitle', ''));
      $text_title->appendChild($valid_dom->createCDATASection($pack_mainstory->title));
      $text_subtitle = $mainStory->appendChild($valid_dom->createElement('TextSubTitle', ''));
      $text_subtitle->appendChild($valid_dom->createCDATASection($pack_mainstory->field_textsubtitle[0]['value']));
      $text_chapo = $mainStory->appendChild($valid_dom->createElement('TextChapo', ''));
      $text_chapo->appendChild($valid_dom->createCDATASection($pack_mainstory->field_textchapo[0]['value']));
      $text_body = $mainStory->appendChild($valid_dom->createElement('TextBody', ''));
      $text_body->appendChild($valid_dom->createCDATASection($pack_mainstory->field_textbody[0]['value']));
      $text_extmed = $mainStory->appendChild($valid_dom->createElement('ExtractMedium', ''));
      $text_extmed->appendChild($valid_dom->createCDATASection($pack_mainstory->field_extractmedium[0]['value']));
      $text_extshort = $mainStory->appendChild($valid_dom->createElement('ExtractShort', ''));
      $text_extshort->appendChild($valid_dom->createCDATASection($pack_mainstory->field_extractshort[0]['value']));

        
      break;
    case 'GalleryPackageType' :
      $mainObject = $package->appendChild($valid_dom->createElement('MainObject'));
      //_wallyexport_createdomimg($valid_dom, $mainObject, $package_object, $package_object->field_mainobject_nodes[0], $imgs_to_zip);
      _wallyexport_createembed($valid_dom, $mainObject, $package_object->field_mainobject_nodes[0], 0, $files_to_zip);
      //if(!empty($package_object->field_embededobjects_nodes)){
        //$emobject = $emcontent->appendChild($valid_dom->createElement('EmbeddedObjects'));
        //_wallyexport_createembed($valid_dom, $emobject, $package_object->field_embededobjects_nodes);
      //}
      break;
      
      
  }
  
  $emcontent = $package->appendChild($valid_dom->createElement('EmbeddedContent'));
  if(!empty($package_object->field_embededobjects_nodes)){
    
    $emobject = $emcontent->appendChild($valid_dom->createElement('EmbeddedObjects'));
    foreach($package_object->field_embededobjects_nodes as $delta=>$elem){//field = package_object->field_embededobjects_nodes
      $obj = $emobject->appendChild($valid_dom->createElement('Object'));
      _wallyexport_createembed($valid_dom, $obj, $elem, $delta, $files_to_zip);
    }
  }
  if(!empty($package_object->field_linkedobjects_nodes)){
    $lnlsobject = $emcontent->appendChild($valid_dom->createElement('LinksLists'));
    _wallyexport_createLinksLists($valid_dom, $lnlsobject, $package_object->field_linkedobjects_nodes);
  }

 /* if (!empty($package_object->field_embededobjects_nodes)) {
    $embeddedContent = $package->appendChild($valid_dom->createElement('EmbeddedContent'));
    $embeddedObjects = $embeddedContent->appendChild($valid_dom->createElement('EmbeddedObjects'));
    foreach($package_object->field_embededobjects_nodes as $embeded_object) {
      if ($embeded_object->type == 'wally_photoobject') {
        $object = $embeddedObjects->appendChild($valid_dom->createElement('Object'));
        _wallyexport_createdomimg($valid_dom, $object, $package_object, $embeded_object, $imgs_to_zip);
      }
    }
  }*/
  
  $return = array();
  $return[] = $valid_dom;
  $return[] = $files_to_zip;
  return $return;
}

function _wallyexport_fillPackageType(&$valid_dom, &$package, $package_object, &$files_to_zip){
  $package->setAttribute('PackageID', $package_object->field_packageid[0]['value']);
  $package->setAttribute('PublicationDate', $package_object->field_publicationdate[0]['value']);
  $package->setAttribute('CreationDate', date('Y-m-d', $package_object->created).'T'.date('H:i:s', $package_object->created));
  $package->setAttribute('LastUpdateDate', date('Y-m-d', $package_object->changed).'T'.date('H:i:s', $package_object->changed));  
  $package->setAttribute('EmbargoDate', str_replace(' ', 'T', $package_object->field_embargodatetime[0]['value']));
  if(!empty($package_object->field_unpublishdate[0]['value'])){
    $package->setAttribute('UnPublishDate', $package_object->field_unpublishdate[0]['value']);
  }
  $package->setAttribute('Language', $package_object->language);
  //!!!Temporary dirtyworkaround because a package looses its title for some reason, seems independant of this module.
  $package_onload = node_load($package_object->nid);
  //!!!
  $package->appendChild($valid_dom->createElement('PackageTitle', $package_onload->title));
  
  $package->appendChild($valid_dom->createElement('PackageDescription', $package_object->field_objectdescription[0]['value']));
  $package->appendChild($valid_dom->createElement('InternalReference', 'Drupal_NID:'.$package_object->nid));
  $package->appendChild($valid_dom->createElement('ExternalReference', $package_object->field_externalreference[0]['value'] ? $package_object->field_externalreference[0]['value'] : 'Wally_'.$package_object->nid));
  $package->appendChild($valid_dom->createElement('ProductID', $package_object->field_productid[0]['value']));
  $destinations = $package->appendChild($valid_dom->createElement('Destinations'));
  $editions = $package->appendChild($valid_dom->createElement('Editions'));
  $chans = $package->appendChild($valid_dom->createElement('Channels'));
  switch($package_object->comment){
    case 0:
      $allowComments = 'Disabled';
      break;
    case 1:
      $allowComments = 'Read Only';
      break;
    default :
      $allowComments = 'Read-Write';
    }
  $package->appendChild($valid_dom->createElement('CommentsAllowed', $allowComments));
  $package->appendChild($valid_dom->createElement('FreeAccess', ($package_object->field_freeaccess[0]['value'] == 'Yes') ? 'true' : 'false'));
  $package->appendChild($valid_dom->createElement('AutoPublish', ($package_object->status == 1) ? 'true' : 'false'));
  $authors = $package->appendChild($valid_dom->createElement('Authors'));
  _wallyexport_createPersonsType($valid_dom, $authors, $package_object->field_authors_nodes);
  $package->appendChild($valid_dom->createElement('PackageLayout', $package_object->field_packagelayout[0]['value']));
  $package->appendChild($valid_dom->createElement('Summary', $package_object->field_summary[0]['value']));
  //$package->appendChild($valid_dom->createElement('ExternalURI', $package_object->field_externaluri[0]['value']));
  foreach ($package_object->field_destinations as $pack_dest) {
    $destination = $destinations->appendChild($valid_dom->createElement('Destination'));
    $destination->appendChild($valid_dom->createElement('DestinationPath', wallytoolbox_taxonomy_get_path_by_tid_or_term($pack_dest['tid'])));
    $destination->setAttribute('DestinationRank', $pack_dest['rank']);
    $destination->setAttribute('Position', $pack_dest['target']);
    $destination->setAttribute('DocumentLayout', $pack_dest['layout']);
  }
  
  $edition = $editions->appendChild($valid_dom->createElement('Edition', 'true'));
  $edition->setAttribute('EditionID', $package_object->field_editions[0]['value']);
  
  $chan = $chans->appendChild($valid_dom->createElement('Channel'));
  $chan->setAttribute('Name', $package_object->field_channels[0]['value']);
  
  
}

function _wallyexport_createLinksLists(&$valid_dom, &$object, $field){
  foreach($field as $elem){
    $lnls = $object->appendChild($valid_dom->createElement('LinksList'));
    $lnls->appendChild($valid_dom->createElement('InternalReference', 'Drupal_NID:'.$elem->nid));
    $lnls->appendChild($valid_dom->createElement('ExternalReference', $elem->field_externalreference[0]['value']));
    $lnls->appendChild($valid_dom->createElement('Title', $elem->title));
    $lnls->appendChild($valid_dom->createElement('Summary', $elem->field_summary[0]['value']));
    $lns = $lnls->appendChild($valid_dom->createElement('Links'));
    _wallyexport_createLinksList($valid_dom, $lns, $elem->field_links_list_nodes);
  }
}

function _wallyexport_createLinksList(&$valid_dom, &$object, $field){
  foreach($field as $elem){
    $ln = $object->appendChild($valid_dom->createElement('Link'));
    $ln->appendChild($valid_dom->createElement('InternalReference', $elem->field_internal_link[0]['value']));
    $ln->appendChild($valid_dom->createElement('ExternalReference', $elem->field_externalreference[0]['value']));
    $ln->appendChild($valid_dom->createElement('Title', $elem->title));
    $ln->appendChild($valid_dom->createElement('Description', $elem->field_summary[0]['value']));
    $ln->appendChild($valid_dom->createElement('URI', $elem->field_link_item[0]['url']));
  }
}

function _wallyexport_createzipfromdom($package_dom, $nid, $file_name, $files_to_zip = array()) {
  $zip = new ZipArchive;
  $res = $zip->open(variable_get('wallyexport_admin_source', 'sites/default/files/export').'/'.$file_name.'.zip', ZipArchive::CREATE);
  if ($res === TRUE) {
    $zip->addFromString($file_name.'.xml', $package_dom->saveXML());
    foreach ($files_to_zip as $file_to_zip) {
      $zip->addFile($file_to_zip['filepath'], $file_to_zip['filename']);
      
    }
    $zip->close();
    $return = 'Zip success : '.$nid;
  } else {
    $return = 'Zip failure : '.$nid;
  }
  
  return $return;
}

function _wallyexport_createEntitiesType(&$valid_dom, &$object, $field){
  foreach($field as $elem){
    if(!empty($elem->nid)){
      $entity = $object->appendChild($valid_dom->createElement('Entity'));
      $entity->appendChild($valid_dom->createElement('EntityTitle', $elem->title));
      $entity->appendChild($valid_dom->createElement('EntityDescription', $elem->field_objectdescription[0]['value']));
      $entity->appendChild($valid_dom->createElement('EntityServices', $elem->field_entityservices[0]['value']));
      $locs = $entity->appendChild($valid_dom->createElement('Locations'));
      _wallyexport_createLocationTypes($valid_dom, $locs, _wallyexport_getTaxonomyNodes($elem->field_locations, 'wally_locationtype'));
      $entity->setAttribute('EntityID', taxonomy_get_term($elem->field_entity[0]['value'])->name);
    }
  }
}

function _wallyexport_createPersonsType(&$valid_dom, &$object, $field){
  foreach($field as $elem){
    if(!empty($elem->nid)){
      $person = $object->appendChild($valid_dom->createElement('Person'));
      $person->setAttribute('PersonID', taxonomy_get_term($elem->field_persontaxonomy[0]['value'])->name);
      $person->appendChild($valid_dom->createElement('PersonName', $elem->title));
      $person->appendChild($valid_dom->createElement('PersonLastName', $elem->field_personlastname[0]['value']));
      $person->appendChild($valid_dom->createElement('PersonFirstName', $elem->field_personfirstname[0]['value']));
      $person->appendChild($valid_dom->createElement('PersonNickName', $elem->field_personnickname[0]['value']));
      $person->appendChild($valid_dom->createElement('PersonBirthDate', date('Y-m-d', strtotime($elem->field_personbirthdate[0]['value']))));
      $person->appendChild($valid_dom->createElement('PersonSex', $elem->field_personsex[0]['value']));
      $person->appendChild($valid_dom->createElement('PersonEmail', $elem->field_personemail[0]['email']));
      $person->appendChild($valid_dom->createElement('PersonWebSite', $elem->field_personwebsite[0]['url']));
      $person->appendChild($valid_dom->createElement('PersonPhoneNumber', $elem->field_phonenumber[0]['value']));
    }
  }
}

function _wallyexport_createVocItems(&$valid_dom, &$object, $field){
  $taxonomy = array();
  foreach($field as $elem){
    if($elem->vid == 6 || $elem->vid == 10){
      $taxonomy[$elem->vid][] = $elem->tid;
    }
  }
  foreach($taxonomy as $delta=>$item){
    $vocItem = $object->appendChild($valid_dom->createElement('Vocabulary'));
    $vocNode = taxonomy_vocabulary_load($delta);
    //$vocItem->setAttribute('VocabularyName', $vocNode->name);
    if($vocNode->vid==6){
      $type='free';
    }else{
      $type='categorized';
    }
    $vocItem->setAttribute('VocabularyType', $type);
    foreach($item as $elem){
      $vocItem->appendChild($valid_dom->createElement('Term', wallytoolbox_taxonomy_get_path_by_tid_or_term($elem)));
    }
  }
}

function _wallyexport_createLocationTypes(&$valid_dom, &$object, $field){
  foreach($field as $elem){
    if(!empty($elem['lid'])){
      $loc = $object->appendChild($valid_dom->createElement('Location'));
      $loc->setAttribute('LocationID', taxonomy_get_term($elem->field_locationtaxonomy[0]['value'])->name);
      $loc->appendChild($valid_dom->createElement('LocationName', $elem['name']));
      $address = $loc->appendChild($valid_dom->createElement('Address'));
      $address->appendChild($valid_dom->createElement('AddressLine', $elem['street']));
      $address->appendChild($valid_dom->createElement('AddressLine', $elem['additional']));
      $address->appendChild($valid_dom->createElement('City', $elem['city']));
      $address->appendChild($valid_dom->createElement('Zip', $elem['postal_code']));
      $address->appendChild($valid_dom->createElement('State', $elem['province']));
      $address->appendChild($valid_dom->createElement('Country', $elem['country']));
    }
  }
}

function _wallyexport_fillCropsTypes(&$valid_dom, &$object, $field){
  if (isset($field)) {
    foreach($field as $delta=>$elem){
      if(!empty($elem)){
        $crop = $object->appendChild($valid_dom->createElement('Crop'));
        $crop->setAttribute('Type', $delta);
        $crop->setAttribute('X', $elem[0]);
        $crop->setAttribute('Y', $elem[1]);
        $crop->setAttribute('H', $elem[3]);
        $crop->setAttribute('W', $elem[2]);
      }
    }
  }
}

function _wallyexport_createembed(&$valid_dom, &$obj, $elem, $delta, &$files_to_zip){
  
    $origins = array(
          'file',
          '3rdparty',);
    
    switch ($elem->type) {
    case 'wally_videoobject' :
      $type = 'video';
      $origin = (empty($elem->{'field_'.$type.$origins}[0])) ? $origins[1] : $origins[0];
      _wallyexport_createMultimediaObjectType($valid_dom, $obj, $elem, $type, $origin, $delta, $files_to_zip);
      $obj->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'VideoObjectType');
      
      if(!empty($elem->{'field_video'.$origin}[0]['duration'])){
        $obj->appendChild($valid_dom->createElement('VideoLength', $elem->{'field_video'.$origin}[0]['duration']));//both ?
      }
      $obj->appendChild($valid_dom->createElement('LinkTitle', $elem->field_link[0]['title']));
      $obj->appendChild($valid_dom->createElement('LinkURI', $elem->field_link[0]['url']));
      break;
    case 'wally_photoobject' :
      $type = 'photo';
      $origin = (empty($elem->{'field_'.$type.$origins}[0])) ? $origins[1] : $origins[0];
      _wallyexport_createMultimediaObjectType($valid_dom, $obj, $elem, $type, $origin, $delta, $files_to_zip);
      $obj->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'PhotoObjectType');
      $crops = $obj->appendChild($valid_dom->createElement('Crops'));
      _wallyexport_fillCropsTypes($valid_dom, $crops, json_decode($elem->field_croping[0]['value'], TRUE));
      $obj->appendChild($valid_dom->createElement('LinkTitle', $elem->field_link[0]['title']));
      $obj->appendChild($valid_dom->createElement('LinkURI', $elem->field_link[0]['url']));
      break;
    case 'wally_audioobject' :
      $type = 'audio';
      $origin = (empty($elem->{'field_'.$type.$origins}[0])) ? $origins[1] : $origins[0];
      _wallyexport_createMultimediaObjectType($valid_dom, $obj, $elem, $type, $origin, $delta, $files_to_zip);
      $obj->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'AudioObjectType');
      $obj->appendChild($valid_dom->createElement('AudioLength', $elem->{'field_audio'.$origin}[0]['duration']));//both ?
      $obj->appendChild($valid_dom->createElement('LinkTitle', $elem->field_link[0]['title']));
      $obj->appendChild($valid_dom->createElement('LinkURI', $elem->field_link[0]['url']));
      break;  
    case 'wally_digitalobject' :
      $type = 'object';
      $origin = (empty($elem->{'field_'.$type.$origins}[0])) ? $origins[1] : $origins[0];
      $obj->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'MultimediaObjectType');
      _wallyexport_createMultimediaObjectType($valid_dom, $obj, $elem, $type, $origin, $delta, $files_to_zip); 
      break;  
    case 'wally_textobject' :
      _wallyexport_createObjectType(&$valid_dom, &$obj, $elem, $delta);
      $obj->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'TextObjectType');
      $text_barette = $obj->appendChild($valid_dom->createElement('TextBarette', ''));
      $text_barette->appendChild($valid_dom->createCDATASection($elem->field_textbarette[0]['value']));
      $text_foretitle = $obj->appendChild($valid_dom->createElement('TextForeTitle', ''));
      $text_foretitle->appendChild($valid_dom->createCDATASection($elem->field_textforetitle[0]['value']));
      $text_title = $obj->appendChild($valid_dom->createElement('TextTitle', ''));
      $text_title->appendChild($valid_dom->createCDATASection($elem->title));
      $text_subtitle = $obj->appendChild($valid_dom->createElement('TextSubTitle', ''));
      $text_subtitle->appendChild($valid_dom->createCDATASection($elem->field_textsubtitle[0]['value']));
      $text_chapo = $obj->appendChild($valid_dom->createElement('TextChapo', ''));
      $text_chapo->appendChild($valid_dom->createCDATASection($elem->field_textchapo[0]['value']));
      $text_body = $obj->appendChild($valid_dom->createElement('TextBody', ''));
      $text_body->appendChild($valid_dom->createCDATASection($elem->field_textbody[0]['value']));
      $text_extmed = $obj->appendChild($valid_dom->createElement('ExtractMedium', ''));
      $text_extmed->appendChild($valid_dom->createCDATASection($elem->field_extractmedium[0]['value']));
      $text_extshort = $obj->appendChild($valid_dom->createElement('ExtractShort', ''));
      $text_extshort->appendChild($valid_dom->createCDATASection($elem->field_extractshort[0]['value']));
    default :
      return FALSE;
    }
    
  
}



function _wallyexport_createMultimediaObjectType(&$valid_dom, &$obj, $elem, $type, $origin, $delta, &$files_to_zip){
  //MultimediaObjectType Start
  _wallyexport_createObjectType(&$valid_dom, &$obj, $elem, $delta);
  $obj->appendChild($valid_dom->createElement('Summary', $elem->field_summary[0]['value']));
  if(!empty($elem->{'field_'.$type.'file'}[0])){
    $fileURI = _wallyexport_getURI($elem->{'field_'.$type.'file'}[0]); 
    $obj->appendChild($valid_dom->createElement('Caption', $elem->{'field_'.$type.'file'}[0]['data']['description']));//ul
    $xmlfileURI = $obj->appendChild($valid_dom->createElement('FileURI', ''));
    $xmlfileURI->appendChild($valid_dom->createCDATASection($fileURI));
    $obj->appendChild($valid_dom->createElement('FileSize', $elem->{'field_'.$type.'file'}[0]['filesize']));//ul
    $obj->setAttribute('MimeType', $elem->{'field_'.$type.'file'}[0]['filemime']);//ul
    $files_to_zip[] = $elem->{'field_'.$type.'file'}[0];
  }else{
    $fileURI = $elem->{'field_'.$type.'3rdparty'}[0]['embed'];
    $xmlfileURI = $obj->appendChild($valid_dom->createElement('FileURI', ''));
    $xmlfileURI->appendChild($valid_dom->createCDATASection($fileURI));
  }
  
  
  
  if(!empty($elem->field_thumbnail[0])){
  $thumb = $obj->appendChild($valid_dom->createElement('Thumbnail'));
  $thumb->setAttribute('URI', _wallyexport_getURI($elem->field_thumbnail[0]));
  $thumb->setAttribute('Type',$elem->field_thumbnail[0]['filemime']);
  $thumb->setAttribute('Title',$elem->field_thumbnail[0]['data']['title']);
  //$thumb->setAttribute('W',);
  //$thumb->setAttribute('H',);
  $files_to_zip[] = $elem->field_thumbnail[0];
  }
  if(!empty($elem->field_rating[0]['value'])){
    $rating=taxonomy_get_term($elem->field_rating[0]['value'])->name;
  }else{
    $rating = 'G';
  }
  $obj->appendChild($valid_dom->createElement('Rating', $rating));
  
  //MultimediaObjectType End
  
}

function _wallyexport_getTaxonomyNodes($field = array(), $type){
  $tids = array();
  if($field[0]['value']!=NULL){
    foreach($field as $elem){
      $tids[] = $elem['value'];  
    }
  }
  return wallytoolbox_taxonomy_get_nodes($tids, 'or', 0, FALSE, $type);
}

function _wallyexport_createObjectType(&$valid_dom, &$obj, $elem, $delta){
  //ObjectType Start
  $obj->setAttribute('ObjectID', $elem->field_objectid[0]['value']);
  $obj->setAttribute('ObjectDescription', $elem->field_objectdescription[0]['value']);
  $obj->setAttribute('CreationDate', date('Y-m-d', $elem->created).'T'.date('H:i:s', $elem->created));
  $obj->setAttribute('LastUpdateDate', date('Y-m-d', $elem->changed).'T'.date('H:i:s', $elem->changed));
  $obj->appendChild($valid_dom->createElement('Title', $elem->title));
  $obj->appendChild($valid_dom->createElement('InternalReference', 'Drupal_NID:'.$elem->nid));
  $obj->appendChild($valid_dom->createElement('ExternalReference', $elem->field_externalreference[0]['value']));
  $marker = $obj->appendChild($valid_dom->createElement('Markers'));   
  _wallyexport_createlocationtypes($valid_dom, $marker, $elem->field_markers);
  $locations = $obj->appendChild($valid_dom->createElement('Locations'));
  _wallyexport_createlocationtypes($valid_dom, $locations, _wallyexport_getTaxonomyNodes($elem->field_locations, 'wally_locationtype'));
  $taxonomy = $obj->appendChild($valid_dom->createElement('Taxonomy'));
  _wallyexport_createVocItems($valid_dom, $taxonomy, $elem->taxonomy);
  $entities = $obj->appendChild($valid_dom->createElement('Entities'));
  _wallyexport_createEntitiesType($valid_dom, $entities, _wallyexport_getTaxonomyNodes($elem->field_entities, 'wally_entitytype'));
  $persons = $obj->appendChild($valid_dom->createElement('Persons'));
  _wallyexport_createPersonsType($valid_dom, $persons, _wallyexport_getTaxonomyNodes($elem->field_persons, 'wally_persontype'));
  $authors = $obj->appendChild($valid_dom->createElement('Authors'));
  _wallyexport_createPersonsType($valid_dom, $authors, _wallyexport_getTaxonomyNodes($elem->field_authors, 'wally_persontype'));
  $obj->appendChild($valid_dom->createElement('Copyright', $elem->field_copyright[0]['value']));
  $obj->appendChild($valid_dom->createElement('EmbeddedObjectsOrder', $delta));
  //ObjectType End
}
  /*
   * $info is the array containing the filename & filepath fields
   */ 
function _wallyexport_getURI($infos){
  if(substr($infos['filepath'], 0, 7)=='http://'){
    return $infos['filepath'];
  }else{
    return 'embed://'.$infos['filename'];
  }
}  
/*
function _wallyexport_createdomimg(&$valid_dom, &$object, $package_object, $embeded_object, &$files_to_zip) {
  $object->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'PhotoObjectType');
  $object->setAttribute('ObjectID', $embeded_object->field_objectid[0]['value']);
  $object->setAttribute('PublicationDate', $package_object->field_publicationdate[0]['value']);
  $object->setAttribute('CreationDate', date('Y-m-d', $embeded_object->created).'T'.date('H:i:s', $embeded_object->created));
  $object->setAttribute('MimeType', $embeded_object->field_photofile[0]['filemime']);
  $object->appendChild($valid_dom->createElement('Title', $embeded_object->title));
  $object_elements = array(
    'ExternalReference',
    'Copyright',
    'Summary',
  );
  foreach ($object_elements as $object_element) {
    $low_name = 'field_'.strtolower($object_element);
    $object_array = $embeded_object->$low_name;
    $object->appendChild($valid_dom->createElement($object_element, $object_array[0]['value']));
  }
  $object->appendChild($valid_dom->createElement('FileURI', 'embed://'.$embeded_object->field_photofile[0]['filename']));
  $object->appendChild($valid_dom->createElement('FileSize', $embeded_object->field_photofile[0]['filesize']));
  $object_elements = array(
    'Rating',
  );
  foreach ($object_elements as $object_element) {
    $low_name = 'field_'.strtolower($object_element);
    $object_array = $embeded_object->$low_name;
    $object->appendChild($valid_dom->createElement($object_element, 'G'));
  }
  
  $imgs_to_zip[] = $embeded_object->field_photofile[0];
}
*/
