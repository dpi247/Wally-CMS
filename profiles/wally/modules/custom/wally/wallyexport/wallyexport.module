<?php

/**
 * Implementation of hook_menu().
 */
function wallyexport_menu() {
  $items = array();
  
  $items['admin/wally/wallyexport/settings'] = array(
    'title' => 'Wally Export Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyexport_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to set paramaters for this module to function properly.',
    'file' => 'includes/wallyexport.admin.inc',
  );
  
  $items['admin/wally/wallyexport/export'] = array(
    'title' => 'Export packages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyexport_page_export_form'),
    'access arguments' => array('access administration pages'),
    'description' => 'Export packages to zipped xml files.',
    'file' => 'includes/wallyexport.admin.inc',
  );
  
  return $items;
}

function wallyexport_export_packages($nids) {
  $return = array();
  
  foreach ($nids as $nid) {
    $package_object = node_load($nid);
    wallycontenttypes_packagepopulate($package_object, '');
    $zip_name = 'exported_'.$package_object->nid.'_'.$package_object->field_externalreference[0]['value'].'_'.rand();
    $package_dom_and_images = _wallyexport_createvaliddomfrompackage($package_object, $zip_name);
    print_r($package_dom_and_images[0]);
    print '+++++++++++';
    print_r($package_dom_and_images[1]);
    $package_dom = $package_dom_and_images[0];
    $imgs_to_zip = $package_dom_and_images[1];
    $return[] = _wallyexport_createzipfromdom($package_dom, $package_object->nid, $zip_name, $imgs_to_zip);
  }
  
  return $return;
}

/**
 * Build a dom document based on an array. The array is given by the
 * package_populate function.
 * 
 * @param $package_array
 *   The package given by package_populate.
 * 
 * @return
 *   The dom document and a list of images to add to the zip file.
 * 
 * @see package_populate function
 */
function _wallyexport_createvaliddomfrompackage($package_object, $zip_name) {
  $valid_dom = new DomDocument('1.0', 'UTF-8');
  $packages = $valid_dom->appendChild($valid_dom->createElement('Packages'));
  $packages->setAttribute('xmlns', 'http://rossel.audaxis.com');

  switch ($package_object->type) {
    case 'wally_articlepackage' :
      $package_type = 'ArticlePackageType';
      break;
    default :
      return $valid_dom;
  }

  $package = $packages->appendChild($valid_dom->createElement('Package'));
  $package->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', $package_type);
  $package->setAttribute('PackageID', $package_object->field_packageid[0]['value']);
  $package->setAttribute('PublicationDate', $package_object->field_publicationdate[0]['value']);
  $package->setAttribute('CreationDate', date('Y-m-d', $package_object->created).'T'.date('H:i:s', $package_object->created));
  $package->setAttribute('EmbargoDate', str_replace(' ', 'T', $package_object->field_embargodatetime[0]['value']));
  $package->setAttribute('Language', $package_object->language);
  $package->appendChild($valid_dom->createElement('PackageTitle', $package_object->title));
  $package->appendChild($valid_dom->createElement('ExternalReference', $package_object->field_externalreference[0]['value']));
  $package->appendChild($valid_dom->createElement('ProductID', $package_object->field_productid[0]['value']));
  $destinations = $package->appendChild($valid_dom->createElement('Destinations'));
  $editions = $package->appendChild($valid_dom->createElement('Editions'));
  $chans = $package->appendChild($valid_dom->createElement('Channels'));
  $package->appendChild($valid_dom->createElement('PackageLayout', $package_object->field_packagelayout[0]['value']));
  $package->appendChild($valid_dom->createElement('Summary', $package_object->field_summary[0]['value']));
  $package->appendChild($valid_dom->createElement('ExternalURI', $package_object->field_externaluri[0]['value']));
  $mainStory = $package->appendChild($valid_dom->createElement('MainStory'));
  
  foreach ($package_object->field_destinations as $pack_dest) {
    $destination = $destinations->appendChild($valid_dom->createElement('Destination'));
    $destination->appendChild($valid_dom->createElement('DestinationPath', wallytoolbox_taxonomy_get_path_by_tid_or_term($pack_dest['tid'])));
    $destination->setAttribute('DestinationRank', $pack_dest['rank']);
    $destination->setAttribute('Position', $pack_dest['target']);
    $destination->setAttribute('DocumentLayout', $pack_dest['layout']);
  }
  
  $edition = $editions->appendChild($valid_dom->createElement('Edition', 'true'));
  $edition->setAttribute('EditionID', $package_object->field_editions[0]['value']);
  
  $chan = $chans->appendChild($valid_dom->createElement('Channel'));
  $chan->setAttribute('Name', $package_object->field_channels[0]['value']);
  
  $pack_mainstory = $package_object->field_mainstory_nodes[0];
  $mainStory->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'TextObjectType');
  $mainStory->setAttribute('ObjectID', $pack_mainstory->field_objectid[0]['value']);
  $mainStory->setAttribute('PublicationDate', $package_object->field_publicationdate[0]['value']);
  $mainStory->setAttribute('CreationDate', date('Y-m-d', $pack_mainstory->field_created).'T'.date('H:i:s', $pack_mainstory->field_created));
  $mainStory->appendChild($valid_dom->createElement('Title', $pack_mainstory->field_objecttitle[0]['value']));
  $mainStory->appendChild($valid_dom->createElement('ExternalReference', $pack_mainstory->field_externalreference[0]['value']));
  $mainStory->appendChild($valid_dom->createElement('Copyright', $pack_mainstory->field_copyright[0]['value']));
  $mainStory->appendChild($valid_dom->createElement('TextTitle', $pack_mainstory->title));
  $mainStory->appendChild($valid_dom->createElement('TextBody', $pack_mainstory->field_textbody[0]['value']));

  $imgs_to_zip = array();
  if (!empty($package_object->field_embededobjects_nodes)) {
    $embeddedContent = $package->appendChild($valid_dom->createElement('EmbeddedContent'));
    $embeddedObjects = $embeddedContent->appendChild($valid_dom->createElement('EmbeddedObjects'));
    foreach($package_object->field_embededobjects_nodes as $embeded_object) {
      if ($embeded_object->type == 'wally_photoobject') {
        $object = $embeddedObjects->appendChild($valid_dom->createElement('Object'));
        $object->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'PhotoObjectType');
        $object->setAttribute('ObjectID', $embeded_object->field_objectid[0]['value']);
        $object->setAttribute('PublicationDate', $package_object->field_publicationdate[0]['value']);
        $object->setAttribute('CreationDate', date('Y-m-d', $embeded_object->created).'T'.date('H:i:s', $embeded_object->created));
        $object->setAttribute('MimeType', $embeded_object->field_photofile[0]['filemime']);
        $object->appendChild($valid_dom->createElement('Title', $embeded_object->title));
        $object_elements = array(
          'ExternalReference',
          'Copyright',
          'Summary',
        );
        foreach ($object_elements as $object_element) {
          $low_name = 'field_'.strtolower($object_element);
          $object_array = $embeded_object->$low_name;
          $object->appendChild($valid_dom->createElement($object_element, $object_array[0]['value']));
        }
        $object->appendChild($valid_dom->createElement('FileURI', 'embed://'.$embeded_object->field_photofile[0]['filename']));
        $object->appendChild($valid_dom->createElement('FileSize', $embeded_object->field_photofile[0]['filesize']));
        $object_elements = array(
          'Rating',
        );
        foreach ($object_elements as $object_element) {
          $low_name = 'field_'.strtolower($object_element);
          $object_array = $embeded_object->$low_name;
          $object->appendChild($valid_dom->createElement($object_element, 'G'));
        }
        
        $imgs_to_zip[] = $embeded_object->field_photofile[0];
      }
    }
  }
  
  $return = array();
  $return[] = $valid_dom;
  $return[] = $imgs_to_zip;
  return $return;
}

function _wallyexport_createzipfromdom($package_dom, $nid, $file_name, $imgs_to_zip = array()) {
  $zip = new ZipArchive;
  $res = $zip->open(variable_get('wallyexport_admin_source', 'sites/default/files/export').'/'.$file_name.'.zip', ZipArchive::CREATE);
  if ($res === TRUE) {
    $zip->addFromString($file_name.'.xml', $package_dom->saveXML());
    foreach ($imgs_to_zip as $img_to_zip) {
      $zip->addFile($img_to_zip['filepath'], $img_to_zip['filename']);
    }
    $zip->close();
    $return = 'Zip success : '.$nid;
  } else {
    $return = 'Zip failure : '.$nid;
  }
  
  return $return;
}
