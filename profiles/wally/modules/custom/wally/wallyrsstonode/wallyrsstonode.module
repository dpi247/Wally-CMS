<?php
/**
 * @defgroup wallymport Wally Import Core Functions
 * @{
 * In this module we define core functions of wally RSS to node module.  
 * Do not put field specific functions or generic helpers functions here. 
 */

/**
 * Implementation of hook_menu().
 */
function wallyrsstonode_menu() {
  $items = array();
  $items['admin/wally/wallyrsstonode'] = array(
    'title' => 'Wally RSS to node Feeds',
    'page callback' => 'wallyrsstonode_page_admin',
    'page arguments' => array('wallyrsstonode_page_admin'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to set paramaters for this module to function properly.',
    'file' => 'includes/wallyrsstonode.admin.inc',
  );
  
  $items['admin/wally/wallyrsstonode/runcron'] = array(
    'title' => 'Run RSS feed cron',
    'page callback' => 'wallyrsstonode_cron_run',
    'page arguments' => array('wallyrsstonode_cron_run'),
    'access arguments' => array('access administration pages'),
    'description' => 'Run RSS feed cron.',
  );

  return $items;
}

/*
function wallyrsstonode_form_alter(&$form, $form_state, $form_id) {
  $form['#after_build'][] = 'wallyrsstonode_after_build';
}

function wallyrsstonode_after_build($form, &$form_state) {
  dsm($form);
  return $form;
}
*/

/**
 * Executes the RSS to node cron run when called.
 * 
 * @return
 *   Returns TRUE if ran successfully.
 */
function wallyrsstonode_cron_run() {
  // Try to allocate enough time to run all the hook_cronrsstonode implementations.
  if (function_exists('set_time_limit')) {
    @set_time_limit(60);
  }

  // Fetch the cron semaphore
  //$semaphore = variable_get('cronrsstonode_semaphore', FALSE);
  $semaphore=null;

  if ($semaphore) {
    if (time() - $semaphore > 3600) {
      // Either cron has been running for more than an hour or the semaphore
      // was not reset due to a database error.
      watchdog('Cron RSS to node', 'Cron has been running for more than an hour and is most likely stuck.', array(), WATCHDOG_ERROR);

      // Release cron semaphore
      variable_del('cronrsstonode_semaphore');
    } else {
      // Cron is still running normally.
      watchdog('Cron RSS to node', 'Attempting to re-run cron while it is already running.', array(), WATCHDOG_WARNING);
    }

    // Return FALSE and set error message;
    drupal_set_message('The cron didn\'t run successfully because the semaphore wasn\'t free.', "error");
    return FALSE;
  } else {
    // Register shutdown callback
    register_shutdown_function('wallyrsstonode_cron_cleanup');

    // Lock cron semaphore
    variable_set('cronrsstonode_semaphore', time());

    // Call the function calling the RSS feeds
    $return = _wallyrsstonode_callallfeeds();

    // Record cron time
    variable_set('cronrsstonode_last', time());
    watchdog('Cron RSS to node', 'Cron run completed.', array(), WATCHDOG_NOTICE);

    // Release cron semaphore
    variable_del('cronrsstonode_semaphore');

    // Redirect to admin page if success
    drupal_goto('admin/wally/wallyrsstonode/');
  }
}

/**
 * Shutdown function for RSS to node cron cleanup.
 */
function wallyrsstonode_cron_cleanup() {
  // See if the semaphore is still locked.
  if (variable_get('cron_semaphore', FALSE)) {
    watchdog('cron', 'Cron run exceeded the time limit and was aborted.', array(), WATCHDOG_WARNING);

    // Release cron semaphore
    variable_del('cron_semaphore');
  }
}

function _wallyrsstonode_callallfeeds() {
  // exec("crontab *.dat");
  
  $db_results = db_query("SELECT * FROM `rsstonode_feeds`");
  $feeds_infos = array();
  while ($feed_infos = db_fetch_array($db_results)) {
    $feeds_infos[] = $feed_infos;
  }
  
  $xsd_file = variable_get('wallymport_definition', 'definitions/yaxim.input.xsd');
  $log=array();
  $return = array();
  foreach ($feeds_infos as $feed_infos) {
    $feed_xml = drupal_http_request($feed_infos['uri']);
    if ($feed_xml) {
      $valid_dom_and_channel_last_build = _wallyrsstonode_createvaliddomfromfeed($feed_xml, $feed_infos);
      $valid_dom = $valid_dom_and_channel_last_build[0];
      $channel_last_build = $valid_dom_and_channel_last_build[1];
      
      $tempFile = variable_get('wallymport_temp','').'/'.$feed_infos['rss_key'].'-'.$channel_last_build.'.tmp';
      $valid_dom->save($tempFile);
      $temp_return = wallymport_page_process_file($tempFile);
      exec('rm '.$tempFile);
      
      if ($temp_return) {
        $object = array();
        $object = $feed_infos;
        $object['last_build'] = $channel_last_build;
        drupal_write_record('rsstonode_feeds', $object, array('rss_key'));
      }
      
      $return[] = $temp_return;
    }
  }
  
  return $return;
}

/**
 * Build a dom document based on an array. The array is given by the
 * rss_item_to_array function of wallytoolbox.
 * 
 * @param $feed_xml
 *   The entire feed obtain by drupal_http_request.
 * @param $feed_infos
 *   The informations relative to this feed as stocked in de DB.
 * 
 * @return
 *   The dom document and the new build date of this feed.
 * 
 * @todo
 *   Replace default values by real values in the valid_dom
 * @todo
 *   Save the image field into the db if a default image exists.
 */
function _wallyrsstonode_createvaliddomfromfeed($feed_xml, $feed_infos) {  
  $dom = new DomDocument();
  $dom->LoadXML($feed_xml->data);
  $valid_dom = new DomDocument('1.0', 'UTF-8');
  $packages = $valid_dom->appendChild($valid_dom->createElement('Packages'));
  $packages->setAttribute('xmlns', 'http://rossel.audaxis.com');
  
  $channels = $dom->getElementsByTagName('channel');
  if ($channels->item(0)) {
    $feed_destination = explode('/', $feed_infos['destination']);
    $sql_last_build = $feed_infos['last_build'];
    $feed_name = check_plain($feed_infos['name']);
    $channel_last_build = DateTime::createFromFormat('D, d M Y H:i:s O', _wallyrsstonode_checkifelementexists($channels->item(0), 'lastBuildDate'));
    $channel_last_build = gmmktime($channel_last_build->format('H'),$channel_last_build->format('i'),$channel_last_build->format('s'),$channel_last_build->format('n'),$channel_last_build->format('j'),$channel_last_build->format('Y'));
    
    if ($channel_last_build > $sql_last_build) {
      foreach ($channels->item(0)->getElementsByTagName('item') as $item) {
        $array_valid_dom = wallytoolbox_rss_item_to_array($channels->item(0), $item, $feed_infos);

        $package = $packages->appendChild($valid_dom->createElement('Package'));
        $package->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'ArticlePackageType');
        $package->setAttribute('PackageID', $array_valid_dom['Package']['PackageID']);
        $package->setAttribute('PublicationDate', $array_valid_dom['Package']['PublicationDate']);
        $package->setAttribute('CreationDate', $array_valid_dom['Package']['CreationDate']);
        $package->setAttribute('EmbargoDate', $array_valid_dom['Package']['EmbargoDate']);
        $package->setAttribute('Language', $array_valid_dom['Package']['Language']);
        $package->appendChild($valid_dom->createElement('PackageTitle', $array_valid_dom['Package']['PackageTitle']['value']));
        $package->appendChild($valid_dom->createElement('ExternalReference', $array_valid_dom['Package']['ExternalReference']['value']));
        $package->appendChild($valid_dom->createElement('ProductID', $array_valid_dom['Package']['ProductID']['value']));
        $destinations = $package->appendChild($valid_dom->createElement('Destinations'));
        $editions = $package->appendChild($valid_dom->createElement('Editions'));
        $chans = $package->appendChild($valid_dom->createElement('Channels'));
        $package->appendChild($valid_dom->createElement('PackageLayout', $feed_infos['package_layout']));
        $package->appendChild($valid_dom->createElement('Summary', $array_valid_dom['Package']['Summary']['value']));
        $package->appendChild($valid_dom->createElement('ExternalURI', $array_valid_dom['Package']['ExternalURI']['value']));
        $mainStory = $package->appendChild($valid_dom->createElement('MainStory'));
        
        $destination = $destinations->appendChild($valid_dom->createElement('Destination'));
        $destination->appendChild($valid_dom->createElement('DestinationPath', $array_valid_dom['Package']['Destinations']['Destination']['DestinationPath']['value']));
        $destination->setAttribute('DestinationRank', $array_valid_dom['Package']['Destinations']['Destination']['DestinationRank']);
        $destination->setAttribute('Position', $array_valid_dom['Package']['Destinations']['Destination']['Position']);
        $destination->setAttribute('DocumentLayout', $array_valid_dom['Package']['Destinations']['Destination']['DocumentLayout']);
        
        $edition = $editions->appendChild($valid_dom->createElement('Edition', $array_valid_dom['Package']['Editions']['Edition']['value']));
        $edition->setAttribute('EditionID', $array_valid_dom['Package']['Editions']['Edition']['EditionID']);
        
        $chan = $chans->appendChild($valid_dom->createElement('Channel'));
        $chan->setAttribute('Name', $array_valid_dom['Package']['Channels']['Channel']['Name']);
        
        $mainStory->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'TextObjectType');
        $mainStory->setAttribute('ObjectID', $array_valid_dom['Package']['MainStory']['ObjectID']);
        $mainStory->setAttribute('PublicationDate', $array_valid_dom['Package']['MainStory']['PublicationDate']);
        $mainStory->setAttribute('CreationDate', $array_valid_dom['Package']['MainStory']['CreationDate']);
        $mainStory->appendChild($valid_dom->createElement('Title', $array_valid_dom['Package']['MainStory']['Title']['value']));
        $mainStory->appendChild($valid_dom->createElement('ExternalReference', $array_valid_dom['Package']['MainStory']['ExternalReference']['value']));
        $taxonomy = $mainStory->appendChild($valid_dom->createElement('Taxonomy'));
        $vocabulary = $taxonomy->appendChild($valid_dom->createElement('Vocabulary'));
        $vocabulary->setAttribute('VocabularyName', $array_valid_dom['Package']['MainStory']['Taxonomy']['Vocabulary']['VocabularyName']);
        $vocabulary->setAttribute('VocabularyType', $array_valid_dom['Package']['MainStory']['Taxonomy']['Vocabulary']['VocabularyType']);
        foreach ($array_valid_dom['Package']['MainStory']['Taxonomy']['Vocabulary']['Term'] as $term) {
            $vocabulary->appendChild($valid_dom->createElement('Term', $term));
        }
        $mainStory->appendChild($valid_dom->createElement('Copyright', $array_valid_dom['Package']['MainStory']['Copyright']['value']));
        $mainStory->appendChild($valid_dom->createElement('TextTitle', $array_valid_dom['Package']['MainStory']['TextTitle']['value']));
        $mainStory->appendChild($valid_dom->createElement('TextBody', $array_valid_dom['Package']['MainStory']['TextBody']['value']));

        if (isset($array_valid_dom['Package']['EmbeddedContent']['EmbeddedObjects']['Object'])) {
          $embeddedContent = $package->appendChild($valid_dom->createElement('EmbeddedContent'));
          $embeddedObjects = $embeddedContent->appendChild($valid_dom->createElement('EmbeddedObjects'));
          foreach($array_valid_dom['Package']['EmbeddedContent']['EmbeddedObjects']['Object'] as $item_object) {
            $object = $embeddedObjects->appendChild($valid_dom->createElement('Object'));
            $object->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsi:type', 'PhotoObjectType');
            $object->setAttribute('ObjectID', $item_object['ObjectID']);
            $object->setAttribute('PublicationDate', $item_object['PublicationDate']);
            $object->setAttribute('CreationDate', $item_object['CreationDate']);
            if (isset($item_object['MimeType'])) $object->setAttribute('MimeType', $item_object['MimeType']);
            $object->appendChild($valid_dom->createElement('Title', $item_object['Title']['value']));
            $object->appendChild($valid_dom->createElement('ExternalReference', $item_object['ExternalReference']['value']));
            if (isset($item_object['Copyright']['value'])) $object->appendChild($valid_dom->createElement('Copyright', $item_object['Copyrighty']['value']));
            if (isset($item_object['Summary']['value'])) $object->appendChild($valid_dom->createElement('Summary', $item_object['Summary']['value']));
            $object->appendChild($valid_dom->createElement('FileURI', $item_object['FileURI']['value']));
            $object->appendChild($valid_dom->createElement('FileSize', $item_object['FileSize']['value']));
            if (isset($item_object['ThumbNail'])) {
              $thumbnail = $object->appendChild($valid_dom->createElement('Thumbnail'));
              $thumbnail->setAttribute('URI', $item_object['ThumbNail']['URI']);
              if (isset($item_object['ThumbNail']['W'])) $thumbnail->setAttribute('W', $item_object['ThumbNail']['W']);
              if (isset($item_object['ThumbNail']['H'])) $thumbnail->setAttribute('H', $item_object['ThumbNail']['H']);
            }
            if (isset($item_object['Rating'])) $object->appendChild($valid_dom->createElement('Rating', $item_object['Rating']['value']));
          }
        }
      }
    } else {
      drupal_set_message('The feed '.check_plain($feed_infos['name']).' wasn\'t rebuild since last run.', "notice");
    }
  }
  
  $return = array();
  $return[] = $valid_dom;
  $return[] = $channel_last_build;
  return $return;
}

/**
 * Search an item for a desired element.
 * 
 * @param $dom_item
 *   The item in which the search is performed.
 * @param $name
 *   The name of the searched element.
 * 
 * @return
 *   The element value or ''.
 */
function _wallyrsstonode_checkifelementexists($dom_item, $name) {
  $return = $dom_item->getElementsByTagName($name)->item(0) ? $dom_item->getElementsByTagName($name)->item(0)->firstChild->wholeText : '';
  return check_plain($return);
}

/**
 * @} End of "defgroup wallymport_process_default".
 */
