<?php

/*
 * 
 * 
 * 
 */
function _wimprthelp_getfieldnamefromvocabularyname($name){
  $result_set = NULL;
  switch ($name){
    case 'Tags' : $result_set = 'field_free_tags';break;
    case 'Concepts' : $result_set = 'field_concepts';break;
    case 'IPTC' : $result_set = 'field_iptc';break;
  }
  return $result_set;
}

function _wimprthelp_getTaxonomyVidFromDamName($damname){
  $vid = NULL;
  switch ($damname){
    case 'Tags'      : $vid = variable_get('wallymport_freetagtaxonomy', NULL);break;
    case 'Concepts'   : $vid = variable_get('wallymport_concept', NULL);break;
    case 'IPTC'      : $vid = variable_get('wallymport_iptc', NULL);break;
    case 'Persons'   : $vid = variable_get('wallymport_person', NULL);break;
    case 'Authors'   : $vid = variable_get('wallymport_author', NULL);break;
    case 'Entities'  : $vid = variable_get('wallymport_entity', NULL);break;
    case 'Locations' : $vid = variable_get('wallymport_location', NULL);break;
  }
  return $vid;
}

function _wimprthelp_array_to_ccklocation($location) {
  $node = array();

  // Get all country list from location module
  $countries = location_get_iso3166_list();

  // Is it an existant location - get the LID?
  if (isset($location["lid"])) {
	$node['lid'] = $location["lid"];
  } 

  if ($location["name"]) {
	$node['name'] = $location["name"];
  } else {
	// TO DO FATAL :: No location NAME - crital
	drupal_set_message('No location NAME found.','error');
	return NULL; 
  }
		
  // Street lines
  if (isset($location["street"])) $node['street'] = $location["street"];
  if (isset($location["additional"])) $node['additional'] = $location["additional"];

  // City
  $node['city'] = $location["city"];

  // Province 
  if (isset($location['province_name'])) {
	if ($node['province']=location_province_code($location['country_name'],$location['province_name'])) {
      $node['province_name'] = $location['province_name'];
	} else {
	  drupal_set_message('Country PROVINCE not found for '.$location['country_name'].'/'.$location['province_name'].'.','error');
	}
  }

  // Postal Code
  $node['postal_code'] = $location["postal_code"];
	
  // Country 
  if (isset($location['country'])) {
	if (array_key_exists($location['country'],$countries)) {
	  $node['country'] = $location['country'];
	  $node['country_name'] = $countries[$location['country']];
	} else {
	  drupal_set_message('Country ISO CODE not found for '.$location['country'].'.','error');
	}
  } else {
	if (isset($location['country_name'])) {
	  if ($node['country']=array_search($location['country_name'],$countries)) {
		$node['country_name'] = $location['country_name'];
	  } else {
		drupal_set_message('Country ISO not found for '.$location['country_name'].'.','error');
	  }
	}
  }
  location_standardize_country_code($node['country']); 
    
  // Long-Lattitude
  if (isset($location["latitude"]) && isset($location["longitude"])) {
	if (is_numeric($location["latitude"]) && is_numeric($location["longitude"])) {
	  $node['latitude'] = $location["latitude"];
	  $node['longitude'] = $location["longitude"];
	  $node['locpick']["user_latitude"] = $location["latitude"];
	  $node['locpick']["user_longitude"] = $location["longitude"];
	} else {
	  drupal_set_message('longitude & Lattitude not numeric.','error');
	}
  } else {
	drupal_set_message('longitude & Lattitude not set.','error');
  }   
	
  $settings = variable_get('location_settings_node_wally_locationtype', array());
  $node['location_settings'] = $settings;

  $node['source'] = 0;
  $node['is_primary'] = 0;
  
  return (array) $node; 
		
}


/**
 * Translates datetime into CCK datetime field
 *
 * @param $date
 *   - ISO Datetime (e.g. '2010-10-26T21:32:52')
 *
 * @return
 *   CCK datetime field (array)
 */
function _wimprthelp_date_to_ccktime($date) {

  list($thedate, $thetime) = explode('T', $date);
  if (count(explode('+',$thetime)) == 2){
    list($datetime, $offset) = explode('+', $date);
    list ($offsethour, $offsetmin) = explode(':', $offset);
    $time_offset = $offsethour*3600 + $offsetmin * 60;
    $time = strtotime($datetime) - $time_offset;
  } elseif (count(explode('-',$thetime)) == 2){
    list($thetime, $offset) = explode('-', $thetime);
    $date = $thedate.'T'.$thetime;
    list ($offsethour, $offsetmin) = explode(':', $offset);
    $time_offset = $offsethour*3600 + $offsetmin * 60; 
    $time = strtotime($date) + $time_offset;
  } else {
    //We suppose the xml date is at the same offset than the site
    $timezone = new DateTimeZone(variable_get('date_default_timezone_name', 'UTC'));
    $time_offset = $timezone->getOffset(new DateTime("now")); // Offset in seconds
    $time = strtotime($date) - $time_offset;
  }

  $result['value'] = date('Y-m-d H:i:s', $time);
  $result['timezone'] = variable_get('date_default_timezone_name', 'UTC');
  $result['timezone_db'] = 'UTC';
  $result['date_type'] = 'datetime';
  return $result;
}
/**
 * Translates datetimes into CCK datetimes field for polldates (
 *
 * @param $date
 *   - ISO Datetime (e.g. '2010-10-26T21:32:52')
 *
 * @return
 *   CCK polldate field (array)
 */
function _wimprthelp_polldate_to_ccktime($date1,$date2) {
  //@todo: handle timezone

  $date1 = _wimprthelp_date_to_ccktime($date1);
  $date2 = _wimprthelp_date_to_ccktime($date2);
  $result['value'] = $date1['value'];
  $result['value2'] = $date2['value'];
  $result['timezone'] = variable_get('date_default_timezone_name', 'UTC');
  $result['timezone_db'] = 'UTC';
  $result['date_type'] = 'datetime';
  return $result;
}
/**
 * Translates datetime into timestamp
 *
 * @param $date
 *   - ISO Datetime (e.g. '2010-10-26T21:32:52')
 *
 * @return
 *   timestamp
 */
function _wimprthelp_date_to_timestamp($date) {
  
  $result = strtotime($date);
  
  return $result;
}

/**
 * return filtred html text from html text
 *
 * @param $text
 *   - An non filtred html content
 *
 * @return
 *   An filtred html content
 */
function _wimprthelp_html_text($text){
  return $text;
}

/**
 * return plain text from potential html text
 *
 * @param $text
 *   - An non filtred html content
 *
 * @return
 *   An plain text
 */
function _wimprthelp_plain_text($text){
  return $text;
}


/**
 * Return acreated drupal file object from uri. The images supported
 * formats are jpg (or jpeg), png and gif. 
 *
 * @param $file_uri
 *   - A uri to the filet
 *
 * @return
 *   A Drupal File Object
 */
function _wimprthelp_create_file_from_uri($file_uri, $new_file_path = '', $importer = NULL ){
 
  global $proceed_file_path;
  global $base_path;
  global $proceed_folder_path;
  
  if ($importer == NULL){
    $temp_folder = $proceed_folder_path;
  } else {
    $temp_folder = $importer->temp_subdir; 
  }
  
  $uri = parse_url($file_uri);
  $badcar = array("+"," ");
  $new_file_path = rtrim($new_file_path, '/');
  $new_file_path .= '/';

  switch($uri['scheme']){
    case'embed':
      // "+" sign in filename is unsupported by imagecache.
      $good_uri_host = str_replace($badcar, "_", $uri['host']);
      $file_temp_path = $temp_folder.'/'.$uri['host'];
      $file_dest_path = file_directory_path().'/'.rand().'_'.$good_uri_host;

      if (!@copy($file_temp_path, $file_dest_path)) {
        // Everything for owner, read and execute for others
        //chmod($file_dest_path, octdec("0777"));
        //drupal_set_message('Cant copy image file.'.$file_temp_path, "error");
      	watchdog('Wallymport file', "copie du fichier ".$file_temp_path." vers ".$file_dest_path." a échoué", array(), WATCHDOG_ERROR);
      } else {
        $return = _wimprthelp_create_file($file_dest_path);
        return $return;
      }
      break;

    case 'http':
      $expl_path = explode('/', $uri['path']);
      $file_name = $expl_path[count($expl_path)-1];
      $http_req = drupal_http_request($file_uri);
      if (stristr($http_req->headers['Content-Type'], 'image') || stristr($http_req->headers['Content-type'], 'image')) {
        if (stristr($file_name,'.jpg') || stristr($file_name,'.jpeg') || stristr($file_name,'.gif') || stristr($file_name,'.png')) {
          $good_file_name = str_replace($badcar, "_", $file_name);
        } elseif ($http_req->headers['Content-Disposition']) {
          $content_disp = $http_req->headers['Content-Disposition'];
          $sub_cont_disp = substr(strstr($content_disp, 'filename="'), strlen('filename="'));
          $good_file_name = str_replace($badcar, "_", substr($sub_cont_disp, 0, strlen($sub_cont_disp) - 1));
        } else {
          break;
        }
        $file_temp_dir = file_directory_path().'/'.$new_file_path;
        file_check_directory($file_temp_dir, 1);
        $file_temp_path = $file_temp_dir.'/'.md5($file_uri).'_'.$good_file_name;
        if(!@copy($file_uri, $file_temp_path)) {
          chmod($file_temp_path, octdec("0777"));
          drupal_set_message('Cant copy image file.'.$file_temp_path, "error");
        } else {
          $return = _wimprthelp_create_file($file_temp_path);
          return $return;
        }
      }
      break;
  }
  return $return;
}

function _wimprthelp_create_file($filepath){
  $uid = variable_get('wallymport_defaultuser',1);
  $file = new stdClass();
  $file->filename = basename($filepath);
  $file->filepath = $filepath;
  $file->filemime = file_get_mimetype($filepath);
  $file->filesize = filesize($filepath);
  $file->uid = $uid;
  $file->status = FILE_STATUS_PERMANENT;
  $file->timestamp = time();
  drupal_write_record('files', $file);
  $return = field_file_load($filepath);
  return $return;
}
