<?php
// $Id: yaxim.admin.inc,v 1.0 2010/08/23 14:39:00 rso Exp $

/**
 * @file
 *   Import Press Content to Drupal structure Administration
 */

/**
 * Settings form.
 */
function wallymport_page_admin_form($form_state) {
  $path = drupal_get_path('module', 'wallymport');
  $form['wallymport_import'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import directories'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['wallymport_import']['wallymport_source'] = array(
    '#type' => 'textfield',
    '#title' => t('Import source directory path'),
    '#description' => t('This must be an existing and writable path where input zipped data is received.'),
    '#default_value' => variable_get('wallymport_source', 'sites/default/files/import'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => FALSE,
  );
  
  $form['wallymport_import']['wallymport_import_done'] = array(
    '#type' => 'textfield',
    '#title' => t('Imported packages directory path'),
    '#description' => t('This must be an existing and writable path where zipped processed packages are moved after import.'),
    '#default_value' => variable_get('wallymport_import_done', 'sites/default/files/import/done'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => FALSE,
  );
  
  $form['wallymport_import']['wallymport_import_error'] = array(
    '#type' => 'textfield',
    '#title' => t('Not imported packages (with errors) directory path'),
    '#description' => t('This must be an existing and writable path where zipped packages which could not be imported are moved after import.'),
    '#default_value' => variable_get('wallymport_import_error', 'sites/default/files/import/error'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => FALSE,
  );
  
  $form['wallymport_import']['wallymport_temp'] = array(
    '#type' => 'textfield',
    '#title' => t('Import temporary directory path'),
    '#description' => t('This must be an existing and writable path where input zipped data will be unpacked.'),
    '#default_value' => variable_get('wallymport_temp', file_directory_temp()),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => FALSE,
  );
  $form['wallymport_import']['wallymport_definition_packages'] = array(
    '#type' => 'textfield',
    '#title' => t('Import Data Structure Definition file For Packages'),
    '#description' => t('XSD (schema) file name, with the path.'),
    '#default_value' => variable_get('wallymport_definition_packages', $path.'/definitions/packages.xsd'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
  );
  $form['wallymport_import']['wallymport_definition_messages'] = array(
    '#type' => 'textfield',
    '#title' => t('Import Data Structure Definition file For Messages'),
    '#description' => t('XSD (schema) file name, with the path.'),
    '#default_value' => variable_get('wallymport_definition_messages', $path.'/definitions/packages.xsd'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
  );
  
  $form['wallymport_preview'] = array(
    '#type' => 'fieldset',
    '#title' => t('Preview directories'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['wallymport_preview']['wallymport_preview_source'] = array(
    '#type' => 'textfield',
    '#title' => t('Preview source directory path'),
    '#description' => t('This must be an existing and writable path where input zipped data is received.'),
    '#default_value' => variable_get('wallymport_preview_source', 'sites/default/files/preview'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => FALSE,
  );
  
  $form['wallymport_preview']['wallymport_preview_error'] = array(
    '#type' => 'textfield',
    '#title' => t('Preview errors directory path'),
    '#description' => t('This must be an existing and writable path where zipped packages which could not be previewed are moved.'),
    '#default_value' => variable_get('wallymport_preview_error', 'sites/default/files/preview/error'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => FALSE,
  );
  
  $form['wallymport_preview']['wallymport_preview_temp'] = array(
    '#type' => 'textfield',
    '#title' => t('Preview temporary directory path'),
    '#description' => t('This must be an existing and writable path where input zipped data will be unpacked.'),
    '#default_value' => variable_get('wallymport_temp', file_directory_temp()),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => FALSE,
  );
  
  $form['wallymport_productID'] = array(
    '#type' => 'textfield',
    '#title' => t('Product ID'),
    '#description' => t('Product ID.'),
    '#default_value' => variable_get('wallymport_productID', $_SERVER['HTTP_HOST']),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
  );
  $form['wallymport_updateurl'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to send the informations of the node'),
    '#description' => t('URL to send the information of the node.'),
    '#default_value' => variable_get('wallymport_updateurl', 'http://esb2.rossel.be:8081/rest/pandamServices/updateUrl'),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
  );
  $form['wallymport_wallyprefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Wally Prefix'),
    '#description' => t('Used in Pandam to identified de source web site'),
    '#default_value' => variable_get('wallymport_wallyprefix', ''),
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
  );
  $form['wallymport_debug'] = array(
    '#type' => 'radios',
    '#title' => t('Import debug level'),
    '#description' => t('When creating your own import definition file, if you set this value to <em>No data creation</em>, no nodes, files, or locations will be written to the database. If you set this value to <em>Verbose</em> or higher, check html source of the import result for debug info.'),
    '#default_value' => variable_get('wallymport_debug', 0),
	'#options' => array(t('No debug'), t('Verbose'), t('No data creation')),
    '#required' => TRUE,
  );

  $vocab_list = array();
  $vocabularies = taxonomy_get_vocabularies();
  foreach($vocabularies as $key => $vocabulary) {
	  $vocab_list[$key] = $vocabulary->name;
  }

  $form['wallymport_destinationpath'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Destination Path"'),
    '#description' => t('Choose the vocabulary corresponding to the destination path. Import module will use this vocabulary to match the DestinationPath element.'),
    '#default_value' => variable_get('wallymport_destinationpath', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );
  
  $form['wallymport_documenttype'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Document Type"'),
    '#description' => t('Choose the vocabulary corresponding to the document type. Import module will use this vocabulary to match the PackageLayout element.'),
    '#default_value' => variable_get('wallymport_documenttype', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );
  $form['wallymport_author'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Authors"'),
    '#description' => t('Choose the vocabulary corresponding to the available Authors. Import module will use this vocabulary to match the AuthorID element.'),
    '#default_value' => variable_get('wallymport_author', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );  
  $form['wallymport_edition'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Editions"'),
    '#description' => t('Choose the vocabulary corresponding to the available Editions. Import module will use this vocabulary to match the EditionID element.'),
    '#default_value' => variable_get('wallymport_edition', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );  

  $form['wallymport_location'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "location"'),
    '#description' => t('Choose the vocabulary corresponding to the taxonomy "location". Import module will use this vocabulary to match the "location" element.'),
    '#default_value' => variable_get('wallymport_location', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );  

  $form['wallymport_person'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "person"'),
    '#description' => t('Choose the vocabulary corresponding to the taxonomy "person". Import module will use this vocabulary to match the "person" element.'),
    '#default_value' => variable_get('wallymport_person', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );  

  $form['wallymport_entity'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Entities"'),
    '#description' => t('Choose the vocabulary corresponding to the taxonomy "entities". Import module will use this vocabulary to match the "entity" element.'),
    '#default_value' => variable_get('wallymport_entity', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );  

  $form['wallymport_freetagtaxonomy'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Free Tags"'),
    '#description' => t('Choose the vocabulary corresponding to the free tagging taxonomy.'),
    '#default_value' => variable_get('wallymport_freetagtaxonomy', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );  
/*
  $form['wallymport_classifiedtagtaxonomy'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Classified terms"'),
    '#description' => t('Choose the vocabulary corresponding to the classified taxonomy root.'),
    '#default_value' => variable_get('wallymport_classifiedtagtaxonomy', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );  
*/
  $form['wallymport_concept'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "Concept"'),
    '#description' => t('Choose the vocabulary corresponding to the concept tagging taxonomy.'),
    '#default_value' => variable_get('wallymport_concept', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  );
  $form['wallymport_iptc'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy "IPTC"'),
    '#description' => t('Choose the vocabulary corresponding to the IPTC tagging taxonomy.'),
    '#default_value' => variable_get('wallymport_iptc', 0),
    '#options' => $vocab_list,
    '#required' => TRUE,
  ); 
  $form['wallymport_taxonomy_recusive'] = array(
    '#type' => 'select',
    '#title' => t('Is the Taxonomies recusive?'),
    '#description' => t('If TRUE, node will be associated with all the term in taxonomy PATH /term1/term2/term3. Else only to the last term (term3).'),
    '#default_value' => variable_get('wallymport_taxonomy_recusive', FALSE),
    '#options' => array("true"=>"true", "false"=>"false"),
    '#required' => TRUE,
  );  


 $form['wallymport_defaultuser'] = array(
    '#type' => 'textfield',
    '#title' => t('Drupal user used for imports.'),
    '#description' => t('This user will be used as author for creating content.'),
    '#default_value' => variable_get('wallymport_defaultuser', 1),
    '#size' => 3,
    '#maxlength' => 8,
    '#required' => TRUE,
  );
  
  return system_settings_form($form);
}

/**
 * Validate function for the settings form.
 */
function wallymport_page_admin_form_validate($form, &$form_state) {
  
  $path = $form_state['values']['wallymport_source'];
  $dir_exist=file_check_directory($path,0);	// IN D7 this function becomes file_prepare_directory()
  if (!$dir_exist) {
    form_set_error('wallymport_source', t('The path provided is not an existing writable directory.'));
  }
  
  $path = $form_state['values']['wallymport_import_done'];
  $dir_exist=file_check_directory($path,0);	// IN D7 this function becomes file_prepare_directory()
  if (!$dir_exist) {
    form_set_error('wallymport_import_done', t('The path provided is not an existing writable directory.'));
  }
  
  $path = $form_state['values']['wallymport_import_error'];
  $dir_exist=file_check_directory($path,0);	// IN D7 this function becomes file_prepare_directory()
  if (!$dir_exist) {
    form_set_error('wallymport_import_error', t('The path provided is not an existing writable directory.'));
  }
  
  $path = $form_state['values']['wallymport_temp'];
  $dir_exist=file_check_directory($path,0);	// IN D7 this function becomes file_prepare_directory()
  if (!$dir_exist) {
    form_set_error('wallymport_temp', t('The path provided is not an existing writable directory.'));
  }
  
  $path = $form_state['values']['wallymport_preview_source'];
  $dir_exist=file_check_directory($path,0);	// IN D7 this function becomes file_prepare_directory()
  if (!$dir_exist) {
    form_set_error('wallymport_preview_source', t('The path provided is not an existing writable directory.'));
  }
  
  $path = $form_state['values']['wallymport_preview_error'];
  $dir_exist=file_check_directory($path,0);	// IN D7 this function becomes file_prepare_directory()
  if (!$dir_exist) {
    form_set_error('wallymport_preview_error', t('The path provided is not an existing writable directory.'));
  }
  
  $path = $form_state['values']['wallymport_preview_temp'];
  $dir_exist=file_check_directory($path,0);	// IN D7 this function becomes file_prepare_directory()
  if (!$dir_exist) {
    form_set_error('wallymport_preview_temp', t('The path provided is not an existing writable directory.'));
  }
  
  $file = $form_state['values']['wallymport_definition_packages'];
  $file_readable = is_readable($file);
  if (!$file_readable) {
    form_set_error('wallymport_definition_packages', t('The filename provided is not an existing readable file.'));
  }
  $file = $form_state['values']['wallymport_definition_messages'];
  $file_readable = is_readable($file);
  if (!$file_readable) {
    form_set_error('wallymport_definition_messages', t('The filename provided is not an existing readable file.'));
  }
}

/**
 * Settings form.
 */
function wallymport_page_links_form($form_state){
  $form = array();
  $dirs[] = variable_get('wallymport_source', 'sites/default/files/import');
  $dirs[] = variable_get('wallymport_import_error', 'sites/default/files/import/error');
  $dirs[] = variable_get('wallymport_import_done', 'sites/default/files/import/done');
  foreach($dirs as $dir){
    if(file_check_directory($dir, 0)){
      $form[$dir] = array(
        '#type' => 'fieldset',
        '#title' => t($dir),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $files = file_scan_directory($dir, '.*\.zip', array('.', '..', 'CVS'), 0, FALSE);
      foreach($files as $file){
        $form[$dir][$file->basename]=array(
          "#type"=>'markup',
          "#value"=>'<a href="'.file_create_url($file->filename).'">'.$file->basename.'</a><br />',
        );
      }
    }
  }
  return $form;
}
