<?php

//@todo: DDU initialiser correctement les valeurs de settings des fields lors de l'install du module

include_once 'includes/Prenode.inc';
include_once 'wallyedit.features.inc';

/**
 * @file
 * wallyedit module
 *
 * This module provide coherent edition interface for package type
 *
 */

/**
 * Implementation du hook menu
 */
function wallyedit_menu(){
  $items = array();
  
  $items['admin/content/wallyedit'] = array(
    'page callback'=>'drupal_get_form',
    'page arguments' => array('wallyedit_page_admin_form',),
    'access arguments' => array('administer nodes'),
    'file'=>'includes/page_admin.inc',
    'title'=>t('WallyEdit Admin'),
    'Description'=>t('Manage Node Edition'),
  );
  
  // Original display fields admin
  $items['admin/content/wallydisplayfields'] = array(
    'page callback'=>'wallyedit_node_overview_page',
    'access arguments' => array('administer content types'),
    'file'=>'includes/page_form_display_fields.inc',
    'title'=> t('WallyEdit - Display all fields'),
    'Description'=> t('Display all fields and not only CCK fields.'),
  );
  
  $items['admin/content/wallydisplayfields/general'] = array(
    'page callback'=>'wallyedit_node_overview_page',
    'access arguments' => array('administer content types'),
    'file'=>'includes/page_form_display_fields.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title'=> t('General'),
    'weight'=>-3,
    'Description'=> t('Display all fields and not only CCK fields.'),
  );
  
  $items['admin/content/wallydisplayfields/exportvars'] = array(
    'title'=>t('Export Vars'),
    'page callback'=>'export_vars_admin',
    'access arguments' => array('access administration pages'),
    'page arguments' => array('wallyedit'),
    'type' => MENU_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'wallyadmin'),
    'file' => 'includes/searchvars.admin.inc',
  );
  
  $items['admin/content/wallydisplayfields/importvars'] = array(
    'title'=>t('Import Vars'),
    'page callback'=>'import_vars_admin',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'wallyadmin'),
    'file' => 'includes/searchvars.admin.inc',
  );
  
  foreach (node_get_types('types', NULL, TRUE) as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['admin/content/wallydisplayfields/'. $type_url_str] = array(
      'title' => $type->name,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wallyedit_form_display_fields_form', $type),
      'access arguments' => array('administer content types'),
      'file' => 'includes/page_form_display_fields.inc',
      'type' => MENU_CALLBACK,
    );
  }
  
  // Tabs organisation admin
  $items['admin/content/wallydisplaytabs'] = array(
    'page callback'=>'wallyedit_page_profiles_overview',
    'access arguments' => array('manage profiles'),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('WallyEdit - Display all fields into tabs'),
    'Description'=> t('Display all fields and organise them into tabs.'),
  );
  
  $items['admin/content/wallydisplaytabs/displaytabs/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyedit_form_tabs_content_types_overview_form', 4),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(4),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('Content Types'),
    'Description'=> t('Display all content types for a profile.'),
  );
  
  $items['admin/content/wallydisplaytabs/displaytabs/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyedit_form_tabs_overview_form', 4, 5),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(4),
    'file' => 'includes/page_form_display_tabs.inc',
    'title' => t('Organise fields into tabs'),
  );
  
  $items['admin/content/wallydisplaytabs/displaytabs/%/%/tabs'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyedit_form_tabs_overview_form', 4, 5),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(4),
    'file' => 'includes/page_form_display_tabs.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => t('Tabs'),
    'weight' => 0,
  );
  
  $items['admin/content/wallydisplaytabs/displaytabs/%/%/groups'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyedit_form_groups_overview_form', 4, 5),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(4),
    'file' => 'includes/page_form_display_tabs.inc',
    'type' => MENU_LOCAL_TASK,
    'title' => t('Groups'),
    'weight' => 1,
  );
  
  $items['admin/content/wallydisplaytabs/displaytabs/%/%/fields'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallyedit_form_fields_overview_form', 4, 5),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(4),
    'file' => 'includes/page_form_display_tabs.inc',
    'type' => MENU_LOCAL_TASK,
    'title' => t('Fields'),
    'weight' => 2,
  );
  
  $items['admin/content/wallydisplaytabs/grouplabel/%/%'] = array(
    'page callback'=>'drupal_get_form',
    'page arguments' => array('wallyedit_form_edit_label_group_form', 4),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(5),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('Edit group label'),
    'weight' => -3,
    'Description'=> t('Edit group label.'),
  );
  
  $items['admin/content/wallydisplaytabs/deletegroup/%/%'] = array(
    'page callback'=>'drupal_get_form',
    'page arguments' => array('wallyedit_form_delete_group_form', 4),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(5),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('Delete group'),
    'weight' => -3,
    'Description'=> t('Delete group.'),
  );
  
  $items['admin/content/wallydisplaytabs/tablabel/%/%'] = array(
    'page callback'=>'drupal_get_form',
    'page arguments' => array('wallyedit_form_edit_label_tab_form', 4),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(5),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('Edit tab label'),
    'weight' => -3,
    'Description'=> t('Edit tab label.'),
  );
  
  $items['admin/content/wallydisplaytabs/deletetab/%/%'] = array(
    'page callback'=>'drupal_get_form',
    'page arguments' => array('wallyedit_form_delete_tab_form', 4),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(5),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('Delete tab'),
    'weight' => -3,
    'Description'=> t('Delete tab.'),
  );
  
  $items['admin/content/wallydisplaytabs/deleteprofile/%'] = array(
    'page callback'=>'drupal_get_form',
    'page arguments' => array('wallyedit_form_delete_profile_form', 4),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(4),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('Delete profile'),
    'weight' => -3,
    'Description'=> t('Delete profile.'),
  );
  
  $items['admin/content/wallydisplaytabs/setdefaultprofile/%'] = array(
    'page callback'=>'wallyedit_page_set_default_profile',
    'page arguments' => array(4),
    'access callback' => 'wallyedit_access',
    'access arguments' => array(4),
    'file'=>'includes/page_form_display_tabs.inc',
    'title'=> t('Set default profile'),
    'weight' => -3,
    'Description'=> t('Set default profile.'),
  );
  
  // Edition interface callbacks
  $items['node/%prenode/edit2/%ctools_js/%'] = array(
    'page callback'=>'wallyedit_page_node_edition',
    'page arguments'=>array(1, 3, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file'=>'includes/page_node_edition.inc',
    'load arguments' => array('%map'),
  );
  
  $items['node/%prenode/delete2'] = array(
    'page callback'=>'drupal_get_form',
    'page arguments'=>array('wallyedit_prenode_delete_confirm', 1),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 1),
    'file'=>'includes/page_admin.inc',
  );//!! For now users can only delete their own prenodes
  
  $items['node/add2/%/%ctools_js/%'] = array(
    'page callback'=>'wallyedit_page_node_creation',
    'page arguments'=>array(2, 3, 4),
    'access callback' => 'node_access',
    'access arguments' => array('create', 2),
    'file'=>'includes/page_node_creation.inc',
  );
  
  $items['node/%prenode/wydit_edit/%ctools_js/%'] = array(
    'page callback'=>'wallyedit_callback_edit',
    'page arguments'=>array(1,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file'=>'includes/callback_edit.inc',
    'load arguments' => array('%map'),
  );
  
  $items['node/%prenode/wydit_selectbox/%ctools_js/%'] = array(
    'page callback'=>'wallyedit_callback_selectbox',
    'page arguments'=>array(1,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file'=>'includes/callback_selectbox.inc',
    'load arguments' => array('%map'),
  );
  
  $items['node/%prenode/wydit_typeselector/%ctools_js/%'] = array(
    'page callback'=>'wallyedit_callback_typeselector',
    'page arguments'=>array(1,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file'=>'includes/callback_typeselector.inc',
    'load arguments' => array('%map'),
  );
  
  $items['node/%prenode/wydit_add_new/%ctools_js/%'] = array(
    'page callback'=>'wallyedit_callback_add_new',
    'page arguments'=>array(1,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file'=>'includes/callback_add_new.inc',
    'load arguments' => array('%map'),
  );
  
  $items['node/%prenode/preview2/%'] = array(
    'page callback'=>'wallyedit_callback_preview',
    'page arguments'=>array(1, 3),
    'access arguments' => array('access content'),
    'file'=>'includes/callback_preview.inc',
    'load arguments' => array('%map'),
  );
  
  $items['wallyedit/js_add_more'] = array(
    'page callback' => 'wallyedit_add_more_js',
    'access arguments' => array('access content'),
    'file' => 'includes/wallyedit.node_form.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['wallyedit/test'] = array(
    'page callback' => 'wallyedit_test',
    'access arguments' => array('access content'),
    'file' => 'includes/wallyedit.test.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 * Simulate redirection to edition interface instead of classical node form
 */
function wallyedit_menu_alter(&$items) {
  // Node alter to allow the redirect to our edition interface
  foreach (node_get_types('types', NULL, TRUE) as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['node/add/' . $type_url_str]['page callback'] = 'wallyedit_page_add_selection';
  }

  $items['node/%node/edit']['page callback'] = 'wallyedit_page_edit_selection';
  
  // FileField alter to use our callback for the upload or remove of a file
  $items['filefield/ahah/%/%/%']['page callback'] = 'wydit_filefield_js';
}

/**
 * Select classical edition interface or wallyedit's.
 */
function wallyedit_page_add_selection() {
  $args = func_get_args();
  $type_url_str = $args[0];
  $current_profile = (isset($args[1]) && is_numeric($args[1])) ? $args[1] : 0;
  
  foreach (node_get_types('types', NULL, TRUE) as $type) {
    $temp_type_url_str = str_replace('_', '-', $type->type);
    if ($temp_type_url_str == $type_url_str) {
      $type_name = $type->type;
      break;
    }
  }
  
  $goto = 'wally';
  if ($current_profile == 0) {
    $default_profile = wallyedit_get_default_profile();
    if ($default_profile == 0) {
      $goto = 'drupal';
    } else {
      $current_profile = $default_profile;
    }
  }

  $interface_types = variable_get('wallyedit_content_types_interface_type_'.$current_profile, array());
  if (empty($interface_types)) {
    $goto = 'drupal';
  }

  if ($goto == 'wally' && isset($interface_types[$type_name]) && $interface_types[$type_name] == 'wally') {
    return menu_execute_active_handler('node/add2/'.$type_url_str.'/1/'.$current_profile);
  } else {
    return call_user_func_array('node_add', $args);
  }
}

/**
 * Select classical edition interface or wallyedit's.
 */
function wallyedit_page_edit_selection() {
  $args = func_get_args();
  $node = $args[0];
  $current_profile = (isset($args[1]) && is_numeric($args[1])) ? $args[1] : 0;
  
  $goto = 'wally';
  if ($current_profile == 0) {
    $default_profile = wallyedit_get_default_profile();
    if ($default_profile == 0) {
      $goto = 'drupal';
    } else {
      $current_profile = $default_profile;
    }
  }

  $interface_types = variable_get('wallyedit_content_types_interface_type_'.$current_profile, array());
  if (empty($interface_types)) {
    $goto = 'drupal';
  }

  if ($goto == 'wally' && isset($interface_types[$node->type]) && $interface_types[$node->type] == 'wally') {
    return menu_execute_active_handler('node/'.$node->nid.'/edit2/1/'.$current_profile);
  } else {
    return call_user_func_array('node_page_edit', $args);
  }
}

/**
 * Implementation of hook_theme()
 */
function wallyedit_theme(){
  $path = drupal_get_path('module', 'wallyedit');
  $base = array(
    'file' => 'theme.inc',
    'path' => $path."/theme",
  );

  return array(
    'wallyedit_node_form'=>$base+array(
      'arguments' => array('form' => array()),
      'template' => 'wallyedit-node-form',
    ),
    'wallyedit_node_form'=>$base+array(
      'arguments' => array('form' => array()),
      'template' => 'wallyedit-node-form',
    ),
    'wallyedit_admin'=>$base+array(
      'arguments' => array('rows' => array()),
    ),
    'wallyedit_page_createmode'=>$base+array(
      'arguments' => array('form' => array()),
    ),
    'wallyedit_page_editmode'=>$base+array(
      'arguments' => array('form' => array(), 'form_prev' => array()),
    ),
    'wallyedit_form_display_fields_form'=>array(
      'template' => 'wallyedit-admin-display-overview-form',
      'arguments' => array('form' => array()),
      'path' => drupal_get_path('module', 'wallyedit') . '/theme',
    ),
    'wallyedit_nopreview'=>array(
      'template' => 'wallyedit-nopreview',
      'path' => drupal_get_path('module', 'wallyedit') . '/theme',
    ),
    'wallyedit_preview_iframe'=>array(
      'template' => 'wallyedit-preview-iframe',
      'arguments' => array('vars' => array()),
      'path' => drupal_get_path('module', 'wallyedit') . '/theme',
    ),
    'wallyedit_preview_id'=>$base+array(
      'arguments' => array('cache name' => 0 , 'dest' => 'no_dest'),
      ),
    'wydit_selector_theme'=>$base+array(
      'arguments' => array('form' => array()),
    ),
    'wallyedit_form_tabs_content_types_overview_form' => $base + array(
      'arguments' => array('form' => array()),
    ),
    'wallyedit_form_groups_overview_form' => $base + array(
      'arguments' => array('form' => array()),
    ),
    'wallyedit_form_tabs_overview_form' => $base + array(
      'arguments' => array('form' => array()),
    ),
    'wallyedit_form_fields_overview_form' => $base + array(
      'arguments' => array('form' => array()),
      'template' => 'wallyedit-admin-display-tabs-overview-form',
    ),
    'wallyedit_test_form'=>$base+array(
      'arguments'=>array('form'=>array()),
      'template' => 'wallyedit-admin-display-form2',
    ),
    'wallyedit_fieldset'=>$base+array(
      'arguments'=>array('element'=>array()),
    ),
    'wallyedit_inline_form'=>$base+array(
      'arguments'=>array('form'=>array()),
      'template' => 'wallyedit-node-accordion-form',
    ),
  );
}

/**
 * Implementation of hook_form_alter()
 */
function wallyedit_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'wallyedit_form_page_createmode_form' || $form_id == 'wallyedit_form_page_editmode_form' || strstr($form_id, '_node_form')) {
    $available_profiles = wallyedit_get_available_profiles();
    if (!empty($available_profiles)) {
      $options_profiles = array();
      foreach ($available_profiles as $av_prof) {
        $options_profiles[$av_prof['pid']] = $av_prof['label'];
      }
      $form['choose_profile'] = array(
        '#type' => 'select',
        '#title' => t('Choose profile'),
        '#options' => $options_profiles,
        '#default_value' => $form_state['profile_id'],
        '#weight' => -100,
      );

      $form['confirm_profile'] = array(
        '#type' => 'submit',
        '#title' => t('Confirm profile change'),
        '#value' => t('Confirm profile change'),
        '#weight' => -99,
      );

      $form['#after_build'][] = 'wallyedit_form_change_profile_form_after_build';
    }
  }
}

/**
 * Implementation of hook_elements
 */
function wallyedit_elements() {
  return array(
    'optionwidgets_select' => array(
      '#process' => array('wydit_elements_process'),
      ),
    'optionwidgets_buttons' => array(
      '#process' => array('wydit_elements_process'),
      ),
    'optionwidgets_onoff' => array(
      '#process' => array('wydit_elements_process'),
      ),
    'date_combo' => array(
      '#process' => array('wydit_elements_process'),
      ),
    'content_taxonomy_tree' => array(
      '#process' => array('wydit_elements_process'),
      ),
    'content_taxonomy_autocomplete' => array(
      '#process' => array('wydit_elements_process'),
      ),
    );
}

/**
 * Implementation of hook_perm()
 */
function wallyedit_perm() {
  require_once drupal_get_path('module', 'wallyedit').'/includes/page_form_display_tabs.inc';
  $profiles = wyditadmin_get_profiles();
  $perms = array();
  $perms[] = 'manage profiles';
  foreach ($profiles as $profile) {
    $perms[] = 'manage fields for profile '.$profile['label'];
  }
  return $perms;
}

/**
 * Implementation of hook_user()
 */
function wallyedit_user($type, &$array, &$user, $category) {
  switch ($type) {
    case 'form':
      module_load_include('inc', 'wallyedit', 'includes/page_form_display_tabs');
      $profiles = wyditadmin_get_profiles();
      $options_profiles = array();
      $default_profile = 0;
      foreach ($profiles as $profile) {
        $options_profiles[$profile['pid']] = $profile['label'];
        if ($profile['default_profile']) {
          $default_profile = $profile['pid'];
        }
      }
      $default_profile = isset($user->wydit_default_profile) ? $user->wydit_default_profile : $default_profile;
      $form['wydit_default_profile'] = array(
        '#type' => 'select',
        '#title' => t('Edition interface default profile'),
        '#description' => t('Choose the profile that will be used as default for your edition interface fields management.'),
        '#options' => $options_profiles,
        '#default_value' => $default_profile,
      );
      return $form;
      break;
    case 'submit':
      $user->wydit_default_profile = $array['wydit_default_profile'];
      break;
  }
}

/**
 * Access callback for interface administration
 */
function wallyedit_access($profile_id) {
  global $user;
  static $perm = array();

  if ($reset) {
    $perm = array();
  }

  if (!isset($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  if (!isset($perm[$account->uid])) {
    $profile = db_fetch_array(db_query('SELECT * FROM {wallyedit_profiles} WHERE pid = %d', $profile_id));
    $string = 'manage fields for profile '.$profile['label'];
    
    $result = db_query("SELECT p.perm FROM {role} r INNER JOIN {permission} p ON p.rid = r.rid WHERE r.rid IN (". db_placeholders($account->roles) .")", array_keys($account->roles));

    $perms = array();
    while ($row = db_fetch_object($result)) {
      $perms += array_flip(explode(', ', $row->perm));
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * Get the default profile for current user
 */
function wallyedit_get_default_profile() {
  global $user;
  static $default_profile = array();
  
  if (!isset($default_profile[$user->uid])) {
    $default_profile[$user->uid] = 0;
    if (isset($user->wydit_default_profile)) {
      $default_profile[$user->uid] = $user->wydit_default_profile;
    } else {
      $available_profiles = wallyedit_get_available_profiles();
      foreach ($available_profiles as $available_profile) {
        if ($available_profile['default_profile'] == 1) {
          $default_profile[$user->uid] = $available_profile['pid'];
          break;
        }
      }
    }
  }
  
  return $default_profile[$user->uid];
}

/**
 * Get available profiles for current user
 */
function wallyedit_get_available_profiles() {
  global $user;
  static $available_profiles = array();
  
  if (!isset($available_profiles[$user->uid])) {
    module_load_include("inc",'wallyedit','includes/page_form_display_tabs');
    
    $profiles = wyditadmin_get_profiles();
    foreach ($profiles as $profile) {
      if (wallyedit_access($profile['pid'])) {
        $available_profiles[$user->uid][$profile['pid']] = $profile;
      }
    }
  }
  
  return $available_profiles[$user->uid];
}

function wallyedit_form_page_createmode_form(&$form_state) {
  $form = wydit_subform_global_page_form($form_state);
  $form['#action'] = '/node/add2/'.str_replace('_', '-', $form_state['type']).'/1/'.$form_state['profile_id'].'/'.$form_state['cache name'];

  return $form;
}

function wallyedit_form_page_createmode_form_validate(&$form, &$form_state){
  if(form_get_errors()){
    _wallyedit_form_page_ctools_validation();
  }
}

/**
 * Add submit function during after build process to be sure to pass after cck
 */
function wallyedit_form_change_profile_form_after_build ($form, &$form_state) {
  array_unshift($form['#validate'], 'wallyedit_form_change_profile_form_validate');
  return $form;
}

/**
 * Redirect to chosen profile
 */
function wallyedit_form_change_profile_form_validate ($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['op'] == $values['confirm_profile'] && $values['choose_profile'] != $form_state['profile_id']) {
    drupal_get_messages();
    if (strstr($form['#action'], 'add')) {
      drupal_goto('node/add/'.str_replace('_', '-', $values['type']).'/'.$values['choose_profile']);
    } else {
      $redirect_id = isset($form_state['cache name']) ? $form_state['cache name'] : $form['#node']->nid;
      drupal_goto('node/'.$redirect_id.'/edit/'.$values['choose_profile']);
    }
  }
}

function wallyedit_form_page_createmode_form_submit(&$form, &$form_state){
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  ctools_include('object-cache');
  $commands = array();

  if($form_state["clicked_button"]['#name'] == 'reset_global'){
    drupal_set_message('reset');
    ctools_object_cache_clear('prenode', $form_state['cache name']);
    drupal_set_message('PreNode has been cleared');
    drupal_goto("admin/wallyedit/node");
  }

  //This is the important line !!!
  
  wydit_subform_global_page_submit($form_state);
  
  if($form_state["clicked_button"]['#name']=='publish_global' ){
    wydit_publish_prenode($form_state);
    drupal_set_message('Node has been published');
    ctools_object_cache_clear('prenode', $form_state['cache name']);
    drupal_set_message('PreNode has been cleared');
    drupal_goto("node/".$form_state[$form_state['type']]['#node']->nid);
  }

  //*********
  //DISPATCH
  //*********
  
  $current_profile = $form_state['profile_id'];

  $action = split('__',$form_state['clicked_button']['#name']);
  $action = $action[0];
  switch($action){
    case 'edit':
      $new_form_state=array();
      $new_form_state['parents']=$form_state['clicked_button']["#parents"];
      $new_form_state['action']='/node/'.$form_state['cache name'].'/wydit_edit/ajax/'.$current_profile;
      $new_form_state[$form_state['type']]=$form_state[$form_state['type']];
      $new_form_state['cache name']=$form_state['cache name'];
      $new_form_state['profile_id'] = $current_profile;

      $new_form_state['type']=$form_state['type'];
      $edit_form = ctools_build_form('wallyedit_form_editmode_edit_form', $new_form_state, $current_profile);
      $commands[] = ctools_ajax_command_html('#wallyedit_container', $edit_form);

      break;
    case 'add_new':
      module_load_include('inc','wallyedit','includes/page_form_display_tabs');
      $fields = wyditadmin_get_existing_fields($form_state['type']);
      //@todo: remove hard coding of parents
      $field_infos=$fields[$form_state['clicked_button']["#parents"][1]];
      if(count($field_infos['referenceable_types'])==1) {

      } else {
        //fields_infos is set in wydit_subform_global_page_submit()
        $form_state_type_selector['fields_infos']=$field_infos;

        $form_state_type_selector['action']='/node/'.$form_state['cache name'].'/wydit_typeselector/ajax/'.$current_profile;

        $form_state_type_selector['cache name']=$form_state['cache name'];
        $form_state_type_selector['parents']=$form_state['clicked_button']["#parents"];
        $form_state_type_selector[$form_state['type']]=$form_state[$form_state['type']];
        $form_state_type_selector['type']=$form_state['type'];
        $form_state_type_selector['profile_id'] = $form_state['profile_id'];

        $form_type_selector = ctools_build_form('wallyedit_form_nodetypeselector_form', $form_state_type_selector, $current_profile);
        $commands[] = ctools_ajax_command_html('#wallyedit_container',$form_type_selector);
      }

      break;
    case 'add_existing':
      $type=wydit_get_infos_type($type_name);
      module_load_include('inc','wallyedit','includes/page_form_display_tabs');
      $fields = wyditadmin_get_existing_fields($type_name);

      //@todo: remove hard coding of parents
      $field_infos=$fields[$form_state['clicked_button']["#parents"][1]];

      $referencables=$field_infos['referenceable_types'];
      foreach($referencables as $value){
        if($value){
          $allowed_types[$value]=$value;
        }
      }

      $handler_type_filter=array(
        'type' => array(
          'operator' => 'in',
          'value' =>$allowed_types,
          'group' => '0',
          'exposed' => FALSE,
          'expose' => array(
            'operator' => FALSE,
            'label' => '',
          ),
          'id' => 'type',
          'table' => 'node',
          'field' => 'type',
          'relationship' => 'none',
        ),
      );

      $view = views_get_view('prenode_selectbox_vbo');
      $view->set_display('default');

      $view->display[$view->current_display]->handler->options['filters']=array_merge($view->display[$view->current_display]->handler->options['filters'],$handler_type_filter);
      $view->display[$view->current_display]->handler->display_options['filters']=array_merge($view->display[$view->current_display]->handler->display_options['filters'],$handler_type_filter);

      // set the view arguments here, if needed : SET the cache name and the target
      $view->set_arguments( array( $form_state['cache name'], implode('/',$form_state['clicked_button']["#parents"])) );

      // Override the view path, otherwise the path will be 'ACTION_URL' and AJAX will not be take into account
      $view->override_path = 'views/ajax';
      $output = $view->preview();

      $commands[] = ctools_ajax_command_html('#wallyedit_container',$output);
      break;
    case 'save_global':
      $commands[] = ctools_ajax_command_redirect('node/'.$form_state['cache name'].'/edit2/1/'.$current_profile);
      break;
    case 'remove':
      $form_state=wydit_remove_element($form_state,$form_state['clicked_button']['#parents']);

      wydit_clean_and_save_form_state($form_state);

      $prenode = new Prenode($form_state['cache name'], FALSE, $current_profile);
      $new_form_state = $prenode->getFormState();
      unset($_POST);
      $new_form_state['want form'] = TRUE;

      $new_form = ctools_build_form('wallyedit_form_page_editmode_form', wydit_clean_form_state($new_form_state), $current_profile);
      $commands[] = ctools_ajax_command_html('#wallyedit_container', $new_form);
      break;
  }

  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());
  ctools_ajax_render($commands);
}

function wallyedit_form_page_editmode_form(&$form_state) {
  $form = wydit_subform_global_page_form($form_state);
  $form['#action'] = '/node/'.$form_state['cache name'].'/edit2/1/'.$form_state['profile_id'];
  
  return $form;
}

function wallyedit_form_page_editmode_form_validate(&$form, &$form_state){
  if(form_get_errors()){
    _wallyedit_form_page_ctools_validation();
  }
}

function wallyedit_form_page_editmode_form_submit(&$form, &$form_state){
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  ctools_include('object-cache');
  $commands = array();
  
  if($form_state["clicked_button"]['#name']=='reset_global'){
    drupal_set_message('reset');
    ctools_object_cache_clear('prenode', $form_state['cache name']);
    drupal_set_message('PreNode has been cleared');
    drupal_goto("node/".$form_state[$form_state['type']]['#node']->nid);
  }

  //This is the important line !!!
  wydit_subform_global_page_submit($form_state);

  if($form_state["clicked_button"]['#name']=='publish_global'){
    wydit_publish_prenode($form_state);
    drupal_set_message('Node has been published');
    ctools_object_cache_clear('prenode', $form_state['cache name']);
    drupal_set_message('PreNode has been cleared');
    drupal_goto("node/".$form_state[$form_state['type']]['#node']->nid);
  }

  //*********
  //DISPATCH
  //*********
  
  $current_profile = $form_state['profile_id'];

  $action =split('__',$form_state['clicked_button']['#name']);
  $action=$action[0];
  switch($action){

    case 'edit':
      $new_form_state=array();
      $new_form_state['parents'] = $form_state['clicked_button']["#parents"];
      $new_form_state['action'] = '/node/'.$form_state['cache name'].'/wydit_edit/ajax/'.$current_profile;
      $new_form_state[$form_state['type']] = $form_state[$form_state['type']];
      $new_form_state['cache name'] = $form_state['cache name'];
      $new_form_state['profile_id'] = $current_profile;
      $new_form_state['type'] = $form_state['type'];
      
      $edit_form = ctools_build_form('wallyedit_form_editmode_edit_form', $new_form_state, $current_profile);
      $commands[] = ctools_ajax_command_html('#wallyedit_container',$edit_form);

      break;
    case 'add_new':
      $type_name=$form_state['type'];
      module_load_include('inc','wallyedit','includes/page_form_display_tabs');
      $fields = wyditadmin_get_existing_fields($type_name);

      //@todo: remove hard coding of parents
      $field_infos=$fields[$form_state['clicked_button']["#parents"][1]];
      if(count($field_infos['referenceable_types'])==1){

      }
      else{

        $form_state_type_selector['fields_infos']=$field_infos;
        $form_state_type_selector['action']='/node/'.$form_state['cache name'].'/wydit_typeselector/ajax/'.$current_profile;

        $form_state_type_selector['cache name']=$form_state['cache name'];
        $form_state_type_selector['parents']=$form_state['clicked_button']["#parents"];
        $form_state_type_selector[$form_state['type']]=$form_state[$form_state['type']];
        $form_state_type_selector['type']=$form_state['type'];
        $form_state_type_selector['profile_id'] = $form_state['profile_id'];

        $form_type_selector = ctools_build_form('wallyedit_form_nodetypeselector_form', $form_state_type_selector, $current_profile);
        $commands[] = ctools_ajax_command_html('#wallyedit_container',$form_type_selector);
      }
      break;
    case 'add_existing':
      $type_name=$form_state['type'];
      module_load_include('inc','wallyedit','includes/page_form_display_tabs');
      $fields = wyditadmin_get_existing_fields($type_name);

      //@todo: remove hard coding of parents
      $field_infos=$fields[$form_state['clicked_button']["#parents"][1]];

      $referencables=$field_infos['referenceable_types'];
      foreach($referencables as $value){
        if($value){
          $allowed_types[$value]=$value;
        }
      }

      $handler_type_filter=array(
        'type' => array(
          'operator' => 'in',
          'value' =>$allowed_types,
          'group' => '0',
          'exposed' => FALSE,
          'expose' => array(
            'operator' => FALSE,
            'label' => '',
          ),
          'id' => 'type',
          'table' => 'node',
          'field' => 'type',
          'relationship' => 'none',
        ),
      );

      $view = views_get_view('prenode_selectbox_vbo');
      $view->set_display('default');

      $view->display[$view->current_display]->handler->options['filters']=array_merge($view->display[$view->current_display]->handler->options['filters'],$handler_type_filter);
      $view->display[$view->current_display]->handler->display_options['filters']=array_merge($view->display[$view->current_display]->handler->display_options['filters'],$handler_type_filter);

      // set the view arguments here, if needed : SET the cache name and the target
      $view->set_arguments( array( $form_state['cache name'], implode('/',$form_state['clicked_button']["#parents"])) );

      // Override the view path, otherwise the path will be 'ACTION_URL' and AJAX will not be take into account
      $view->override_path = 'views/ajax';
      $output = $view->preview();

      $commands[] = ctools_ajax_command_html('#wallyedit_container',$output);
      break;
    case 'save_global':
      break;
    case 'remove':
      $form_state=wydit_remove_element($form_state,$form_state['clicked_button']['#parents']);

      wydit_clean_and_save_form_state($form_state);

      $prenode=new Prenode($form_state['cache name'], FALSE, $current_profile);
      $new_form_state=$prenode->getFormState();
      unset($_POST);
      $new_form_state['want form']=TRUE  ;

      $new_form = ctools_build_form('wallyedit_form_page_editmode_form', wydit_clean_form_state($new_form_state), $current_profile);
      $commands[] = ctools_ajax_command_html('#wallyedit_container',$new_form);

      //ctools_ajax_render($commands);
      break;
  }
   
  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());
  ctools_ajax_render($commands);
}

function wydit_subform_global_page_form(&$form_state){
  module_load_include('inc', 'node', 'node.pages');

  $form = array('#tree'=>true);

  $type_name = $form_state['type'];

  $a = array("#tree"=>true);
  $a = drupal_retrieve_form($type_name.'_node_form', $a, $form_state[$type_name]['#node']);
  
  $a['#tree'] = true;
  drupal_prepare_form($type_name.'_node_form', $a, $form_state);

  unset($a["#type"]);
  unset($a["form_id"]);
  unset($a["#parents"]);
  $form[$type_name] = array("#type"=>'fieldset');
  foreach($a as $element_name => $value){
    $form[$type_name][$element_name] = $value;
  }
  
  $temp_b = $form[$form_state['type']];

  wydit_prepare_primary_package_form($form[$type_name], $form_state, $type_name, array(0 => $type_name), $temp_b);
  wydit_remove_form_infos($form[$type_name]);

  $form['type'] = array(
    '#type' => 'value',
    '#value' => $form_state['type']
  );

  $form['#tree']=true;
  $form['#theme'][] = "wallyedit_node_form";
  
  $form['profile_id'] = array(
    '#type' => 'value',
    '#value' => $form_state['profile_id'],
  );

  $form["save_global"]=array(
    '#type' => 'submit',
    '#name' => 'save_global',
    "#value"=> t('Save'),
  	'#attributes' => array('class' => 'form-submit ctools-use-ajax'),
  );
  
  $form["reset_global"]=array(
    '#type' => 'submit',
    '#name' => 'reset_global',
    "#value"=> t('Reset'),
    '#attributes' => array('class' => 'form-submit ctools-use-ajax'),
  );

  $form["publish_global"]=array(
    '#type' => 'submit',
    '#name' => 'publish_global',
    "#value" => t('Save and Publish'),
  );
  return $form;
}

function wydit_subform_global_preview_form(&$form_state, $cache_name = NULL){
  ctools_include('ajax');
  if(empty($form_state['cache name'])) {
    $form_state['cache name'] = $cache_name;
  }
  
  drupal_add_js('
    $(document).ready(function() {
      buildList();
      $("#wallyedit_preview_container").bind("DOMFocusIn", function () {
        buildList();
      });
    });
    
    function buildList() {
      $("#edit-select-preview").bind("change", function () {
        var temp = "";
        if ($(this).val() != "disabled") {
          temp = "/node/'.$form_state['cache name'].'/preview2/"+$(this).val();
        }
        $("#prev_iframe").attr("src", temp);
      });
    }
  ', 'inline');

  $prenode = new Prenode($form_state['cache name']);
  if(!empty($prenode->form_state)) {
    $options = array('disabled' => 'Preview disabled', 'no_dest' => 'Node');
    if (isset($prenode->form_state[$prenode->form_state['type']]['#node']->field_destinations)) {
      foreach($prenode->form_state[$prenode->form_state['type']]['#node']->field_destinations as $delta=>$dest) {
        if($delta !== 'field_destinations_add_more'){
          $dest_name = taxonomy_get_term($dest['tid'])->name;
          $options += array($delta => $dest_name.' - Target : '.$dest['target'].' - Layout : '.$dest['layout'].' - Rank : '.$dest['rank'], );
        }
      }
    }
    $form['select_preview'] = array(
      '#type' => 'select',
      '#title' => t('Preview destination'),
      '#default_value' => 'disabled',
      '#options' => $options, 
      '#attributes' => array('prenode' => $form_state['cache name']),
    );
    $form['#suffix'] = theme('wallyedit_preview_id', array('cache name'=>$form_state['cache name'], 'dest'=>'disabled'));
  } else {
    $form['#suffix'] = theme('wallyedit_nopreview');
  }
  
  $form['preview'] = array(
    '#type' => 'submit',
    '#value' => t('Reload destinations list'),
    '#attributes'=>array('class' => 'ctools-use-ajax'),
  );
  
  return $form;
}

function wydit_subform_global_preview_form_submit($form, &$form_state){
  $form_state['cache name'] = $form['select_preview']['#attributes']['prenode'];
  $form_prev = drupal_rebuild_form('wydit_subform_global_preview_form', $form_state);
  $form_prev = drupal_render_form('wydit_subform_global_preview_form', $form_prev);
  
  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());
  $commands[] = ctools_ajax_command_html('#wallyedit_preview_container', $form_prev);
  ctools_ajax_render($commands);
}

function wydit_prepare_primary_package_form(&$form, &$form_state, $type, $parents, $global_form = array(), $global_path = NULL){
  module_load_include('inc','wallyedit','includes/page_form_display_tabs');
  $fields = wyditadmin_get_existing_fields($type);
  $flat_fields = wyditadmin_get_fields_flat($form_state['profile_id'], $type);

  foreach(element_children($form) as $element) {
    $parents_new = $parents;
    $parents_new[] = $element;
    $b = $parents;
    if(isset($flat_fields[$element]) and $flat_fields[$element]['display'] == 0 ){
      //@todo: DDU what happen if the element is required ?
      unset($form[$element]);
    }
    if($form[$element]['#type'] == 'value' && $form[$element]["#value"]){
      continue;
    }
    if($form[$element]['#type'] == 'fieldset'){
      if (!isset($form[$element]['#title'])){
        $form[$element]['#title'] = _wallyedit_convert_type_to_title($form[$element]['type']['#value']);
      }

      $temp_b = $form_state;

      wydit_prepare_primary_package_form($form[$element], $form_state, $type, $parents, $global_form, $global_path.'/'.$element);

      if(count(element_children($form[$element]))==0){
        unset($form[$element]);
      }
      else{
        $has_another_type_than_value=false;
        foreach(element_children($form[$element]) as $subfield_key => $subfield)
        if($form[$element][$subfield]["#type"]!="value"){
         $has_another_type_than_value=TRUE;
        }
        if(!$has_another_type_than_value){
          unset($form[$element]["#type"]);
        }
      }
      continue;
    }

    if(isset($flat_fields[$element]) && $flat_fields[$element]['display'] == 1) {
      $form[$element]['#parents'] = $parents_new;

      if($fields[$element]['multiple'] == 1){
        $form[$element][$fields[$element]['name'].'_add_more']['#submit'][0]='wallyedit_add_more_submit_proxy';
        $form[$element][$fields[$element]['name'].'_add_more']['#ahah']['path']=str_replace('//','/','wallyedit/js_add_more/'.$type.'/'.$element.'/'.$global_path.'/'.$element);
      }
      //@todo: DDU what happen if the element is required ?
    }

    if(isset($flat_fields[$element]) && $flat_fields[$element]['display'] == 2) {
      $parents_new[]='0';
      $form[$element]['#parents']=array($element);
      $form_state[$type][$element][0]['profile_id'] = $form_state['profile_id'];
      wydit_prepare_inline_form_element($form[$element], $form_state[$type][$element][0], $element, $fields, $parents_new, $global_path.'/'.$element.'/0'  );
      $form[$element]['#theme']='wallyedit_inline_form';
    }
    if(isset($flat_fields[$element]) && $flat_fields[$element]['display'] == 3) {
      wydit_prepare_selectbox_form_element($form[$element], $form_state[$type][$element], $element, $fields, $parents_new);
    }
  }

  unset($form['buttons']);
  unset($form['#submit']);
  unset($form['#disabled']);
}

function wally_edit_clean_after_build($form){
  foreach($form[$form['type']['#value']] as $element_key=>$element_content){
    if(is_array($form[$form['type']['#value']][$element_key])){
      if($form[$form['type']['#value']][$element_key]["#type"]=='fieldset'){
        $has_type_other_than_value=false;
        foreach(element_children($form[$form['type']['#value']][$element_key]) as $subelement_key=>$subelement_content){
          if($subelement_content["#type"]!='value'){
            $has_type_other_than_value=TRUE;
          }
        }
        if(!$has_type_other_than_value){
          //unset($form[$form['type']['#value']][$element_key]["#type"]);
        }
      }
    }
  }
  return $form;
}

function _wallyedit_form_page_ctools_validation() {
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  ctools_include('object-cache');

  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());
  ctools_ajax_render($commands);
}

function wallyedit_editmode_selectbox_form($form_state){
  $form=array();
  views_add_js('ajax_view');

  $views= views_embed_view('prenode_selectbox_vbo', 'default', 6, 64);

  $args=array(6,64);
  $view = views_get_view('prenode_selectbox_vbo');

  $conf=array(
    "override_pager_settings"=>0,
    'use_pager'=>0,
    'nodes_per_page'=>20,
    "pager_id"=>'',
  );
  $block=views_content_views_content_type_render('prenode_selectbox_vbo',$conf,array(),array());

  $form['vbo']=array(
    '#type'=>'markup',
    '#value'=>$block->content,
  );
  $form['sub']=array(
    '#type'=>'submit',
    '#value'=>'luncj',
  );
  $form['#action']=$form_state['action'];
  return $form;
}

function wallyedit_editmode_selectbox_form_submit($form,&$form_state){
  watchdog('wallyedit', 'rrrrrrrrrrrrrrrrrrrrrrrrrrr');
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());

  ctools_ajax_render($commands);
}

// important: add fields infos to form_state
function wydit_subform_global_page_submit(&$form_state){
  //*********
  //Prepare form_state for input element
  //*********
  $type_name=$form_state['type'];
  module_load_include('inc','wallyedit','includes/page_form_display_tabs');
  $fields = wyditadmin_get_existing_fields($type_name);
  
  //clean empty multiple values (cfr hook_content_is_empty)
  foreach($fields as $field){
    if($field['multiple']==1){
      $field_name = $field['name'];
      $function_is_empty=$field['module'].'_content_is_empty';
      if(function_exists($function_is_empty) && is_array($form_state['values'][$form_state['type']][$field_name])){
        foreach($form_state['values'][$form_state['type']][$field_name] as $key=>$value){
          if(is_numeric($key)){
            if($function_is_empty($form_state['values'][$form_state['type']][$field_name][$key],$field)){
              unset($form_state['values'][$form_state['type']][$field_name][$key]);
            }
          }
        }
      }
    }
  }
  
  $a=array();
  $a[$form_state['type']]['#node']=(object)((array)node_submit($form_state['values'][$form_state['type']])+(array)$form_state[$form_state['type']]['#node']);
  $a['type']=$form_state['type'];
  $a['cache name']=$form_state['cache name'];
  $a['profile_id']=$form_state['profile_id'];

  $flat_fields = wyditadmin_get_fields_flat($form_state['profile_id'], $type_name);
  foreach($flat_fields as $field){
    $field_name = $field['name'];
    if($field['display']>1){
      if(isset($form_state[$form_state['type']][$field_name])){
        foreach($form_state[$form_state['type']][$field_name] as $key=>$value){
          //avoid the weight_.$key element
          if(is_numeric($key)){
            //determine index, if no weight -inline element- use $key value
            if(isset($form_state['values'][$form_state['type']][$field_name]["weight_".$key])) {
              $index=$form_state['values'][$form_state['type']][$field_name]["weight_".$key];
            } else {
              $index=$key;
            }
            $a[$form_state['type']][$field_name][$index]['#node']=(object)((array)node_submit($form_state['values'][$form_state['type']][$field_name][$key])+(array)$form_state[$form_state['type']][$field_name][$key]['#node']);
            $subtype=$a[$form_state['type']][$field_name][$index]['#node']->type;
            $a[$form_state['type']][$field_name][$index]['type']=$subtype;
          }
          //ReOrder by index
          ksort($a[$form_state['type']][$field_name]);
          $a[$form_state['type']][$field_name]=array_values($a[$form_state['type']][$field_name]);
        }
      }
    }
  }
  if (isset($a[$a['type']]['#node']->field_destinations)) {
    cckdestinations_field('presave', $fake_node, NULL, $a[$a['type']]['#node']->field_destinations, NULL, NULL);
  }
  
  wydit_clean_and_save_form_state($a);
  $form_state[$form_state['type']]=$a[$form_state['type']];
}

function wallyedit_form_createmode_add_form(&$form_state){
  $form = wydit_subform_global_add_form(&$form_state);
  $form['#action'] = '/node/'.$form_state['cache name'].'/wydit_add_new/ajax/'.$form_state['profile_id'];

  return $form;
}

function wallyedit_form_editmode_add_form(&$form_state) {
  $form = wydit_subform_global_add_form(&$form_state);
  $form['#action'] = '/node/'.$form_state['cache name'].'/wydit_add_new/ajax/'.$form_state['profile_id'];

  return $form;
}

function wydit_subform_global_add_form(&$form_state){
  $node->type = $form_state['type'];
  $type_name = $node->type;

  //@todo: target should be parents ?
  $target=array_merge($form_state['parents'],array("#node"));
  $form['target']=array('#type'=>'value','#value'=>$target);
  $form['parents']=array('#type'=>'value','#value'=>$form_state['parents']);
  $form['type']=array('#type'=>'value','#value'=>$node->type);

  $a=array("#tree"=>true);
  $a=drupal_retrieve_form($type_name.'_node_form',$a,$node);
  $a['#tree']=true;

  drupal_prepare_form($type_name.'_node_form',$a,$form_state);

  unset($a["#type"]);
  unset($a["form_id"]);
  unset($a["#parents"]);
  $form[$type_name]=array("#type"=>'fieldset');

  foreach($a as $element_name=>$value){
    $form[$type_name][$element_name]=$value;
  }

  wydit_prepare_primary_package_form($form[$type_name], $form_state, $type_name, array(0 => $type_name));

  wydit_remove_form_infos($form[$type_name]);
  
  $form['profile_id'] = array(
    '#type' => 'value',
    '#value' => $form_state['profile_id'],
  );

  $form["save_global"] = array(
    '#type' => 'submit',
    '#name' => 'save_global',
    "#value" => t('Save'),
  	'#attributes' => array('class' => 'form-submit ctools-use-ajax'),
  );
  
  $form['#tree'] = TRUE;
  $form['#theme'][] = "wallyedit_node_form";
  
  return $form;
}

function wallyedit_form_createmode_add_form_submit($form,&$form_state){
  wydit_subform_global_add_form_submit($form,$form_state);

  $form = ctools_build_form('wallyedit_form_page_createmode_form', $form_state);
  $commands[] = ctools_ajax_command_html('#wallyedit_container',$form);
  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());
  
  ctools_ajax_render($commands); 
}

function wallyedit_form_editmode_add_form_submit($form,&$form_state){
  wydit_subform_global_add_form_submit($form,$form_state);

  $form = ctools_build_form('wallyedit_form_page_editmode_form', $form_state);
  $commands[] = ctools_ajax_command_html('#wallyedit_container',$form);
  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());

  ctools_ajax_render($commands);
}

function wydit_subform_global_add_form_submit($form,&$form_state){
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  ctools_include('object-cache');

  $node = node_submit($form_state['values'][$form_state['values']['type']]);

  $b=$node;

  $element['#node']=$b;
  $element['type']=$b->type;
  array_pop($form_state['values']["parents"]);
  wydit_add_to_form_state($form_state,$element,$form_state['values']["parents"],TRUE);

  wydit_clean_and_save_form_state($form_state);
}

function wallyedit_form_editmode_edit_form(&$form_state){
  $form = wydit_subform_global_edit_form($form_state);
  $form['#action'] = '/node/'.$form_state['cache name'].'/wydit_edit/ajax/'.$form_state['profile_id'];
  return $form;
}

function wydit_subform_global_edit_form(&$form_state){
  $node=wydit_get_current_node_from_parents($form_state);

  $type_name=$node->type;

  $form['#tree']=TRUE;

  //@todo: target should be parents ?
  $target=array_merge($form_state['parents'],array("#node"));
  $form['target']=array('#type'=>'value','#value'=>$target);
  $form['parents']=array('#type'=>'value','#value'=>$form_state['parents']);
  $form['type']=array('#type'=>'value','#value'=>$node->type);

  $a=array("#tree"=>true);
  $a=drupal_retrieve_form($type_name.'_node_form',$a,$node);
  $a['#tree']=true;

  drupal_prepare_form($type_name.'_node_form',$a,$form_state);

  unset($a["#type"]);
  unset($a["form_id"]);
  unset($a["#parents"]);
  $form[$type_name] = array("#type"=>'fieldset');

  foreach($a as $element_name=>$value){
    $form[$type_name][$element_name] = $value;
  }

  wydit_prepare_primary_package_form($form[$type_name], $form_state, $type_name, array(0 => $type_name));

  wydit_remove_form_infos($form[$type_name]);

  $form['#tree']=true;
  
  $form['profile_id'] = array(
    '#type' => 'value',
    '#value' => $form_state['profile_id'],
  );

  $form["save_global"]=array(
    '#type'=>'submit',
    '#name'=>'save_global',
    "#value"=> 'Save AJAX',
  	'#attributes'=>array('class' => 'form-submit ctools-use-ajax'),
  );
  $form['#tree']=true;
  unset($form["#validate"]);
   $form['#theme'][] = "wallyedit_node_form";
  
  return $form;
}

function wallyedit_form_editmode_edit_form_submit(&$form,&$form_state){
  wydit_subform_global_edit_form_submit($form,$form_state);
  $form = ctools_build_form('wallyedit_form_page_editmode_form', $form_state, $form_state['values']['profile_id']);
  $commands[] = ctools_ajax_command_html('#wallyedit_container',$form);
  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());

  ctools_ajax_render($commands);
}

function wydit_subform_global_edit_form_submit(&$form,&$form_state){
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  ctools_include('object-cache');

  $node = &wydit_get_current_node_from_parents($form_state,$form_state['values']['parents']);

  $b = $form_state['values'][$form_state['values']['type']];
  
  $node = (object)((array)$b+(array) $node);

  wydit_add_to_form_state($form_state,$node,$form_state['values']['target']);
  wydit_clean_and_save_form_state($form_state);
}

function wallyedit_form_nodetypeselector_form(&$form_state){
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  ctools_include('object-cache');

  $type_name=$form_state['type'];

  $form=array('#tree'=>true);
  $form['#action']='/node/'.$form_state['cache name'].'/wydit_typeselector/ajax/'.$form_state['profile_id'];
  $field_infos=$form_state['fields_infos'];
  $parents=$form_state['parents'];
  $form['parents33']=array('#type'=>'value','#value'=>$form_state['parents']);

  $content_types=_content_type_info();

  foreach($field_infos['referenceable_types'] as $type_name=>$value){
    if($value)
      $options[$type_name]=$content_types["content types"][$type_name]['name'];
  }
  
  $form['parents']=array(
    "#type"=>'hidden',
    "#value"=>serialize($parents),
  );
  
  $form['cache name']=array(
    "#type"=>'hidden',
    "#value"=>$form_state['cache name'],
  );
  
  $form['profile_id'] = array(
    '#type' => 'value',
    '#value' => $form_state['profile_id'],
  );
  
  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Select the type of node to add'),
    '#options' => $options,
    "#required"=>true,
  );

  $form['back'] = array(
    '#type' => 'submit',
    "#name"=>'back',
    '#value'=>"back",
    '#attributes'=>array('class' => 'form-submit ctools-use-ajax'),
  );
  
  $form['next'] = array(
    '#type' => 'submit',
    "#name"=>'next',
    '#value'=>"next",
    '#attributes'=>array('class' => 'form-submit ctools-use-ajax'),
  );
  
  return $form;
}

function wallyedit_form_nodetypeselector_form_submit($form, &$form_state){
  ctools_include('form');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  ctools_include('object-cache');

  $commands=array();
  $values=$form_state['values'];
  $type=$values['type'];

  $node=new stdClass;
  $node->type=$type;

  $new_form_state['type']=$type;
  $new_form_state[$type]['#node']=$node;
  $new_form_state[$type]['type']=$type;
  $new_form_state['target']=$form_state["parents"];
  $new_form_state['parents']=$form_state["parents"];

  $new_form_state['cache name']=$form_state["cache name"];
  $new_form_state['profile_id']=$form_state['values']['profile_id'];

  $new_form = ctools_build_form('wallyedit_form_editmode_add_form', $new_form_state);
  $commands[] = ctools_ajax_command_html('#wallyedit_container', $new_form);

  $commands[] = ctools_ajax_command_html('#wallyedit_messages', theme_status_messages());

  ctools_ajax_render($commands);
}

function wydit_prepare_inline_form_element(&$form_element, $form_state, $element, $fields, $parents, $global_path=NULL){
  $type_name=$form_state['type'];
  module_load_include('inc','wallyedit','includes/page_form_display_tabs');
  $fields = wyditadmin_get_existing_fields($type_name);
  $flat_fields = wyditadmin_get_fields_flat($form_state['profile_id'], $type_name);

  $node=$form_state["#node"];

  $type_name=$form_state["type"];

  $form_state[$node->type]['#node']=$node->node;
  $form_state['type']=$node->type;
  $form_state['#node']=$form_state[$type_name]['#node'];
  //@todo: remove the node key prefere #node
  $form_state[$type_name]['node']=$node;

  $a=drupal_retrieve_form($type_name.'_node_form',$form_state,$form_state[$type_name]['node']);
  drupal_prepare_form($type_name.'_node_form',$a,$form_state);

  $form = array(
    '#title' => $form_element['#title'],
  	'#type' => 'fieldset',
    '#tree' => true,
    '#parents' => $parents,
  );
  unset($a["#type"]);
  unset($a["form_id"]);
  unset($a["#validate"]);
  unset($a["#parents"]);

  foreach(element_children($a) as $element_name){
    $a["#parents"]=$parents;
    $form[$element_name]=$a[$element_name];

    //WARNNING: FIELDS DOESN'T EXIST CAUSE THERE ARE FIELDS FROM THE MAIN CONTENT, SHOUL BRING FIELD INFO FROM NODEREFERENCE CONTENT TYPE
    //EDIT2: WTF ???
    if(isset($fields[$element_name]) and $flat_fields[$element_name]['display'] == 1){
      $form[$element_name]["#parents"] = $parents;
    }
  }

  wydit_prepare_primary_package_form($form, $form_state, $type_name, $parents, NULL, $global_path);

  $form['profile_id'] = array(
    '#type' => 'value',
    '#value' => $form_state['profile_id'],
  );
  
  wydit_remove_form_infos($form);

  $form_element=array($form);
}

function wydit_prepare_selectbox_form_element(&$form_element,&$form_state,$element,$fields,$parents){
  $form=array(
  	'#type' => 'fieldset',
    "#theme" => 'wydit_selector_theme',
    '#title' => $form_element['#title'],
  );

  foreach($form_state as $key=>$embed){
    $embed_node=$embed["#node"];
    if (isset($embed_node->title) && !empty($embed_node->title)) {
      $form[$key]['title']=array(
        "#type"=>"markup",
        "#value"=> $embed_node->title,
      );
      $form[$key]['type']=array(
        "#type"=>"markup",
        "#value"=> $embed_node->type,
      );
      $form[$key]['weight_'.$key]=array(
        '#type'=>'weight',
        "#default_value"=> $key,
        '#attributes' => array('class'=>'order_weightss'),
        "#parents"=>array_merge($parents,array("weight_".$key)),
      );
      $form[$key]['edit_action']=array(
        "#type"=>"submit",
        "#value"=>'edit',
        "#name"=>'edit__'.$parents[count($parents)-1].'_'.$key,
        '#attributes'=>array('class' => 'form-submit ctools-use-ajax'),
        "#parents"=>array_merge($parents,array("$key")),
      );
      $form[$key]['delete_action']=array(
        "#type"=>"submit",
        "#value"=>'remove',
        "#name"=>'remove__'.$parents[count($parents)-1].'_'.$key,
        '#attributes'=>array('class' => 'form-submit ctools-use-ajax'),
        "#parents"=>array_merge($parents,array("$key")),
      );
    } else {
      unset($form_state[$key]);
    }
  }

  $form['add_existing_action']=array(
    "#type"=>"submit",
    "#value"=>'add existing one',
    "#name"=>'add_existing__'.$parents[count($parents)-1],
    "#attributes"=>array('class' => 'form-submit ctools-use-ajax'),
    "#parents"=>array_merge($parents,array("add_existing"))
  );
  
  $form['add_new_action']=array(
    "#type"=>"submit",
    "#value"=>'add new one',
    "#name"=>'add_new__'.$parents[count($parents)-1],
    '#attributes'=>array('class' => 'form-submit ctools-use-ajax'),
    "#parents"=>array_merge($parents,array("add_new"))
  );
  
  $form_element=$form;
}

//___________________________________________________
function wydit_remove_form_infos(& $form){
  $form["#type"] = 'fieldset';
}

/**
 * Overloading of elements process functions
 */
function wydit_elements_process($element, $edit, &$form_state, $form) {
  if ($form['#tree']) {
    if ($element['#type'] == 'content_taxonomy_tree') {
      $element['#element_validate'] = array('wydit_elements_validate');
      $element['#value'] = $element['#default_value'];
    } elseif ($element['#type'] == 'date_combo') {
      $element['#element_validate'] = array('wydit_elements_validate');
    }
    $orig_process = $element['#process'][0];
    $element = $orig_process($element, $edit, &$form_state, $form[$form['type']['#value']]);
  }
  return $element;
}

/**
 * Overloading of elements validate functions
 */
function wydit_elements_validate($element, &$form_state) {
  if ($element['#tree']) {
    if ($element['#type'] == 'content_taxonomy_tree') {
      $field = $form_state['#field_info'][$element['#field_name']];
      $field_key  = $element['#columns'][0];
      
      $values = wydit_content_taxonomy_tree_form2data($element, $form_state, $field);
      
      //check for required fields
      //if $element['#value'] is empty, it's validated by form.inc
      //otherwise we have to check this by our own
      if ($field['required'] && is_null($values[0]['value']) && !empty($element['#value'])) {
        form_error($element[$field_key], t('!name field is required.', array('!name' => $element['#title'])));
      }
      if (($field['multiple'] >= 2) && (count($element['#value']) > $field['multiple'])) {
        form_error($element[$field_key], t('%name: this field cannot hold more than @count values.', array('%name' => t($field['widget']['label']), '@count' => $field['multiple'])));
      }
      
      form_set_value($element, $values, $form_state);
    } elseif ($element['#type'] == 'date_combo') {
      $form_values = $form_state['values'];
      $field_name = $element['#field_name'];
      $delta = $element['#delta'];
      $parents = $element['#parents'];
      
      // If the whole field is empty and that's OK, stop now.
      if (empty($element['#post'][$field_name]) && !$element['#required']) {
        return;
      }
      
      // Repeating dates have a different form structure, so get the
      // right item values.
      $item = $form_values;
      $posted = $element['#post'];
      foreach ($parents as $parent) {
        $item = isset($item[$parent]) ? $item[$parent] : $item;
        $posted = isset($posted[$parent]) ? $posted[$parent] : $posted;
      }
        
      $field = $form_state['#field_info'][$element['#field_name']];
      $from_field = 'value';
      $to_field = 'value2';
      $tz_field = 'timezone';
      $offset_field = 'offset';
      $offset_field2 = 'offset2';
      
      // Unfortunately, due to the fact that much of the processing is already
      // done by the time we get here, it is not possible highlight the field
      // with an error, we just try to explain which element is creating the
      // problem in the error message.
      $parent = $element['#parents'];
      $error_field = array_pop($parent);
      $errors = array();
    
      // Check for empty 'From date', which could either be an empty
      // value or an array of empty values, depending on the widget.
      $empty = TRUE;
      if (!empty($item[$from_field])) {
        if (!is_array($item[$from_field])) {
          $empty = FALSE;
        }
        else {
          foreach ($item[$from_field] as $key => $value) {
            if (!empty($value)) {
              $empty = FALSE;
              break;
            }
          }
        }
      }
      if ($empty) {
        $item = date_element_empty($element, $form_state);
        if (!$element['#required']) {
          return;
        }
      }
      // Don't look for further errors if errors are already flagged
      // because otherwise we'll show errors on the nested elements
      // more than once.
      elseif (!form_get_errors()) {
                    
        // Check todate input for blank values and substitute in fromdate
        // values where needed, then re-compute the todate with those values.
        if ($field['todate']) {
          $merged_date = array();
          $to_date_empty = TRUE;
          foreach ($posted[$to_field] as $part => $value) {
            $to_date_empty = $to_date_empty && empty($value) && !is_numeric($value);
            $merged_date[$part] = empty($value) && !is_numeric($value) ? $posted[$from_field][$part] : $value;
            if ($part == 'ampm' && $merged_date['ampm'] == 'pm' && $merged_date['hour'] < 12) {
              $merged_date['hour'] += 12;
            }
            elseif ($part == 'ampm' && $merged_date['ampm'] == 'am' && $merged_date['hour'] == 12) {
              $merged_date['hour'] -= 12;
            }
          }
                  
          // If all date values were empty and a date is required, throw 
          // an error on the first element. We don't want to create 
          // duplicate messages on every date part, so the error will 
          // only go on the first.  
          if ($to_date_empty && $field['todate'] == 'required') {
            $errors[] = t('Some value must be entered in the To date.');
          }
    
          $element[$to_field]['#value'] = $merged_date;
          
          // Call the right function to turn this altered user input into
          // a new value for the todate.
          $item[$to_field] = $merged_date;
        }
        else {
          $item[$to_field] = $item[$from_field];
        }
        
        $from_date = date_input_value($field, $element[$from_field]);
        if (!empty($field['todate'])) {
          $to_date = date_input_value($field, $element[$to_field]);
        }
        else {
          $to_date = $from_date;
        }
        
        // Neither the from date nor the to date should be empty at this point
        // unless they held values that couldn't be evaluated.
        if (!$field['required'] && (empty($from_date) || empty($to_date))) {
          $item = date_element_empty($element, $form_state);
          $errors[] = t('The dates are invalid.');
        }
        elseif (!empty($field['todate']) && $from_date > $to_date) {
          form_set_value($element[$to_field], $to_date, $form_state);
          $errors[] = t('The To date must be greater than the From date.');
        }
        else {
          // Convert input dates back to their UTC values and re-format to ISO
          // or UNIX instead of the DATETIME format used in element processing.
          $timezone = !empty($item[$tz_field]) ? $item[$tz_field] : $element['#date_timezone'];
          $timezone_db = date_get_timezone_db($field['tz_handling']);
          $item[$tz_field] = $timezone;
    
          $from_date = date_make_date($from_date, $timezone);
          $item[$offset_field] = date_offset_get($from_date);
          
          $to_date = date_make_date($to_date, $timezone);
          $test_from = date_format($from_date, 'r');
          $test_to = date_format($to_date, 'r');
          
          $item[$offset_field2] = date_offset_get($to_date);
          date_timezone_set($from_date, timezone_open($timezone_db));
          date_timezone_set($to_date, timezone_open($timezone_db));
          $item[$from_field] = date_format($from_date, date_type_format($field['type']));
          $item[$to_field] = date_format($to_date, date_type_format($field['type']));
          if (isset($form_values[$field_name]['rrule'])) {
            $item['rrule'] = $form_values[$field['field_name']]['rrule'];
          }
          
          // Test a roundtrip back to the original timezone to catch
          // invalid dates, like 2AM on the day that spring daylight savings
          // time begins in the US.
          date_timezone_set($from_date, timezone_open($timezone));
          date_timezone_set($to_date, timezone_open($timezone));
          if ($test_from != date_format($from_date, 'r')) {
            $errors[] = t('The From date is invalid.');
          }
          if ($test_to != date_format($to_date, 'r')) {
            $errors[] = t('The To date is invalid.');
          }
          if (empty($errors)) {
            form_set_value($element, $item, $form_state);
          }
        }
      }
      if (!empty($errors)) {
        if ($field['multiple']) {
          form_set_error($error_field, t('There are errors in @field_name value #@delta:', array('@field_name' => $field['widget']['label'], '@delta' => $delta + 1)) . theme('item_list', $errors));
        }
        else {
          form_set_error($error_field, t('There are errors in @field_name:', array('@field_name' => $field['widget']['label'])) . theme('item_list', $errors));      
        }
      }
    }
  }
}

/**
 * Overloading of content_taxonomy_tree_form2data function
 */
function wydit_content_taxonomy_tree_form2data($element, &$form_state, $field) {
  $field_key  = $element['#columns'][0];
  $parents = $element['#parents'];
  $selected_terms = $form_state['values'];
  foreach ($parents as $parent) {
    $selected_terms = $selected_terms[$parent];
  }
  $selected_terms = $selected_terms[$field_key]['selected_terms'];
  
  if (!is_array($selected_terms) || !count($selected_terms)) {
    $selected_terms[] = NULL;
  }
  
  $form_state['#field_info'][$field['field_name']] = $field;
  return content_transpose_array_rows_cols(array($element['#columns'][0] => array_values($selected_terms)));
}

function wydit_get_infos_type($type_name){
  module_load_include("inc",'content','includes/content.node_form');
  $type = content_types($type_name);
  return $type;
}

function wydit_get_fields_infos_for_typename($type_name, $profile_id, $fields = 'fields'){
  static $merged_fields = array();
  
  if (!isset($merged_fields[$type_name.'_'.$fields][$profile_id])) {
    $type=content_types(str_replace('-','_', $type_name));

    $extra_fields_display = variable_get('wallyedit_extra_fields_display_'.$type->type.'_'.$profile_id, array());
    $groups_display = variable_get('wallyedit_groups_display_'.$type->type.'_'.$profile_id, array());
    $groups_display = array_merge(fieldgroup_groups($type_name), $groups_display);
    $arrays_to_merge = array(
      $extra_fields_display,
      $groups_display,
      $type[$fields],
    );

    $temp_merged_fields = call_user_func_array('array_merge', $arrays_to_merge);
    $temp_merged_fields['title']['display'] = 1;
    $merged_fields[$type_name.'_'.$fields][$profile_id] = $temp_merged_fields;
  }

  return $merged_fields[$type_name.'_'.$fields][$profile_id];
}

function wydit_get_inline_type($referencable_types){
  foreach($referencable_types as $key=>$value){
    if($value){
      return $value;
    }
  }
  return NULL;
}

//______________________________

function prenode_load($nid, $args) {
  $profile_arg = isset($args[4]) ? $args[4] : wallyedit_get_default_profile();
  $prenode = new Prenode($nid, FALSE, $profile_arg);
  $prenode->setCurrentProfile($profile_arg);
  return $prenode;
}

/**
 NODE PUBLICATION
 */
function wydit_publish_prenode(&$form_state,$sub_level=false){
  $form_state[$form_state['type']]=$form_state[$form_state['type']];
  $form_state['type']=$form_state['type'];

  $type_name=$form_state['type'];
  module_load_include('inc','wallyedit','includes/page_form_display_tabs');
  $fields = wyditadmin_get_fields_flat($form_state['profile_id'], $type_name);

  foreach($fields as $field){
    if($field['display']>1){
      $field_name = $field['name'];
      if(isset($form_state[$form_state['type']][$field_name])){
        foreach($form_state[$form_state['type']][$field_name] as $key=>$value){
          $nid=wydit_publish_prenode($form_state[$form_state['type']][$field_name][$key],TRUE);
          unset($form_state[$form_state['type']][$field_name][$key]);
          $form_state[$form_state['type']][$field_name][$key]['nid']=$nid;
        }
      }
      $form_state[$form_state['type']]['#node']->$field_name= $form_state[$form_state['type']][$field_name];
    }

  }
  return wydit_publish_prenode_save($form_state, $sub_level);
}

function wydit_publish_prenode_save(&$form_state, $sub_level){
  if($sub_level){
    $b=$form_state['#node'];
  }
  else{
    $b=$form_state[$form_state['type']]['#node'];
  }
  $node=node_save($b);

  return $b->nid;
}

/*
 FORM_STATE MANAGEMENT
 */

//Thx to JDE
function wydit_remove_element($a, $b, $level=0){
  foreach($a as $key => $value){
    if($key == $b[$level]){ //on atteint l'elem de $a correspondant au $path dans $b pour ce niveau de traitement
      if($level != (count($b)-1)){ //On est pas encore au dernier niveau de traitement
        if(is_array($value)){//logique car il y a encore des niveaux à traiter dans $b;
          $a[$key] = wydit_remove_element($value, $b, $level+1);
        }
      }
      else{
        unset($a[$b[$level]]);
      }
    }
  }
  return $a;
}

/**
 * Return tabs structure for fields management
 */
function wallyedit_get_onglets( $profile_id, $type_name,$form_state=array()) {
  //@TODO: Use static caching mecanism
  module_load_include("inc",'content','includes/content.node_form');
  module_load_include("inc",'content','includes/content.admin');
  module_load_include('inc', 'node', 'node.pages');
  $form = drupal_retrieve_form('content_field_overview_form', $form_state, $type_name);

  $node = new Stdclass;
  $node->type = $type_name;
  $node->name = '';
  $node_form = drupal_retrieve_form($type_name.'_node_form', $form_state, $node);
  drupal_prepare_form('node_form', $node_form, $form_state);

  $fields_and_groups = wydit_get_fields_infos_for_typename($type_name, $profile_id, 'fields');
  foreach (element_children($node_form) as $element_name) {
    if ($node_form[$element_name]['#type'] == 'fieldset') {
      wallyedit_add_new_group_to_fields($fields_and_groups, $node_form[$element_name], $element_name);
    }
  }

  //remove fields already included in a groups
  foreach ($fields_and_groups as $element_name => &$elem) {
    if (isset($elem['group'])) {
      $elem = $elem['group'];
    } elseif (isset($elem['field'])) {
      $elem = $elem['field'];
    } else {
      $elem = array_merge($form[$element_name], $elem);
      foreach ($elem as $key => &$value) {
        if (is_array($value) && isset($value['#value'])) {
          $value = $value['#value'];
        }
      }
    }
    
    if (isset($elem['group_name'])) {
      foreach($elem["fields"] as $key => $field) {
        unset($fields_and_groups[$key]);
      }
    }
  }

  $db_tabs = db_query('SELECT tid, name, label, weight, erasable FROM {wallyedit_tabs_config} WHERE pid = %d AND content_type = "%s"', $profile_id, $type_name);
  $tab_settings = db_fetch_array(db_query('SELECT tabs FROM {wallyedit_tabs_edition} WHERE pid = %d AND content_type = "%s"', $profile_id, $type_name));
  while (is_string($tab_settings['tabs'])) {
    $tab_settings['tabs'] = unserialize($tab_settings['tabs']);
  }
  $tab_settings = $tab_settings['tabs'];

  while ($db_tab = db_fetch_array($db_tabs)) {
    $onglets[$db_tab['name']] = $db_tab;
    $onglets[$db_tab['name']]['elements'] = array();
  }
  $onglets['no_tab'] = array(
    'name' => 'no_tab',
    'label' => t('Uncategorized'),
    'weight' => 1000,
    'erasable' => 0,
    'elements' => array(),
  );

  foreach ($fields_and_groups as $element_name => $element) {
    $element_settings = isset($tab_settings['level1'][$element_name]) ? $tab_settings['level1'][$element_name] : array();
    if (isset($onglets[$element_settings['onglet']])) {
      $tab_name = $element_settings['onglet'];
    } else {
      // Default tab for uncategorized elements
      $tab_name = 'no_tab';
    }
    if (isset($element['group_name'])) {
      // This is a group
      // Merge to edit weight
      $onglets[$tab_name]['elements'][$element_name] = array_merge($fields_and_groups[$element_name], $element_settings);
      foreach ($fields_and_groups[$element_name]['fields'] as $field_name => $field) {
        $element_settings['level2'][$field_name] = isset($element_settings['level2'][$field_name]) ? $element_settings['level2'][$field_name] : array();
        $onglets[$tab_name]['elements'][$element_name]['fields'][$field_name] = array_merge($fields_and_groups[$element_name]['fields'][$field_name], $element_settings['level2'][$field_name]);
      }
    } else {
      // This is a field
      $onglets[$tab_name]['elements'][$element_name] = array_merge($fields_and_groups[$element_name], $element_settings);
    }
  }

  return $onglets;
}

function wallyedit_add_new_group_to_fields(&$fields, $node_fields, $field_name) {
  $fields[$field_name]['group']['group_name'] = $field_name;
  $fields[$field_name]['group']['group_type'] = 'Standard group';
  $fields[$field_name]['group']['label'] = $node_fields['#title'];
  $fields[$field_name]['group']['weight'] = $node_fields['#weight'];
  
  $elem_child = element_children($node_fields);
  
  if (!empty($elem_child)) {
    $fields[$field_name]['group']['fields'] = array();
    foreach ($elem_child as $node_field_name) {
      $node_field = $node_fields[$node_field_name];
      $temp_field = array();
      $temp_field['field_name'] = $node_field_name;
      $temp_field['weight'] = 0;
      $temp_field['label'] = $node_field['#title'];
      $fields[$field_name]['group']['fields'][$node_field_name] = $temp_field;
    }
  }
}

/**
 *  Add "$element" in the structure of the $form_state based on the path of target 
 * 
 * @param: $form_state
 *   - the form_State of the preview object, this is an array.
 * @param: $element
 *   - the element to add to the form_state.
 * @param: $target
 *   - the place where add element in the form_state structure.
 * @param: $append
 *   - a boolean to indicate if the element should replace or added next the element specified by target
 * 
 * @return nothing, the form_state is passed by reference.
 */
function wydit_add_to_form_state(&$form_state,$element,$target,$append=FALSE){
  if(count($target)>0){
    if(isset($form_state[$target[0]])){
      $key=$target[0];
      array_shift($target);
      wydit_add_to_form_state($form_state[$key],$element,$target,$append);
    }
    else{
      $key=$target[0];
      $form_state[$target[0]]=array();
      array_shift($target);
      wydit_add_to_form_state($form_state[$key],$element,$target,$append);
    }
  }
  else{
    if($append===TRUE){
      $form_state[]=$element;
    }
    else{
      $form_state=$element;
    }
  }
}

function wydit_save_form_state($clean_form_state){
  ctools_object_cache_set('prenode', $clean_form_state['cache name'], $clean_form_state);
}

// here we sync the internal values of the main #node object
function wydit_clean_form_state($form_state){
  $a[$form_state['type']]=$form_state[$form_state['type']];
  $a['type']=$form_state['type'];
  $a['cache name']=$form_state['cache name'];
  $a['profile_id']=$form_state['profile_id'];
  
  $type_name=$form_state['type'];

  module_load_include('inc','wallyedit','includes/page_form_display_tabs');
  $fields = wyditadmin_get_fields_flat($form_state['profile_id'], $type_name);

  foreach($fields as $field){
    $field_name = $field['name'];
    if($field['display']>1){
      $a[$form_state['type']][$field_name]=array();
      if(isset($form_state[$form_state['type']][$field_name])){
        foreach($form_state[$form_state['type']][$field_name] as $key=>$value) {
          $a[$form_state['type']][$field_name][$key]['#node']=(object)((array)node_submit($form_state['values'][$form_state['type']][$field_name][$key])+(array)$form_state[$form_state['type']][$field_name][$key]['#node']);
          $a[$form_state['type']][$field_name][$key]['type']=$a[$form_state['type']][$field_name][$key]['#node']->type;
        }
      }
    }
  }

  return $a;
}

function wydit_clean_and_save_form_state(&$form_state){
  $form_state=wydit_clean_form_state($form_state);
  wydit_save_form_state($form_state);
  
}

function wydit_get_infos_groups($type_name){
  module_load_include("inc",'content','includes/content.node_form');
  $groups = array();
  if (module_exists('fieldgroup')) {
    $groups = fieldgroup_groups($type_name);
  }
  return $groups;
}

/**
 * Return the node associated with the hierarchical structure of the form state based on the path formed by parents.
 * 
 * @param: $form_state
 *   - the form_State of the preview object.
 * @param: $parents
 *   - the parents is an array representing the path in the form_state
 * 
 * @return a node object if found. null instead.
 */
function wydit_get_current_node_from_parents(&$form_state,$parents=NULL){

  if($parents==NULL)
  $parents=$form_state['parents'];

  $temp=$form_state;
  foreach($parents as $index=>$cursor_name){
    if(isset($temp[$cursor_name])){
      $temp=& $temp[$cursor_name];
    }
  }
  if($temp["#node"]){
    return $temp["#node"];
  }
  else return NULL;
}

function wydit_get_url_action($action, $nid){
  switch ($action){
    case 'edit':
      return 'node/'.$nid.'/edit/1';
      break;
    case 'delete':
      return 'node/'.$nid.'/delete2';
      break;
  }
}

/**
 */
function wydit_get_cache_name($nid = NULL) {
  global $user;

  if ($nid) {
    return $nid;
  } else {
    return md5(uniqid(rand(), TRUE));
  }
}

function wallyedit_action_info() {
  return array('wallyedit_selector_action' => array(
    'type' => 'node',
    'description' => t('Add thoses nodes to the prenode'),
    'configurable' => FALSE,
    'hooks'=> array('any'=>TRUE),
  ));
}

function wallyedit_node_operations(){
  $operations = array(
    'wallyedit_selector_action_batch' => array(
      'label' => t('Add thoses nodes to the prenode (batch)'),
      'callback' => 'wallyedit_node_operations_selector_action',
    ),
  );
  return $operations;
}

/**
 * Menu callback; Shared AHAH callback for uploads and deletions.
 *
 * This rebuilds the form element for a particular field item. As long as the
 * form processing is properly encapsulated in the widget element the form
 * should rebuild correctly using FAPI without the need for additional callbacks
 * or processing.
 * 
 * This a adaptation of filefield_js which handle the "tree" property of a form
 */
function wydit_filefield_js($type_name, $field_name, $delta) {
  $field = content_fields($field_name, $type_name);

  // Immediately disable devel shutdown functions so that it doesn't botch our
  // JSON output.
  $GLOBALS['devel_shutdown'] = FALSE;

  if (empty($field) || empty($_POST['form_build_id'])) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))), 'error');
    print drupal_to_js(array('data' => theme('status_messages')));
    exit;
  }

  // Build the new form.
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);

  if (!$form) {
    // Invalid form_build_id.
    drupal_set_message(t('An unrecoverable error occurred. This form was missing from the server cache. Try reloading the page and submitting again.'), 'error');
    print drupal_to_js(array('data' => theme('status_messages')));
    exit;
  }

  // Build the form. This calls the file field's #value_callback function and
  // saves the uploaded file. Since this form is already marked as cached
  // (the #cache property is TRUE), the cache is updated automatically and we
  // don't need to call form_set_cache().
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form['#post'] = $_POST;
  $form = form_builder($form_id, $form, $form_state);

  // Update the cached form with the new element at the right place in the form.
  if (module_exists('fieldgroup') && ($group_name = _fieldgroup_field_get_group($type_name, $field_name))) {
    if (isset($form['#multigroups']) && isset($form['#multigroups'][$group_name][$field_name])) {
      $form_element = $form[$group_name][$delta][$field_name];
    }
    else {
      $form_element = $form[$group_name][$field_name][$delta];
    }
  }

  if (!isset($form_element)) {
    $form_element = $form[$field_name][$delta];
  }
  
  if(!isset($form_element)){
    if (module_exists('fieldgroup') && ($group_name = _fieldgroup_field_get_group($type_name, $field_name))) {
      if (isset($form['#multigroups']) && isset($form['#multigroups'][$group_name][$field_name])) {
        $form_element = $form[$type_name][$group_name][$delta][$field_name];
      }
      else {
        $form_element = $form[$type_name][$group_name][$field_name][$delta];
      }
    }
    else {
      $form_element = $form[$type_name][$field_name][$delta];
    }
  }

  if (isset($form_element['_weight'])) {
    unset($form_element['_weight']);
  }

  $output = drupal_render($form_element);

  // AHAH is not being nice to us and doesn't know the "other" button (that is,
  // either "Upload" or "Delete") yet. Which in turn causes it not to attach
  // AHAH behaviours after replacing the element. So we need to tell it first.

  // Loop through the JS settings and find the settings needed for our buttons.
  $javascript = drupal_add_js(NULL, NULL);
  $filefield_ahah_settings = array();
  if (isset($javascript['setting'])) {
    foreach ($javascript['setting'] as $settings) {
      if (isset($settings['ahah'])) {
        foreach ($settings['ahah'] as $id => $ahah_settings) {
          if (strpos($id, 'filefield-upload') || strpos($id, 'filefield-remove')) {
            $filefield_ahah_settings[$id] = $ahah_settings;
          }
        }
      }
    }
  }

  // Add the AHAH settings needed for our new buttons.
  if (!empty($filefield_ahah_settings)) {
    $output .= '<script type="text/javascript">jQuery.extend(Drupal.settings.ahah, '. drupal_to_js($filefield_ahah_settings) .');</script>';
  }

  $output = theme('status_messages') . $output;

  // For some reason, file uploads don't like drupal_json() with its manual
  // setting of the text/javascript HTTP header. So use this one instead.
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}

function wallyedit_node_operations_selector_action($nodes,$context,$b,$c){
  $cache_name=$context['arguments'][0];
  $target=explode('/',$context['arguments'][1]);
  array_pop($target);

  $prenode=new Prenode($cache_name);
  $form_state=$prenode->getFormState();

  foreach($nodes as $nid){
    $node=node_load($nid);
    $element['#node']=$node;
    $element['type']=$node->type;
    wydit_add_to_form_state($form_state,$element,$target,TRUE);
  }
  
  wydit_clean_and_save_form_state($form_state);
}

function wallyedit_selector_action($node, $context, $a, $b, $c) {
  /*
   $roles = $user->roles;
   $selected = (is_array($context['add_roles']) ? $context['add_roles'] : array()) +
   (is_array($context['remove_roles']) ? $context['remove_roles'] : array());
   $result = db_query("SELECT rid, name FROM {role} WHERE rid IN (%s)", implode(',', array_keys($selected)));
   while ($role = db_fetch_object($result)) {
   if (isset($context['add_roles'][$role->rid])) {
   $add_roles[$role->rid] = $role->name;
   }
   if (isset($context['remove_roles'][$role->rid])) {
   $remove_roles[$role->rid] = $role->name;
   }
   }
   if (!empty($add_roles)) {
   $roles += $add_roles;
   }
   if (!empty($remove_roles)) {
   $roles = array_diff($roles, $remove_roles);
   }
   user_save($user, array('roles' => $roles));
   */
}

/**
 * Convert a type name is a real name which can be used as title.
 * 
 * @param string $type
 *   The type name to be converted.
 * 
 * @return
 *   The converted name.
 */
function _wallyedit_convert_type_to_title($type) {
  $expl_type = explode('_', $type);
  $expl_type = explode('object', $expl_type[1]);
  return ucfirst($expl_type[0]);
}

function wallyedit_add_more_submit_proxy($form, &$form_state) {
  module_load_include('inc', 'wallyedit', 'includes/wallyedit.node_form');
  wallyedit_add_more_submit($form, $form_state);
}
