<?php

/**
 * Implementation of hook_menu().
 */
function wallyflowmix_menu() {
  $items = array();

   $items['admin/wally/wallyflowmix/adminflow/edit/%flowid'] = array(
    'title' => 'Wally RSS to node Feeds',
    'page callback' => 'wallyflowmix_page_admin_add_wizzard',
    'page arguments' => array('wallyflowtonode_page_admin'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to set paramaters for this module to function properly.',
    'file' => 'includes/wallyflowmix.add.wizzard.inc',
    'type'=>MENU_LOCAL_TASK, 
  );
  return $items;

}
function wallyflowmix_theme(){
  return array(
    'wallyflowmix_contenttype_summary_form'=>array(
      'arguments'=>array('form'=>array())
    ),  
  );

}











































function wallyflowmix_contenttype_summary_form(&$form, &$form_state) {
  $flowmix_item = &$form_state['conf']['flow_obj'];
  dsm($flowmix_item,'FLOWMIX');
  
  
  foreach($flowmix_item->flows as $key=>$flow){
    $form['flows'][$key]['edit_action']=array(
      '#type'=>'submit',
      '#value'=>'Edit',
      '#wizard type'=>'next',
      '#name'=>'edit_'.$key,
      '#next'=>'step5'
      ); 
    $form['flows'][$key]['delete_action']=array(
      '#type'=>'submit',
      '#value'=>'Remove',
      '#wizard type'=>'next',
      '#name'=>'delete_'.$key,
      '#next'=>'step5'
      ); 
       
    $form['flows'][$key]['title']=array(
      '#type'=>'markup',
      '#value'=>$flow->name,
      ); 
      
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('RSS feed name'),
    '#description' => t('The name you want to give to this feed.'),
    '#default_value' => $flowmix_item->name,
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
    '#weight' => 0,
  );
  
  $form['maxitem_global'] = array (
    '#type'             => 'textfield',
    '#title'            => t('Max item displayed in the final mixed feed'),
    '#default_value'    => $flowmix_item->maxitem_global,
    '#required'         => TRUE,
  );
  
  $form['maxitem_byfeed'] = array (
    '#type'             => 'textfield',
    '#title'            => t('Max item to fetch by feed'),
    '#default_value'    => $flowmix_item->maxitem_byfeed,
    '#required'         => TRUE,
  );
  
  $mix_schemas = array(
    'alt'               => 'Alternate',
    'any'               => 'Most Recent'
  );
  
  $form['mix_schema'] = array(
    '#type'             => 'select',
    '#title'            => t('Schema used for mixing the feeds'),
    '#default_value'    => $flowmix_item->mix_schema,
    '#options'          => $mix_schemas,
  );
  
  $form['own_schema'] = array (
    '#type'             => 'textfield',
    '#title'            => t('Define your own schema used for mixing the feeds'),
    '#description'      => t('Examples:
        1,2,3 / 1-2,3,2,1-3,2,2-3 / any,2,1-2,3,any,2 / ... see <a href="http://rossel.audaxis.com/xwiki/wiki/drupal/view/Main/User_RSS_mix" target="_new">RSS mix documentation</a>.
      '),
    '#default_value'    => $flowmix_item->own_schema,
    '#required'         => FALSE,
  );
  
  $form['get_distant_img'] = array (
    '#type'             => 'checkbox',
    '#default_value'    => $flowmix_item->get_distant_img,
    '#title'            => 'Copy RSS feeds images to locale folder.',
  );

  $form['override_theme'] = array (
    '#type'             => 'checkbox',
    '#default_value'    => $flowmix_item->override_theme,
    '#id'               =>  'override-theme-checkbox',
    '#title'            => 'Override Theming Function',
  );

  $form['override_theme_text'] = array (
    '#type'             => 'textfield',
    '#default_value'    => $flowmix_item->override_theme_text,
    '#id'               => 'override-theme-textfield',
    '#dependency'       => array('override-theme-checkbox'=>array('1')),
    '#dependency_type'  => 'disable',
    '#process'          => array('ctools_dependent_process'),
    '#title'            => 'Theming Function Name',
  );
  
  ctools_include('dependent');
  ctools_add_js('dependent');

  $form['reusable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make this content reusable'),
    '#default_value' => FALSE,
  );
  
  $form['admin_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Administrative title'),
    '#description' => t('The title used as name for the reusable block.'),
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('edit-reusable' => array(1)),
  );

  $form['machine_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine name'),
    '#description' => t('The machine readable name of this content. It must be unique, and it must contain only alphanumeric characters and underscores. Once created, you will not be able to change this value!'),
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('edit-reusable' => array(1)),
  );

  $form['category'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#description' => t('What category this content should appear in. If left blank the category will be "Wally reusable blocks".'),
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('edit-reusable' => array(1)),
  );

  $form['admin_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Administrative description'),
    '#description' => t('A description of what this content is, does or is for, for administrative use.'),
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('edit-reusable' => array(1)),
  );
  
  
    unset($form['buttons']['cancel']);
    if(count($flowmix_item->flows)){
      $form['buttons']['save'] = array(
      '#type'=>'submit',
      '#value'=>'Save',
      '#wizard type'=>'finish',
      '#name'=>'save',
      );   
    }
    $form['buttons']['add_flow'] = array(
    '#type'=>'submit',
    '#value'=>'Add a new flow',
    '#wizard type'=>'next',
    '#name'=>'next_'.count($flowmix_item->flows),
    '#next'=>'step2'
    ); 
    
    
  
}

function wallyflowmix_contenttype_summary_form_submit(&$form, &$form_state) {
  
  $flowmix_item = &$form_state['conf']['flow_obj'];
  $submitted = $form_state['values'];
  $save_values = array('name','maxitem_global','maxitem_byfeed','mix_schema','own_schema','get_distant_img','override_theme','override_theme_text'); 
  foreach($save_values as $value) {
    // set the values in the cache object -- it gets passed back to the next step
   // because of all that work we did in the form_info array
    $form_state['conf']['flow_obj']->$value = $submitted[$value];
    
  }
  if($form_state['step']=='step1'){
    dsm($form_state);
    $flowmix_item->index=count($form_state['conf']['flow_obj']->flows);
  }
}

function wallyflowmix_contenttype_basicsetttings_form(&$form, &$form_state) {
  
  $flowmix_item = &$form_state['conf']['flow_obj'];
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('RSS feed name'),
    '#description' => t('The name you want to give to this feed.'),
    '#default_value' => $flowmix_item->flows[(int)$flowmix_item->index]->name,
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
    '#weight' => 0,
  );
  
  $form['uri'] = array(
    '#type' => 'textfield',
    '#title' => t('RSS feed URI'),
    '#description' => t('URI of the requested RSS feed.'),
    '#default_value' => $flowmix_item->flows[(int)$flowmix_item->index]->uri,
    '#size' => 80,
    '#maxlength' => 512,
    '#required' => TRUE,
    '#weight' => 0.1,
  );
  
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type of flow'),
    '#default_value' => $flowmix_item->flows[(int)$flowmix_item->index]->types,
  '#required' => TRUE,
    '#options' => test_get_availlable_flow_type(),
    '#weight' => 0.11,
  );
  
  
  
  $body_html_options = array();
  $body_html_query = db_query("SELECT * FROM `filter_formats");
  $i = 0;
  while ($body_html_element = db_fetch_array($body_html_query)) {
    $body_html_options[] = $body_html_element['name'];
    if ($body_html_element['name'] == $default_form_values['body_html'])
      $default_body_html = $i;
    $i++;
  }

  $form['bodyhtml'] = array(
    '#type' => 'select',
    '#title' => t('Use HTML in the text body'),
    '#description' => t('Use HTML in the text body.'),
    '#options' => $body_html_options,
    '#default_value' => $flowmix_item->flows[(int)$flowmix_item->index]->bodyhtml,
      '#weight' => 0.2,
  );
  
  $minutes_list = array();
  for ($i=1; $i<=60; $i++) $minutes_list[$i] = $i;
  
  $form['deltat'] = array(
    '#type' => 'select',
    '#title' => t('Time between updates'),
    '#description' => t('Time, in minutes, between updates for this feed.'),
    '#options' => $minutes_list,
    '#default_value' => $flowmix_item->flows[(int)$flowmix_item->index]->deltat,
      '#required' => TRUE,
    '#weight' => 1,
  );
  // probably important -- i'm continuing to investigate
  $form_state['no buttons'] = TRUE; 
}

/*
 * 
 * 
 */
function wallyflowmix_contenttype_basicsetttings_form_validate(&$form, &$form_state) {
  $uri_response = drupal_http_request($form['wallyflowmix_uri']['#value']);
  if ($uri_response->status_message != 'OK') {
  //  form_set_error('wallyflowmix_uri', t('The URI doesn\'t respond.'));
  }
  
}
function wallyflowmix_contenttype_basicsetttings_form_submit(&$form, &$form_state) {
  $flowmix_item = &$form_state['conf']['flow_obj'];
  $submitted = $form_state['values'];
  $save_values = array('name', 'uri', 'type','bodyhtml','deltat'); 
  // maybe don't imitate this foreach
  $obj=new stdClass();
  foreach($save_values as $value) {
    // set the values in the cache object -- it gets passed back to the next step
   // because of all that work we did in the form_info array
    $obj->$value = $submitted[$value];
    
  }
  $form_state['conf']['flow_obj']->flows[(int)$flowmix_item->index] =$obj;
}


function wallyflowmix_contenttype_pluginselector_form(&$form, &$form_state) {
  $flowmix_item = &$form_state['conf']['flow_obj'];
  $possible_plugins=test_get_plugins_that_handle_type($flowmix_item->flows[$flowmix_item->index]->type);
  foreach($possible_plugins as $plugin_name=>$plugin){
    $options[$plugin_name]=$plugin['name'];
    $dl="<dt>".$plugin['name']."</dt><dd>".$plugin['description']."</dd>";
  }
  $dl="<dl>".$dl."</dl>";
  $form['plugin_name'] = array(
    '#type' => 'radios',
    '#tree' => true,
    '#options' => $options,
    '#title' => 'Select A plugin',
    '#default_value' => $flowmix_item->flows[(int)$flowmix_item->index]->plugin_name,
    '#description' => $dl,
  '#required' => 1,
  );
  
  
  $form_state['no buttons'] = TRUE; 
}

function wallyflowmix_contenttype_pluginselector_form_submit(&$form, &$form_state) {
  $flowmix_item = &$form_state['conf']['flow_obj'];
  $submitted = $form_state['values'];
  $save_values = array('plugin_name'); 
  foreach($save_values as $value) {
    // set the values in the cache object -- it gets passed back to the next step
   // because of all that work we did in the form_info array
    $form_state['conf']['flow_obj']->flows[$flowmix_item->index]->$value = $submitted[$value];
    
  }
  
 // $flowmix_item= $form_state['conf']['flow_obj']->flows[$flowmix_item->index];
  // Remove pluginspecific step if no need
  if( isset($flowmix_item->plugin_name) && test_has_settings_form_of_plugin(test_get_plugin_by_name($flowmix_item->plugin_name))){
  $form_state['clicked_button']['#next']='step3';
  }
  
  
}

function wallyflowmix_contenttype_pluginspecific_form(&$form, &$form_state) {
  $flowmix_item = &$form_state['conf']['flow_obj'];
  $form['conf']=array('#tree'=>true);
  test_get_settings_form_of_plugin(test_get_plugin_by_name($flowmix_item->flows[(int)$flowmix_item->index]->plugin_name),$form['conf'],$form_state['conf']['flow_obj']->conf);
    
  // probably important -- i'm continuing to investigate
  $form_state['no buttons'] = TRUE; 
}
function wallyflowmix_contenttype_pluginspecific_form_submit(&$form, &$form_state) {
  $conf = $form_state['values']['conf'];
  $form_state['conf']['flow_obj']->flows[(int)$flowmix_item->index]->conf = $conf;
    
  
}

function wallyflowmix_contenttype_finalstep_form(&$form, &$form_state) {
  $flowmix_item = &$form_state['wombat_obj'];
  $form['direct_process'] = array(
    '#type' => 'checkbox',
    '#required' => 1,
    '#title' => 'Direct process',
    '#default_value' => $form_state['conf']['flow_obj']->flows[(int)$flowmix_item->index]->direct_process,
  );
  unset($form['buttons']['return']);
  
 $form['buttons']['Ok'] = array(
    '#type'=>'submit',
    '#value'=>'Ok',
    '#wizard type'=>'next',
    '#name'=>'next_'.max(0,count($flowmix_item->flows)-1),
    '#next'=>'step1'
    );   
  // probably important -- i'm continuing to investigate
  $form_state['no buttons'] = TRUE; 
  
  
  
  
}
function wallyflowmix_contenttype_edit_form(&$form, &$form_state){

}
function wallyflowmix_contenttypte_finalstep_form_submit(&$form, &$form_state) {
  $form_state['clicked_button']['#next']='step1';
   
}

/**
 * Return the unique cart_id of the user.
 */
function wallyflowmix_get_cache_name($flow_id){
  global $user;

  if($flow_id!='new'){
    return $flow_id;
  }
  if ($user->uid) {
    $cache_name= $user->uid;
  }
  elseif (!isset($_SESSION['liste_cart_id'])) {
    $cache_name= $_SESSION['liste_cart_id'] = md5(uniqid(rand(), TRUE));
  }

  return 'wftn_'.$cache_name;
}




function theme_wallyflowmix_contenttype_summary_form($form){

foreach(element_children($form['flows']) as $key=>$flow_form){
  dsm("");
  $row=array(
    drupal_render($form['flows'][$key]['title']),
    drupal_render($form['flows'][$key]['edit_action']).drupal_render($form['flows'][$key]['delete_action']),
  );
  
  $rows[]=$row;
}

dsm($rows);

if(count($form['flows'])){
$table_output.=theme('table',array('titre','action'),$rows);
$button_add_flow_output.=drupal_render($form['buttons']['add_flow']);
}

$output_after=drupal_render($form);

$output.=$table_output;
$output.=$button_add_flow_output;

$output.=$output_after;


return $output;

}