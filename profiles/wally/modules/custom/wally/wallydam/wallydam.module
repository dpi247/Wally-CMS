<?php 

/**
 * Implementation of hook_menu().
 */
function wallydam_menu() {
  $items = array();

  $items['admin/wally/wallydam'] = array(
    'title' => t('Wally DAM Settings'),
    'page callback' => 'wallydam_page_admin_packages_sync',
    'access arguments' => array('access administration pages'),
    'description' => t('Manage DAM communications settings.'),
    'file' => 'includes/wallydam.admin.inc',
  );

  $items['admin/wally/wallydam/packagessync'] = array(
    'title' => t('Packages synchronization'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_packages_sync_form'),
    'access arguments' => array('access administration pages'),
    'description' => t('Packages synchronization settings'),
    'file' => 'includes/wallydam.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/wally/wallydam/search'] = array(
    'title' => t('DAM Search'),
    'page callback' => 'wallydam_page_admin_search',
    'access arguments' => array('access administration pages'),
    'description' => t('DAM Search settings'),
    'file' => 'includes/wallydam.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/wally/wallydam/search/edit/%'] = array(
    'title' => t('Edit'),
    'description' => t('Edit an existing DAM search profile.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_search_edit_profile_form', 5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/wallydam.admin.inc',
  );

  $items['admin/wally/wallydam/search/delete/%'] = array(
    'title' => t('Delete'),
    'description' => t('Delete a DAM search profile.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_search_delete_profile_form', 5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/wallydam.admin.inc',
  );

  $items['admin/wally/wallydam/search/setdefault/%'] = array(
    'title' => t('Set as default'),
    'description' => t('Set a DAM search profile as default profile.'),
    'page callback' => 'wallydam_page_admin_search_set_default_profile',
    'page arguments' => array(5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/wallydam.admin.inc',
  );

  $items['admin/wally/wallydam/archive'] = array(
    'title' => t('Archive recovery'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_archive_form'),
    'access arguments' => array('access administration pages'),
    'description' => t('Packages recovery settings'),
    'file' => 'includes/wallydam.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  $items['admin/wally/wallydam/addsource'] = array(
    'title' => t('Add Source'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_source_form'),
    'access arguments' => array('access administration pages'),
    'description' => t('Add a new source'),
    'file' => 'includes/wallydam.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/wally/wallydam/editsource/%'] = array(
    'title' => t('Edit Source'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_source_form', 4),
    'access arguments' => array('access administration pages'),
    'description' => t('Add a new source'),
    'file' => 'includes/wallydam.admin.inc',
  );
  $items['admin/wally/wallydam/deletesource/%'] = array(
    'title' => t('Delete Source'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_source_delete_form', 4),
    'access arguments' => array('access administration pages'),
    'description' => t('Delte a source'),
    'file' => 'includes/wallydam.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function wallydam_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  switch ($op){
    case 'presave':
      if ($node->nid === NULL && $node->field_source[0]['value'] == NULL){
        //Set the source to dpi247 if a new node without source
        $node->field_source[0]['value'] = 'dpi247';
      }
      break;
    case 'insert':
      //Publish : node save
      if ($node->type == 'wally_articlepackage' || $node->type == 'wally_gallerypackage' || $node->type == 'wally_pollpackage'){

        //URL Alias Update
        $url = $node->path;
        if (!isset($node->path)){
          $url = 'node/'.$node->nid;
        }
        wallydam_addurltobuffer($node->nid, $url);
        
        //Package Update
        $source = wallydam_getsourcebyname($node->field_source[0]['value']);
        if ($source->archive == 1 && ($source->archive_from_wallymport == 1 || !isset($node->wallymport_node))){
          //If the package is to archived and it's not from wallymport or archive_from_wallymport is set to one, the package is saved
          wallydam_addpackagetobuffer($node->nid);
        } elseif ($source->archive == 1 && $source->archive_from_wallymport == 0 && isset($node->wallymport_node)){
          //If the package is from wallymport and archive from wallymport is set to 0, the package is deleted from the buffer.
          wallydam_removepackagefrombuffer($node->nid);
        }
      }
      break;

    case 'update':
      if ($node->type == 'wally_articlepackage' || $node->type == 'wally_gallerypackage' || $node->type == 'wally_pollpackage'){
        //Package update
        $source = wallydam_getsourcebyname($node->field_source[0]['value']);
        if ($source->archive == 1 && ($source->archive_from_wallymport == 1 || !isset($node->wallymport_node))){
          //If the package is to archived and it's not from wallymport or archive_from_wallymport is set to one, the package is saved
          wallydam_addpackagetobuffer($node->nid);
        } elseif ($source->archive == 1 && $source->archive_from_wallymport == 0 && isset($node->wallymport_node)){
          //If the package is from wallymport and archive from wallymport is set to 0, the package is deleted from the buffer.
          wallydam_removepackagefrombuffer($node->nid);
        }

        //URL Alias Update (update only if the Alias is modified)
        if ($node->path != $node->old_alias && $node->field_externaluri[0]['value'] == NULL){
          $url = $node->path;
          if (!isset($node->path)){
            $url = 'node/'.$node->nid;
          }
          wallydam_addurltobuffer($node->nid, $url);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter
 */
function wallydam_form_alter(&$form, &$form_state, $form_id){

  //Add a submit when an alias is edited in admin/build/path/list
  if ($form_id == 'path_admin_form'){
    $form['#submit'][] = 'wallydam_form_path_admin_form_submit';
  }

  //Add a submit when the action pathauto_update_alias is choose in bulk operation
  if (preg_match('/^views_bulk_operations_form/', $form_id)
      && isset($form_state['values']['operation'])
      && preg_match('/^pathauto_node_update_alias_multiple/', $form_state['values']['operation'])){
    //Store the nodes choosed by the user to know in the submit wich node as been updated
    $storage = array();
    foreach ($form_state['storage']['selection'] as $key => $value){
      $node = node_load(array('nid' => $key));
      $storage[$key] = array('old_alias' => $node->path);
    }
    $form['wallydam'] = array(
      '#type' => 'value',
      '#value' => $storage,
    );
    $form['#submit'][] = 'wallydam_pathauto_node_update_alias_multiple_submit';
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function wallydam_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => 1);
  }
  return array(
    'version' => 2,
  );
}

/**
 * Submit for the form path_admin_form
 */
function wallydam_form_path_admin_form_submit($form, &$form_state){
  //If src is like node/nid we need to add the new alias to the buffer
  if (preg_match('/^node\/(?P<nid>\d+)$/', $form_state['values']['src'], $matches)) {
    wallydam_addurltobuffer($matches['nid'], $form_state['values']['dst']);
  }
}

/**
 * submit for the bulk operation with action pathauto_node_update_alias_multiple
 */
function wallydam_pathauto_node_update_alias_multiple_submit($form, &$form_state){
  //If the old alias is different from the new one, the new alias is add to the buffer
  foreach ($form_state['values']['wallydam'] as $key => $value){
    $node = node_load(array('nid' => $key));
    if ($value['old_alias'] != $node->path){
      wallydam_addurltobuffer($node->nid, $node->path);
    }
  }
}

/**
 * Implementation of hook_cron
 */
function wallydam_cron(){
  //Packages
  
  $max_number = wally_variable_get('wallydam_cronmaxnumber', 50);
  $result = db_query("SELECT nid
      FROM {wallydam_packagestosend}
      ORDER BY timestamp ASC LIMIT %d", $max_number);
  while ($obj = db_fetch_object($result)){
    if ( wallydam_postpackage($obj->nid)){
      wallydam_removepackagefrombuffer($obj->nid);
    }
  }

  //URL
  $result = db_query("SELECT nid, url
      FROM {wallydam_urltosend}
      ORDER BY timestamp ASC LIMIT %d", $max_number);
  while ($obj = db_fetch_object($result)){
    $node = node_load($obj->nid);
    if (wallydam_posturl($node, $obj->url)){
      wallydam_removeurlfrombuffer($obj->nid);
    }
  }
}

/**
 * GET of informations of the node.
 *
 * Send the informations of the node (nodeid, packageid and url) to pandam
 *
 * @param $node
 *   Node
 */
function wallydam_posturl($node, $node_url){
  $sent = FALSE;
  
  //Send the URL in POST
  $target_url = wally_variable_get('wallydam_updateurl', '');
  if ($target_url != ''){
    $package_id = $node->field_externalreference[0]['value'];
    $postfields = array('commonId' => $package_id, 'url' => $node_url);
    $sent = wallydam_post($postfields, $target_url);
  } else {
    drupal_set_message(t('The URL where the package is being posted is not specified'),'error');
  }
  
 
  return $sent;
  
}

/**
 * Add the package to the buffer
 *
 * Add the package to the buffer, each time the cron is running, the packages who are in the buffer will be sent to the DAM
 *
 * @param nid
 *
 * nid of the node
 */
function wallydam_addpackagetobuffer($nid){

  $result = db_query("SELECT nid FROM {wallydam_packagestosend} WHERE nid = %d", $nid);
  if (!db_result($result)){
    $row = new stdClass();
    $row->nid = (int)$nid;
    $row->timestamp = time();
    drupal_write_record('wallydam_packagestosend', $row);
  }
}

/**
 * Add the url to the buffer
 *
 * Add the url to the buffer, each time the cron is running, the url of the nid who are in the buffer will be sent to the DAM
 *
 * @param nid
 *
 * nid of the node
 */
function wallydam_addurltobuffer($nid, $path){
  $row = new stdClass();
  $row->nid = $nid;
  $row->url = url($path, array('alias' => TRUE, 'absolute' => TRUE));
  $row->timestamp = time();
  drupal_write_record('wallydam_urltosend', $row);

}

/**
 * Remove the package from the buffer
 *
 * @param nid
 *
 * nid of the node
 */
function wallydam_removepackagefrombuffer($nid){
  $result = db_query("DELETE FROM {wallydam_packagestosend} WHERE nid = %d", $nid);
}

/**
 * Remove the the from the buffer
 *
 * @param nid
 *
 * nid of the node
 */
function wallydam_removeurlfrombuffer($nid){
  $result = db_query("DELETE FROM {wallydam_urltosend} WHERE nid = %d", $nid);
}

/**
 * POST the node Package.
 *
 * POST the package of the node to pandam
 *
 * @param $node
 *   Node
 */
function wallydam_postpackage($nid){
  //Export package
  $sent = FALSE;
  $result = wallyexport_export_packages(array($nid));
  if ($result[0] == 'Zip success : '.$nid){
    //Send package in POST
    $target_url = wally_variable_get('wallydam_updatepackageurl', '');
    if ($target_url != ''){
      $path_to_file = wally_variable_get('wallyexport_admin_source', 'sites/default/files/export').'/Wally_'.$nid.'.zip';
      $postfields = array('package'=>'@'.$path_to_file);
      $content_type = 'application/zip';
      
      $sent = wallydam_post($postfields, $target_url, $content_type);
    } else {
      drupal_set_message(t('The URL where the package is being posted is not specified'),'error');
    }

  }
  else {
    drupal_set_message(t('The Export of the package (NID : '.$nid.') failed. The package has not be sent to the DAM') );
  }
  return $sent;
}

/**
 * POST
 *
 * @param $postfields
 *   fields to post (in array)
 * @param $target_url
 *   url
 * @param  $result
 *   Le résultat du post.
 */
function wallydam_post($postfields, $target_url, $content_type = NULL, $return_result = FALSE) {
  //Envoi un fichier en post.

  $ch = curl_init($target_url);

  if ($content_type != NULL) {
    curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: ".$content_type));
  }
  curl_setopt($ch, CURLOPT_POSTFIELDS, $postfields);

  if ($return_result) {
    ob_start();
  }

  $result = curl_exec($ch);

  $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  if ($http_status != 200) {
    $return = FALSE;
    drupal_set_message(curl_error($ch), 'error');
  } else {
    if (!$return_result) {
      drupal_set_message($result);
    }
    $return = TRUE;
  }

  curl_close($ch);

  if ($return && $return_result) {
    $return = ob_get_contents();
    ob_end_clean();
  }

  return $return;
}

/**
 * Return list of DAM search profiles
 */
function wallydam_get_search_profiles() {
  static $profiles = array();
  if (empty($profiles)) {
    $db_profiles = db_query('SELECT * FROM {wallydam_search_profiles}');
    while ($profile = db_fetch_array($db_profiles)) {
      $profile['settings'] = unserialize($profile['settings']);
      $profiles[$profile['pid']] = $profile;
    }
  }
  return $profiles;
}

/**
 * Return a DAM search profile
 */
function wallydam_get_search_profile($pid) {
  static $profiles = array();

  if (!isset($profiles[$pid])) {
    if (is_numeric($pid)) {
      $db_profiles = db_query('SELECT * FROM {wallydam_search_profiles} WHERE pid = %d', $pid);
      if ($profile = db_fetch_array($db_profiles)) {
        $profile['settings'] = unserialize($profile['settings']);
        $profiles[$pid] = $profile;
      }
    }

    $db_profiles = db_query('SELECT * FROM {wallydam_search_profiles} WHERE name = "%s"', $pid);
    if ($profile = db_fetch_array($db_profiles)) {
      $profile['settings'] = unserialize($profile['settings']);
      $profiles[$pid] = $profile;
    }
  }

  return isset($profiles[$pid]) ? $profiles[$pid] : NULL;
}

/**
 * Get the default DAM search profile
 */
function wallydam_get_default_search_profile() {
  static $default_profile = NULL;

  if (!$default_profile) {
    $db_profiles = db_query('SELECT pid FROM {wallydam_search_profiles} WHERE default_profile = 1');
    if ($profile = db_result($db_profiles)) {
      $default_profile = $profile;
    } else {
      $db_profiles = db_query('SELECT MIN(pid) FROM {wallydam_search_profiles}');
      if ($profile = db_result($db_profiles)) {
        $default_profile = $profile;
      }
    }
  }

  return $default_profile;
}

/**
 * Get the default DAM search profile
 */
function wallydam_get_loaded_default_search_profile() {
  static $default_profile = NULL;

  if (!$default_profile) {
    $db_profiles = db_query('SELECT * FROM {wallydam_search_profiles} WHERE default_profile = 1');
    if ($profile = db_fetch_array($db_profiles)) {
      $profile['settings'] = unserialize($profile['settings']);
      $default_profile = $profile;
    } else {
      $db_profiles = db_query('SELECT * FROM {wallydam_search_profiles} WHERE pid = (SELECT MIN(pid) FROM {wallydam_search_profiles})');
      if ($profile = db_fetch_array($db_profiles)) {
        $profile['settings'] = unserialize($profile['settings']);
        $default_profile = $profile;
      }
    }
  }

  return $default_profile;
}

/**
 * Check wheter a given DAM search profile exists or not
 */
function wallydam_check_profile_exists($pid) {
  $db_profiles = db_query('SELECT pid FROM {wallydam_search_profiles} WHERE pid = %d', $pid);
  return db_result($db_profiles);
}

/**
 * This function is called when 404
 * it call the DAM with the url
 * if the DAM return a node, the node is display.
 * if the DAM return a 404, a 404 is display
 */
function wallydam_archive_searchurl(){
  module_load_include('inc', 'wallydam', 'includes/wallydam.archive');
  $url = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];

  //Look for the URL in the cache
  $return = wallydam_archive_cacheget($url);

  if ($return === FALSE){
    //If the url is not in the cache, call the DAM
    $last_alias = NULL;
    $return = wallydam_archive_getpackagefromurl($url, $last_alias);
    if ($return){
      
      //If the last alias is different to the url, the last alias is set in cache
      // and we redirect to the las alias
      if ($last_alias != $url && $last_alias != NULL){
        wallydam_archive_cacheset($last_alias, $return);
        
        //Set the url with last alias in the cache
        wallydam_archive_cacheset($url, $last_alias);
        
        //Redirect to last alias
        drupal_goto($last_alias, array(), 301);
      } else {
        //If no last alias or url = last alias :Set the content in the cache
        wallydam_archive_cacheset($url, $return);
      }
    }
    //if the result in the cache was an url redirect to this url
  } elseif (valid_url($return)){
    drupal_goto($return, array(), 301);
  }

  if ($return !== FALSE) {
    //Set a global variable named archive to indicates in the wallydam_preprocess_page that it's an archive page
    global $wallydam_archive;
    $wallydam_archive = 'archive';
    print theme('page', $return);
  } else {
    drupal_not_found();
  }
}
/**
 * Copy of menu_primary_links with a call to the fuction wallydam_menu_navigation_links instead of menu_navigation_links
* Return an array of links to be rendered as the Primary links.
*/
function wallydam_menu_primary_links() {
  return wallydam_menu_navigation_links(variable_get('menu_primary_links_source', 'primary-links'));
}

/**
 * Copy of menu_secondary_links with a call to the fuction wallydam_menu_navigation_links instead of menu_navigation_links
 * Return an array of links to be rendered as the Secondary links.
 */
function wallydam_menu_secondary_links() {

  // If the secondary menu source is set as the primary menu, we display the
  // second level of the primary menu.
  if (variable_get('menu_secondary_links_source', 'secondary-links') == variable_get('menu_primary_links_source', 'primary-links')) {
    return wallydam_menu_navigation_links(variable_get('menu_primary_links_source', 'primary-links'), 1);
  }
  else {
    return wallydam_menu_navigation_links(variable_get('menu_secondary_links_source', 'secondary-links'), 0);
  }
}

/**
 * 
 * Copy of menu_navigation_links but with menu_tree_all_data for 404 pages
 * @param string $menu_name
 * @param int $level
 */
function wallydam_menu_navigation_links($menu_name, $level = 0) {
  // Don't even bother querying the menu table if no menu is specified.
  if (empty($menu_name)) {
    return array();
  }

  // Get the menu hierarchy for the current page.
  $tree = menu_tree_all_data($menu_name);

  // Go down the active trail until the right level is reached.
  while ($level-- > 0 && $tree) {
    // Loop through the current level's items until we find one that is in trail.
    while ($item = array_shift($tree)) {
      if ($item['link']['in_active_trail']) {
        // If the item is in the active trail, we continue in the subtree.
        $tree = empty($item['below']) ? array() : $item['below'];
        break;
      }
    }
  }

  // Create a single level of links.
  $links = array();
  foreach ($tree as $item) {
    if (!$item['link']['hidden']) {
      $class = '';
      $l = $item['link']['localized_options'];
      $l['href'] = $item['link']['href'];
      $l['title'] = $item['link']['title'];
      if ($item['link']['in_active_trail']) {
        $class = ' active-trail';
      }
      // Keyed with the unique mlid to generate classes in theme_links().
      $links['menu-'. $item['link']['mlid'] . $class] = $l;
    }
  }
  return $links;
}
/**
 * 
 * Implementation hook_preprocess_page
 * To add primary links and secondary links on archive
 * @param array $vars
 */
function wallydam_preprocess_page(&$vars){
  global $wallydam_archive;
  //Check if archive page, if so, add the primary and secondary links
  if ($wallydam_archive == 'archive'){
    if (empty($vars['primary_links'])){
      $vars['primary_links'] = wallydam_menu_primary_links();
    }
    if (empty($vars['secondary_links'])){
      $vars['secondary_links'] = wallydam_menu_secondary_links();
    }
  }
}

/**
* Return the source configuration form source name
* @param string $sourcename
*/
function wallydam_getsourcebyid($sid){
  $return = NULL;
  $result = db_query("SELECT * FROM {wallydam_source} WHERE sid = %d", $sid);
  if ($obj = db_fetch_object($result)){
    $return = new stdClass;
    $return->sid = (int)$obj->sid;
    $return->name = $obj->name;
    $return->archive = (int)$obj->archive;
    $return->archive_from_wallymport = (int)$obj->archive_from_wallymport;
  }
  return $return;
}
/**
 * Return the source configuration form source name
 * @param string $sourcename
 */
function wallydam_getsourcebyname($sourcename){
  $return = NULL;
  $result = db_query("SELECT * FROM {wallydam_source} WHERE name = '%s'", $sourcename);
  if ($obj = db_fetch_object($result)){
    $return = new stdClass;
    $return->sid = (int)$obj->sid;
    $return->name = $obj->name;
    $return->archive = (int)$obj->archive;
    $return->archive_from_wallymport = (int)$obj->archive_from_wallymport;
  }
  return $return;
}
/**
* Get importers info
*
* @return
*   an array of importers
*/
function wallydam_getsources(){
  $result = db_query("SELECT * FROM {wallydam_source}");
  $sources = NULL;
  while ($source = db_fetch_object($result)){
    $sources[] = $source;
  }
  return $sources;
}
