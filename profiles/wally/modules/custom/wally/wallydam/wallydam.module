<?php 

/*
 * Implementation of hook_menu().
 */
function wallydam_menu() {
  $items = array();
  $items['admin/wally/wallydam/settings'] = array(
    'title' => 'Wally DAM Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wallydam_page_admin_form'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to set paramaters for this module to function properly.',
    'file' => 'includes/wallydam.admin.inc',
  );
  return $items;
}
/*
 * Implementation of hook_nodeapi().
 */
function wallydam_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  switch ($op){
    case 'insert':
      //Publish : node save
      if ($node->type == 'wally_articlepackage' | $node->type == 'wally_gallerypackage' | $node->type == 'wally_pollpackage'){
        wallydam_addurltobuffer($node->nid);
        if ($node->field_externaluri[0]['value'] == NULL & !isset($node->wallymport_node)){
          wallydam_addpackagetobuffer($node->nid);
        }
      } 
      break;
    case 'update':
      if ($node->type == 'wally_articlepackage' | $node->type == 'wally_gallerypackage' | $node->type == 'wally_pollpackage'){
        if ($node->field_externaluri[0]['value'] == NULL & !isset($node->wallymport_node)){
          wallydam_addpackagetobuffer($node->nid);
        } 
        if ($node->field_externaluri[0]['value'] == NULL){
          wallydam_addurltobuffer($node->nid);
        }
      }
      elseif(($node->type == 'wally_audioobject' | $node->type == 'wally_photoobject' | $node->type == 'wally_pollobject' 
             | $node->type == 'wally_textobject'  | $node->type == 'wally_videoobject') & !isset($node->wallymport_node)){
        if (!isset($node->wallymport_node)){
          foreach (wallytoolbox_get_node_by_reference($node) as $array_nid){
            $node_package = node_load($array_nid['nid']);
            if ($node_package->field_externaluri[0]['value'] == NULL){
              wallydam_addpackagetobuffer($array_nid['nid']);
            }
          }
        }
      }
      break;
    case 'delete':
      if ($node->type == 'wally_articlepackage' | $node->type == 'wally_gallerypackage' | $node->type == 'wally_pollpackage'){
        wallydam_removepackagefrombuffer($node->nid);
        wallydam_removeurlfrombuffer($node->nid);
      }
      break;
  }
}
/*
 * Implementation of hook_cron 
 */
function wallydam_cron(){
  //Packages
  $max_number = variable_get('wallydam_cronmaxnumber', 50);
  $result = db_query("SELECT nid
  					  FROM {wallydam_packagestosend} 
  					  ORDER BY timestamp ASC LIMIT %d", $max_number);
  while ($obj = db_fetch_object($result)){
    if ( wallydam_postpackage($obj->nid)){
      wallydam_removepackagefrombuffer($obj->nid);
    }
  }
  /*
  //URL
  $result = db_query("SELECT nid
  					  FROM {wallydam_urltosend} 
  					  ORDER BY timestamp ASC LIMIT %d", $max_number);
  while ($obj = db_fetch_object($result)){
    $node = node_load($obj->nid);
    if ( wallydam_posturl($node)){
      wallydam_removeurlfrombuffer($obj->nid);
    }
  }*/
}
/**
 * GET of informations of the node.
 * 
 * Send the informations of the node (nodeid, packageid and url) to pandam 
 * 
 * @param $node
 *   Node 
 */
function wallydam_posturl($node){
  $sent = FALSE;
  
  if (!isset($node->path)){
    $node->path = 'node/'.$node->nid;
  }
  $node_url = url($node->path, array('absolute' => TRUE));
  $node_id = variable_get('wallydam_wallyprefix', NULL).$node->nid;
  $package_id = $node->field_externalreference[0]['value'];
  $request = variable_get('wallydam_updateurl', 'http://esb2.rossel.be:8081/rest/pandamServices/updateUrl');
  $postargs = 'nodeId='.$node_id.'&packageId='.$package_id.'&url='.$node_url;

  //GET
  $result = drupal_http_request($request.'?'.$postargs);
  if ($result->code == 200){
    $sent = TRUE;
  }
  return $sent;
}
/**
 * Add the package to the buffer
 * 
 * Add the package to the buffer, each time the cron is running, the packages who are in the buffer will be sent to the DAM
 * 
 * @param nid
 * 
 * nid of the node
 * */
function wallydam_addpackagetobuffer($nid){

  $result = db_query("SELECT nid FROM {wallydam_packagestosend} WHERE nid = %d", $nid);
  if (!db_result($result)){
    $row = new stdClass();
    $row->nid = $nid;
    $row->timestamp = time();
    drupal_write_record('wallydam_packagestosend', $row);
  }
}
/**
 * Add the url to the buffer
 * 
 * Add the url to the buffer, each time the cron is running, the url of the nid who are in the buffer will be sent to the DAM
 * 
 * @param nid
 * 
 * nid of the node
 * */
function wallydam_addurltobuffer($nid){

  $result = db_query("SELECT nid FROM {wallydam_urltosend} WHERE nid = %d", $nid);
  if (!db_result($result)){
    $row = new stdClass();
    $row->nid = $nid;
    $row->timestamp = time();
    drupal_write_record('wallydam_urltosend', $row);
  }
}
/**
 * Remove the package from the buffer
 *  
 * @param nid
 * 
 * nid of the node
 * */
function wallydam_removepackagefrombuffer($nid){
  $result = db_query("DELETE FROM {wallydam_packagestosend} WHERE nid = %d", $nid);
}
/**
 * Remove the the from the buffer
 *  
 * @param nid
 * 
 * nid of the node
 * */
function wallydam_removeurlfrombuffer($nid){
  $result = db_query("DELETE FROM {wallydam_urltosend} WHERE nid = %d", $nid);
}
/**
 * POST the node Package.
 * 
 * POST the package of the node to pandam 
 * 
 * @param $node
 *   Node 
 */

function wallydam_postpackage($nid){
  //Export package
  dsm('package');
  $sent = FALSE;
  $result = wallyexport_export_packages(array($nid));
  if ($result[0] == 'Zip success : '.$nid){
    //Send package in POST
    $target_url = variable_get('wallydam_updatepackageurl', '');
    if ($target_url != ''){
      $path_to_file = variable_get('wallyexport_admin_source', 'sites/default/files/export').'/Wally_'.$nid.'.zip';
      $postfields = array('package'=>'@'.$path_to_file);
      $sent = wallydam_post($postfields, $target_url);
    } else {
      drupal_set_message(t('The URL where the package is being posted is not specified'),'error');
    }
    
  }
  else {
    drupal_set_message(t('The Export of the package (NID : '.$nid.') failed. The package has not be sent to the DAM') );
  }
  return $sent;
}

/**
 * POST
 * 
 * @param $postfields
 *   fields to post (in array)
 * @param $target_url
 *   url
 * @param  $result
 *   Le r√©sultat du post. 
 */
function wallydam_post($postfields,$target_url){
  //Envoi un fichier en post.
 dsm($postfields);
 dsm('post');
  $ch = curl_init($target_url);  
  $content_type = 'application/zip';
  curl_setopt($ch, CURLOPT_HTTPHEADER, Array("Content-Type: ".$content_type));
  curl_setopt($ch, CURLOPT_POSTFIELDS, $postfields);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $result = curl_exec($ch);
  dsm($result);
  if ($result == FALSE){
    $return = FALSE;
    drupal_set_message(curl_error($ch),'error'); 
  } else {
    drupal_set_message(curl_error($ch),'error');
    $return = TRUE;
  }
  curl_close($ch);
  return $return;
}