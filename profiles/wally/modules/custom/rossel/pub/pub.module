<?php

/**
 * Implementation of hook_menu().
 */
function pub_menu() {
  $items = array();
  $items['admin/rossel/pub'] = array(
    'title' => 'Pub general configuration',
    'page callback' => 'pub_page_admin',
    'page arguments' => array('pub_page_admin'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to set paramaters for the pub to function properly.',
    'file' => 'includes/pub.admin.inc',
  );
  
  $items['admin/rossel/pubcron'] = array(
    'title' => 'Run pub cron',
    'page callback' => 'pub_cron_run',
    'page arguments' => array('pub_cron_run'),
    'access arguments' => array('access administration pages'),
    'description' => 'Run pub cron.',
  	'file' => 'includes/pub.admin.inc',
  );
  
  $items['admin/rossel/pubblocks'] = array(
    'title' => 'Manage blocks',
    'page callback' => 'pub_blocks_admin',
    'page arguments' => array('pub_blocks_admin'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to manage pub blocks.',
    'file' => 'includes/pub.admin.inc',
  );
  
  $items['admin/rossel/pubcache'] = array(
    'title' => 'Manage cache',
    'page callback' => 'pub_cache_admin',
    'page arguments' => array('pub_cache_admin'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to manage pub blocks cache.',
    'file' => 'includes/pub.admin.inc',
  );

  return $items;
}

/**
 * ImplÃ©mentation du hook_block
 */
function pub_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $pub_list = db_query('SELECT * FROM `zz_pub_UMI`');
      while ($pub_elem = db_fetch_array($pub_list)) {
        $blocks[$pub_elem['position']] = array(
          'info' => t('Pub '.$pub_elem['position']),
          'cache' => BLOCK_NO_CACHE,
        );
      }
      
      $blocks['analytic_block'] = array(
        'info' => t('Analytic'),
        'cache' => BLOCK_NO_CACHE,
      );
      
      $blocks['xiti_block'] = array(
        'info' => t('Xiti'),
        'cache' => BLOCK_NO_CACHE,
      );
      
      $blocks['metriweb_block'] = array(
        'info' => t('MetriWeb'),
        'cache' => BLOCK_NO_CACHE,
      );
      
      return $blocks;
    case 'configure':
      $form = array();
      $hour_list = array();
      for ($i=0; $i<=24; $i++) $hour_list[$i] = ($i==1 || $i==0) ? $i.' hour' : $i.' hours';
      $day_list = array();
      for ($i=0; $i<=30; $i++) $day_list[$i] = ($i==1 || $i==0) ? $i.' day' : $i.' days';
      $default_time = variable_get('pub_block_'.$delta.'_refresh_time', 24);
      $default_hour = $default_time%24;
      $default_day = ($default_time - $default_time%24)/24;
      $form['refresh_time_day'] = array(
        '#title' => t('Time between updates'),
        '#type' => 'select',
        '#description' => t('Time, in days, between updates for this block.'),
        '#options' => $day_list,
        '#default_value' => $default_day,
        '#required' => TRUE,
      );
      $form['refresh_time_hour'] = array(
        '#type' => 'select',
        '#description' => t('Time, in hours, between updates for this block.'),
        '#options' => $hour_list,
        '#default_value' => $default_hour,
        '#required' => TRUE,
      );
      return $form;
    case 'save':
      switch ($delta) {
        case 'analytic_block':
          variable_set('analytic_block_refresh_time', 24*$edit['refresh_time_day'] + $edit['refresh_time_hour']);
          break;
        case 'xiti_block':
          variable_set('xiti_block_refresh_time', 24*$edit['refresh_time_day'] + $edit['refresh_time_hour']);
          break;
        case 'metriweb_block':
          variable_set('metriweb_block_refresh_time', 24*$edit['refresh_time_day'] + $edit['refresh_time_hour']);
          break;
        default:
          variable_set('pub_block_'.$delta.'_refresh_time', 24*$edit['refresh_time_day'] + $edit['refresh_time_hour']);
      }
      break;
    case 'view':
      switch ($delta) {
        case 'analytic_block':
          $block = array(
            'subject' => t('Analytic block.'), 
            'content' => _analytic_getcontent(),
          );
          break;
        case 'xiti_block':
          $block = array(
            'subject' => t('Xiti block.'), 
            'content' => _xiti_getcontent(),
          );
          break;
        case 'metriweb_block':
          $block = array(
            'subject' => t('MetriWeb block.'), 
            'content' => _metriweb_getcontent(),
          );
          break;
        default:
          $block = array(
            'subject' => t('Pub block.'), 
            'content' => _pub_getcontent($delta),
          );
      }
      return $block;
  }
}

/**
 * Get content for the pub block.
 * 
 * @param string $delta
 *   The delta of the concerned block.
 * 
 * @return
 *   HTML content.
 * 
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_block/6
 *   Hook_block
 */
function _pub_getcontent($delta) {
  $cached_pub = cache_get('pub_'.$delta.'_temp');
  $cache_time = variable_get('pub_block_'.$delta.'_refresh_time', 24);
  
  if (!is_object($cached_pub) || !isset($cached_pub) || empty($cached_pub) || $cached_pub->expire < time()) {
    $orig_url = $_GET['q'];
    $expl_url = explode('/', $orig_url);
    
    switch ($expl_url[0]) {
      case 'node':
        if ($expl_url[1]) {
          $node = node_load($expl_url[1]);
          $node_dest = $node->field_destinations;
          $tax_term = taxonomy_get_term($node_dest[0]['tid']);
          $webserv_req = $tax_term->name.'/'.$node->nid;
        } else {
          $webserv_req = 'custom/'.$orig_url;
        }
        break;
      case 'taxonomy':
        if ($expl_url[2]) {
          $tids = $expl_url[2];
          $expl_tids = preg_split('(\+|\,|\ )', $tids);
          $tax_term = taxonomy_get_term($expl_tids[0]);
          $webserv_req = $tax_term->name;
        } else {
          $webserv_req = 'custom/'.$orig_url;
        }
        break;
      default:
        $webserv_req = 'custom/'.$orig_url;
    }
    $content_from_webservice = _pub_getcontentfromwebservice($webserv_req);
    
    if ($content_from_webservice) {
      $pub_content = $content_from_webservice;
    } else {
      $cached_pub = cache_get('pub_'.$delta.'_perm');
      $pub_content = $cached_pub->data;
    }
    
    cache_set('pub_'.$delta.'_temp', $pub_content, 'cache', time() + 3600*$cache_time);
    cache_set('pub_'.$delta.'_perm', $pub_content);
  } else {
    $pub_content = $cached_pub->data;
  }
  
  $pub_content .= '. ';
  $pub_content .= 'Pub block delta: '.$delta;
  dsm($pub_content);
  return $pub_content;
}

/**
 * Get content from a webservice.
 * 
 * @return
 *   HTML content.
 *   
 * @todo
 *   Call webservice.
 */
function _pub_getcontentfromwebservice($req) {
  $content = $req;
  
  return $content;
}

/**
 * Get content for the analytic block.
 * 
 * @return
 *   HTML content.
 * 
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_block/6
 *   Hook_block
 */
function _analytic_getcontent() {
  $cached_pub = cache_get('analytic_block_temp');
  $cache_time = variable_get('analytic_block_refresh_time', 24);
  
  if (!is_object($cached_pub) || !isset($cached_pub) || empty($cached_pub) || $cached_pub->expire < time()) {
    $analytic_content = 'Analytic block content.';
    
    cache_set('analytic_block_temp', $analytic_content, 'cache', time() + 3600*$cache_time);
    cache_set('analytic_block_perm', $analytic_content);
  } else {
    $analytic_content = $cached_pub->data;
  }
  
  dsm($analytic_content);
  return $analytic_content;
}

/**
 * Get content for the Xiti block.
 * 
 * @return
 *   HTML content.
 * 
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_block/6
 *   Hook_block
 */
function _xiti_getcontent() {
  $cached_pub = cache_get('xiti_block_temp');
  $cache_time = variable_get('xiti_block_refresh_time', 24);
  
  if (!is_object($cached_pub) || !isset($cached_pub) || empty($cached_pub) || $cached_pub->expire < time()) {
    $xiti_content = 'Xiti block content.';
    
    cache_set('xiti_block_temp', $xiti_content, 'cache', time() + 3600*$cache_time);
    cache_set('xiti_block_perm', $xiti_content);
  } else {
    $xiti_content = $cached_pub->data;
  }
  
  dsm($xiti_content);
  return $xiti_content;
}

/**
 * Get content for the MetriWeb block.
 * 
 * @return
 *   HTML content.
 * 
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_block/6
 *   Hook_block
 */
function _metriweb_getcontent() {
  $cached_pub = cache_get('metriweb_block_temp');
  $cache_time = variable_get('metriweb_block_refresh_time', 24);
  
  if (!is_object($cached_pub) || !isset($cached_pub) || empty($cached_pub) || $cached_pub->expire < time()) {
    $metriweb_content = 'MetriWeb block content.';
    
    cache_set('metriweb_block_temp', $metriweb_content, 'cache', time() + 3600*$cache_time);
    cache_set('metriweb_block_perm', $metriweb_content);
  } else {
    $metriweb_content = $cached_pub->data;
  }
  
  dsm($metriweb_content);
  return $metriweb_content;
}
