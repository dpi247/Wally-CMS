<?php

/**
 * @file
 * Tests for links on pages of the API module.
 */

include_once './'. drupal_get_path('module', 'api') .'/tests/api_test_case.php';

/**
 * Tests that links are generated correctly on API pages.
 */
class ApiWebLinksTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => 'Web links',
      'description' => 'Tests links on web pages for the API module.',
      'group' => 'API Module',
    );
  }

  /**
   * Tests that links are generated correctly in code.
   */
  function testInCodeLinks() {
    // Test a bunch of links on the sample_in_code_links page.
    $links = array(
      'sample_function' => 'sample.php/function/sample_function',
      'sample_one' => 'sample.php/function/theme_sample_one',
      'sample_two' => 'sample-two.tpl.php',
      'sample_three' => 'sample-three.tpl.php',
      'sample_four__option' => 'sample.php/function/theme_sample_four',
      'sample_name' => 'sample.php/function/hook_sample_name',
      'another_sample' => 'sample.php/function/hook_another_sample_alter',
      'duplicate_function' => 'search/' . $this->branch_info['branch_name'] . '/duplicate_function',
      'SubSample' => 'classes.php/class/SubSample',
      'SAMPLE_CONSTANT' => 'sample.php/constant/SAMPLE_CONSTANT',
      'DUPLICATE_CONSTANT' => 'search/' . $this->branch_info['branch_name'] . '/DUPLICATE_CONSTANT',
    );

    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_in_code_links');

    foreach ($links as $text => $url) {
      $this->assertLinkURLSubstring($text, $url, 'Link to ' . $text . ' exists', $text . ' link went to right place');
    }

    // Test for text that should be there but not linked.
    $no_links = array(
      'nonexistent_hook',
      'nonexistent_theme_hook',
      'nonexistent_alter_name',
      'title',
    );

    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_in_code_links');
    foreach ($no_links as $text) {
      $this->assertText($text, $text . ' is present');
      $this->assertNoLink($text, $text . ' is not a link');
    }
  }

  /**
   * Tests that links are generated correctly in documentation.
   */
  function testDocumentationLinks() {
    // Test a variety of links on the documentation page for sample_function().
    $links = array(
      'duplicate_function' => 'search/' . $this->branch_info['branch_name'] . '/duplicate_function',
      'http://example.com' => 'http://example.com',
      'this is a link for the parameter' => 'http://php.net',
      'SAMPLE_CONSTANT' => 'sample.php/constant/SAMPLE_CONSTANT',
      'Samples' => 'sample.php/group/samp_GRP-6.x',
    );

    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_function');
    foreach ($links as $text => $url) {
      $this->assertLinkURLSubstring($text, $url, 'Link to ' . $text . ' exists', $text . ' link went to right place');
    }

    // Test some links on the duplicate_function() page.
    $links = array(
      'Subscribers' => 'sample.php/group/samp_GRP-6.x',
      'newsletters (categories)' => 'classes.php/group/class_samples',
      'subscription' => 'sample.php/group/samp_GRP-6.x',
      'newsletter issues' => 'classes.php/group/class_samples',
    );

    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/duplicate_function');
    foreach ($links as $text => $url) {
      $this->assertLinkURLSubstring($text, $url, 'Link to ' . $text . ' exists', $text . ' link went to right place');
    }
  }

  /**
   * Tests a variety of class member links.
   */
  function testClassLinks() {
    $pages = array(
      'Sample::foo' => 'api/' . $this->branch_info['project'] . '/classes.php/function/Sample::foo',
      'Sample::baz' => 'api/' . $this->branch_info['project'] . '/classes.php/function/Sample::baz',
      'SubSample::bar' => 'api/' . $this->branch_info['project'] . '/classes.php/function/SubSample::bar',
    );

    $links = array(
      array(
        'page' => 'Sample::foo',
        'text' => 'baz',
        'url' => 'classes.php/function/Sample',
      ),
      array(
        'page' => 'Sample::foo',
        'text' => 'property',
        'url' => 'classes.php/property/Sample',
      ),
      array(
        'page' => 'Sample::foo',
        'text' => 'constant',
        'url' => 'classes.php/constant/Sample',
      ),
      array(
        'page' => 'Sample::baz',
        'text' => 'foo',
        'url' => 'classes.php/function/Sample',
      ),
      array(
        'page' => 'Sample::baz',
        'text' => 'bar',
        'url' => 'search/' . $this->branch_info['branch_name'] . '/bar',
      ),
      array(
        'page' => 'SubSample::bar',
        'text' => 'foo',
        'url' => 'classes.php/function/Sample',
      ),
      array(
        'page' => 'SubSample::bar',
        'text' => 'baz',
        'url' => 'classes.php/function/Sample',
      ),
    );

    foreach ($links as $item) {
      $this->drupalGet($pages[$item['page']]);
      $this->assertLinkURLSubstring($item['text'], $item['url'], 'Link to ' . $item['text'] . ' exists', $item['text'] . ' link went to right place');
    }

    $no_links = array(
      array(
        'page' => 'Sample::foo',
        'text' => 'bar',
      ),
    );

    foreach ($no_links as $item) {
      $this->drupalGet($pages[$item['page']]);
      $this->assertText($item['text'], $item['text'] . ' is present');
      $this->assertNoLink($item['text'], $item['text'] . ' is not a link');
    }
  }
}
