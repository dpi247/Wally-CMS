<?php

/**
 * @file
 * Tests for the api_link_documentation() function of the API module.
 */


include_once './'. drupal_get_path('module', 'api') .'/tests/api_test_case.php';

/**
 * Tests the api_link_documentation() function.
 */
class ApiLinkDocumentationTest extends ApiTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Documentation linking',
      'description' => 'Test the api_link_documentation() function.',
      'group' => 'API Module',
    );
  }

  /**
   * Tests the api_link_documentation() function.
   */
  function testApiLinkDocumentation() {
    $class = api_object_load('Sample', $this->getBranch(), 'class', 'classes.php');

    $tests = array(
      // Should be linked
      array(
        'message' => 'Function name linking',
        'data' => 'sample_function(',
        'expected' => '<a href="'. url('api/test/sample.php/function/sample_function/6') .'" title="A sample function." class="local">sample_function</a>(',
      ),
      array(
        'message' => 'Function name linking with preceding space',
        'data' => ' sample_function(',
        'expected' => ' <a href="'. url('api/test/sample.php/function/sample_function/6') .'" title="A sample function." class="local">sample_function</a>(',
      ),
      array(
        'message' => 'Function @link',
        'data' => '@link sample_function A sample function. @endlink',
        'expected' => '<a href="'. url('api/test/sample.php/function/sample_function/6') .'" title="A sample function." class="local">A sample function.</a>',
      ),
      array(
        'message' => 'Multiline function @link',
        'data' => "@link sample_function\nA sample function. @endlink",
        'expected' => '<a href="'. url('api/test/sample.php/function/sample_function/6') .'" title="A sample function." class="local">A sample function.</a>',
      ),
      array(
        'message' => 'Multiple @link',
        'data' => "@link sample_function A sample function. @endlink and @link samp_GRP-6.x A topic. @endlink",
        'expected' => '<a href="'. url('api/test/sample.php/function/sample_function/6') .'" title="A sample function." class="local">A sample function.</a> and <a href="' . url('api/test/sample.php/group/samp_GRP-6.x/6') . '" title="A sample group." class="local">A topic.</a>',
      ),
      array(
        'message' => 'Method name linking',
        'data' => 'Sample::foo(',
        'expected' => '<a href="'. url('api/test/classes.php/function/Sample::foo/6') .'" title="Metasyntatic member function." class="local">Sample::foo</a>(',
      ),
      array(
        'message' => 'Method name linking without explicit class -- should not link',
        'data' => 'foo(',
        'expected' => 'foo(',
      ),
      array(
        'message' => 'Class constant @link',
        'data' => '@link Sample::constant A class constant @endlink',
        'expected' => '<a href="'. url('api/test/classes.php/constant/Sample::constant/6') .'" title="A class constant." class="local">A class constant</a>',
      ),
      array(
        'message' => 'Property @link',
        'data' => '@link Sample::property A property @endlink',
        'expected' => '<a href="'. url('api/test/classes.php/property/Sample::property/6') .'" title="A property." class="local">A property</a>',
      ),
      array(
        'message' => 'Class @link',
        'data' => '@link Sample A class @endlink',
        'expected' => '<a href="'. url('api/test/classes.php/class/Sample/6') .'" title="Sample class." class="local">A class</a>',
      ),
      array(
        'message' => 'Class aggressive link',
        'data' => 'Sample',
        'expected' => '<a href="'. url('api/test/classes.php/class/Sample/6') .'" title="Sample class." class="local">Sample</a>',
        'aggressive_classes' => TRUE,
      ),
      array(
        'message' => 'Constant link',
        'data' => 'SAMPLE_CONSTANT',
        'expected' => '<a href="'. url('api/test/sample.php/constant/SAMPLE_CONSTANT/6') .'" title="A sample constant." class="local">SAMPLE_CONSTANT</a>',
      ),

      // Should not be linked
      array(
        'message' => 'Function name linking with preceding non-space character',
        'data' => '.sample_function(',
        'expected' => '.sample_function(',
      ),
      array(
        'message' => 'Function name linking with preceding letter',
        'data' => 'asample_function(',
        'expected' => 'asample_function(',
      ),
      array(
        'message' => 'Function name linking without parenthesis',
        'data' => 'sample_function',
        'expected' => 'sample_function',
      ),
      array(
        'message' => 'Function name linking inside a HTML tag',
        'data' => '<tag attribute="sample_function()">',
        'expected' => '<tag attribute="sample_function()">',
      ),
      array(
        'message' => 'Function \\@link',
        'data' => '\\@link sample_function A sample function. @endlink',
        'expected' => '@link sample_function A sample function. @endlink',
      ),
      array(
        'message' => 'Class aggressive link with trailing letter',
        'data' => 'Samplea',
        'expected' => 'Samplea',
        'aggressive_classes' => TRUE,
      ),
      array(
        'message' => 'Class link',
        'data' => 'Sample',
        'expected' => 'Sample',
      ),
      array(
        'message' => 'Constant link with trailing chatacter',
        'data' => 'SAMPLE_CONSTANTA',
        'expected' => 'SAMPLE_CONSTANTA',
      ),

      // Should be linked
      array(
        'message' => 'File name linking',
        'data' => 'sample.php',
        'expected' => '<a href="'. url('api/test/sample.php/6') .'" title="A sample file." class="local">sample.php</a>',
      ),
      array(
        'message' => 'File name linking with preceding space',
        'data' => ' sample.php',
        'expected' => ' <a href="'. url('api/test/sample.php/6') .'" title="A sample file." class="local">sample.php</a>',
      ),
      array(
        'message' => 'File name linking with following space',
        'data' => 'sample.php ',
        'expected' => '<a href="'. url('api/test/sample.php/6') .'" title="A sample file." class="local">sample.php</a> ',
      ),
      array(
        'message' => 'File name linking with following punctuation',
        'data' => 'sample.php.',
        'expected' => '<a href="'. url('api/test/sample.php/6') .'" title="A sample file." class="local">sample.php</a>.',
      ),
      array(
        'message' => 'File @link',
        'data' => '@link sample.php A sample file. @endlink',
        'expected' => '<a href="'. url('api/test/sample.php/6') .'" title="A sample file." class="local">A sample file.</a>',
      ),

      // Should not be linked
      array(
        'message' => 'File name linking with preceding non-space character',
        'data' => '.sample.php',
        'expected' => '.sample.php',
      ),
      array(
        'message' => 'File name linking with preceding letter',
        'data' => 'asample.php',
        'expected' => 'asample.php',
      ),
      array(
        'message' => 'File name linking inside a HTML tag',
        'data' => '<tag attribute="sample.php">',
        'expected' => '<tag attribute="sample.php">',
      ),
      array(
        'message' => 'File \\@link, does fill in file link',
        'data' => '\\@link sample.php A sample file. @endlink',
        'expected' => '@link <a href="'. url('api/test/sample.php/6') .'" title="A sample file." class="local">sample.php</a> A sample file. @endlink',
      ),

      array(
        'message' => 'Escaped @tag is not unescaped.',
        'data' => 'Escaped \\@stuff.',
        'expected' => 'Escaped @stuff.',
      ),
      array(
        'message' => 'Double-escaped @tag is not unescaped.',
        'data' => 'Double-escaped \\\\@stuff.',
        'expected' => 'Double-escaped \\@stuff.',
      ),
    );

    foreach ($tests as $test) {
      $result = api_link_documentation($test['data'], $this->getBranch(), isset($test['class_did']) ? $test['class_did'] : NULL, isset($test['aggressive_classes']) ? $test['aggressive_classes'] : FALSE);
      $this->assertEqual($result, $test['expected'], $test['message'] . ' Got: <code>' . check_plain($result) . '</code>');
    }
  }
}
