<?php

/**
 * @file
 * Tests for branch and object creation functionality of the API module.
 */


include_once './'. drupal_get_path('module', 'api') .'/tests/api_test_case.php';

/**
 * Tests branch and object creation.
 */
class ApiBranchCreation extends ApiTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Branch and object creation',
      'description' => 'Test that the branches and API documentation objects are created correctly.',
      'group' => 'API Module',
    );
  }

  /**
   * Tests that branch and API objects are created correctly.
   */
  function testBranchObjects() {
    // Make sure we have the right number of doc objects.
    $branch = $this->getBranch();
    $count = db_result(db_query("SELECT count(*) FROM {api_documentation} WHERE branch_id = %d", $branch->branch_id));
    $this->assertEqual($count, 65, 'Found ' . $count . ' documentation objects.');

    // Check sample.php
    $object = api_filename_load('sample.php', $branch->project, $branch->branch_name);
    $this->assertEqual($object->summary, 'A sample file.', 'sample.php has summary ' . $object->summary);
    $parsed = trim(strip_tags($object->code));
    $file = trim(htmlspecialchars(trim(file_get_contents($branch->directories . '/' . $object->file_name))));
    $this->assertEqual($parsed, $file, 'sample.php\'s code matches file.');

    // Check sample_function()
    $object = api_object_load('sample_function', $branch, 'function', 'sample.php');
    $this->assertEqual($object->summary, 'A sample function.', 'sample_function() has summary ' . $object->summary);

    // Check that documentation includes text after first @see directive
    $this->assertTrue(strpos($object->documentation, 'Use for sample-related purposes.') !== FALSE, 'sample_function() documentation includes text after \@see directive.');

    // Check @see directives
    $this->assertTrue(strpos($object->see, 'duplicate_function') !== FALSE, 'sample_function() includes duplicate_function in "See also" section.');
    $this->assertTrue(strpos($object->see, 'SAMPLE_CONSTANT') !== FALSE, 'sample_function() includes SAMPLE_CONSTANT in "See also" section.');

    // Check multi-paragraph @param
    $this->assertTrue(strpos($object->parameters, 'A second paragraph about') !== FALSE, 'sample_function() parameters contains second paragraph.');

    // Check multi-paragraph @param with @link
    $this->assertTrue(strpos($object->parameters, 'this is a link') !== FALSE, 'sample_function() parameters contains link.');

    // Check for formatting on parameter.
    $this->assertTrue(strpos($object->parameters, '<strong>$parameter</strong>:') !== FALSE, 'sample_function() parameter has strong/colon formatting');

    // Check multi-paragraph @return
    $this->assertTrue(strpos($object->return_value, 'second paragraph about the return') !== FALSE, 'sample_function() return contains second paragraph.');

    // Check list formatting.
    $list1 = "<p>This is a sample list:</p>" .
      "<ul><li>One item." .
      "</li><li>Another item." .
      "<ul><li>A sub-item. This one goes for multiple lines, just to make" .
      "sure that that works. It should. And here&#039;s a colon: just to" .
      "make sure that isn&#039;t wonky." .
      "</li><li>Another sub-item." .
      "</li></ul></li><li>A third item." .
      "</li></ul>";

    $list2 = "<p>This list uses our key format:</p>" .
      "<ul><li><strong>key1</strong>: The usual format, no quotes.</li>" .
      "<li><strong>&#039;key2&#039;</strong>: Sometimes we have quotes.</li>" .
      "<li><strong>&quot;key3 multiple&quot;</strong>: Sometimes double quotes and multiple words.</li>" .
      "<li>The following item should not have strong formatting.</li>" .
      "<li>http://example.com</li>" .
      "</ul>";

    // Test the list HTML with no whitespace, and then spot check some of the
    // list text to make sure the spaces are there. Trying to get all the
    // white space in the list HTML to match exactly is pointless.
    $no_spaces_doc = preg_replace('|\s+|', '', $object->documentation);
    $list1 = preg_replace('|\s+|', '', $list1);
    $list2 = preg_replace('|\s+|', '', $list2);

    $this->assertTrue(strpos($no_spaces_doc, $list1) !== FALSE, 'Nested list is formatted correctly');
    $this->assertTrue(strpos($no_spaces_doc, $list2) !== FALSE, 'List with keys is formatted correctly');
    $this->assertTrue(strpos($object->documentation, "A sub-item. This one goes for multiple lines, just to make") !== FALSE, 'List item text is verbatim');
    $this->assertTrue(strpos($object->documentation, "key3 multiple") !== FALSE, 'List item key is verbatim');

    // Check $sample_global
    $object = api_object_load('sample_global', $branch, 'global', 'sample.php');
    $this->assertEqual($object->summary, 'A sample global.', '$sample_global has summary ' . $object->summary);

    // Check SAMPLE_CONSTANT
    $object = api_object_load('SAMPLE_CONSTANT', $branch, 'constant', 'sample.php');
    $this->assertEqual($object->summary, 'A sample constant.', 'SAMPLE_CONSTANT has summary ' . $object->summary);

    // Check group samp_GRP-6.x
    $samples_group = api_object_load('samp_GRP-6.x', $branch, 'group', 'sample.php');
    $this->assertEqual($samples_group->summary, 'A sample group.', 'Group samples has summary ' . $samples_group->summary);
    $count = db_result(db_query("SELECT count(*) FROM {api_reference_storage} WHERE branch_id = %d AND to_did = %d AND object_type = 'group'", $branch->branch_id, $samples_group->did));
    $this->assertEqual($count, 7, 'Group samples has ' . $count . ' members');

    // Check group class_samples
    $class_samples_group = api_object_load('class_samples', $branch, 'group', 'classes.php');
    $this->assertEqual($class_samples_group->summary, 'A sample group of classes. Should not include members.', 'Group class_samples has summary ' . $class_samples_group->summary);
    $count = db_result(db_query("SELECT count(*) FROM {api_reference_storage} WHERE branch_id = %d AND to_did = %d AND object_type = 'group'", $branch->branch_id, $class_samples_group->did));
    $this->assertEqual($count, 10, 'Group class_samples has ' . $count . ' members.');

    // Check classes.php
    $object = api_filename_load('classes.php', $branch->project, $branch->branch_name);
    $this->assertEqual($object->summary, 'Object-oriented tests.', 'classes.php has summary ' . $object->summary);
    $parsed = trim(strip_tags($object->code));
    $file = trim(htmlspecialchars(trim(file_get_contents($branch->directories . '/' . $object->file_name))));
    $this->assertEqual($parsed, $file, 'classes.php\'s code matches file.');

    // Check Sample class
    $class = api_object_load('Sample', $branch, 'class', 'classes.php');
    $this->assertEqual($class->summary, 'Sample class.', 'Sample has summary ' . $class->summary);

    // Check Sample::constant constant
    $sample_constant = api_object_load('Sample::constant', $branch, 'constant', 'classes.php');
    $this->assertEqual($sample_constant->summary, 'A class constant.', 'Sample::constant has summary ' . $sample_constant->summary);
    $this->assertEqual($sample_constant->class_did, $class->did, 'Constant belongs to parent class.');

    // Check Sample::property property
    $sample_property = api_object_load('Sample::property', $branch, 'property', 'classes.php');
    $this->assertEqual($sample_property->summary, 'A property.', 'Sample::property has summary ' . $sample_property->summary);
    $this->assertEqual($sample_property->class_did, $class->did, 'Property belongs to parent class.');
    $this->assertEqual($sample_property->var, 'SampleInterface', 'Property has @var.');

    // Check Sample::foo() method
    $sample_foo = api_object_load('Sample::foo', $branch, 'function', 'classes.php');
    $this->assertEqual($sample_foo->summary, 'Metasyntatic member function.', 'Sample::foo() has summary ' . $sample_foo->summary);
    $this->assertEqual($sample_foo->member_name, 'foo', 'Sample::foo() has member name ' . $sample_foo->member_name);
    $this->assertEqual($sample_foo->class_did, $class->did, 'Method belongs to parent class.');
    $this->assertTrue(strpos($sample_foo->throws, 'SampleException when it all goes wrong.') !== FALSE, 'Sample::foo() throws exception.');

    // Check SampleInterface interface
    $interface = api_object_load('SampleInterface', $branch, 'interface', 'classes.php');
    $this->assertEqual($interface->summary, 'Sample interface.', 'Sample has summary ' . $interface->summary);

    // Check SampleInterface::foo() method
    $sampleInterface_foo = api_object_load('SampleInterface::foo', $branch, 'function', 'classes.php');
    $this->assertEqual($sampleInterface_foo->summary, 'Implement this API.', 'SampleInterface::foo() has summary ' . $sampleInterface_foo->summary);
    $this->assertEqual($sampleInterface_foo->member_name, 'foo', 'SampleInterface::foo() has member name ' . $sampleInterface_foo->member_name);
    $this->assertEqual($sampleInterface_foo->class_did, $interface->did, 'Method belongs to parent interface.');

    // Check inheritance
    $subclass = api_object_load('SubSample', $branch, 'class', 'classes.php');
    $this->assertEqual(db_result(db_query("SELECT count(*) FROM {api_reference_storage} WHERE branch_id = %d AND from_did = %d AND to_did = %d AND object_type = 'interface'", $branch->branch_id, $class->did, $interface->did)), 1, 'Sample implements SampleInterface.');
    $this->assertEqual(db_result(db_query("SELECT count(*) FROM {api_reference_storage} WHERE branch_id = %d AND from_did = %d AND to_did = %d AND object_type = 'class'", $branch->branch_id, $subclass->did, $class->did)), 1, 'SubSample extends Sample.');

    // Check overrides
    $subSample_bar = api_object_load('SubSample::bar', $branch, 'function', 'classes.php');
    $sampleInterfaceTwo_bar = api_object_load('SampleInterfaceTwo::bar', $branch, 'function', 'classes.php');
    $this->assertEqual($sample_foo->overrides_did, $sampleInterface_foo->did, 'Sample::foo() overrides SampleInterface::foo()');
    $this->assertEqual($sample_foo->root_did, $sampleInterface_foo->did, 'Sample::foo()\'s root is SampleInterface::foo()');
    $this->assertEqual($sample_foo->documented_did, $sample_foo->did, 'Sample::foo() is documented by itself.');
    $this->assertEqual($subSample_bar->documented_did, $sampleInterfaceTwo_bar->did, 'SubSample::bar() is documented by SampleInterfaceTwo::bar()');

    // Check membership
    $result = db_query('SELECT did FROM {api_members} WHERE class_did = %d', $class->did);
    $dids = array();
    while ($row = db_fetch_object($result)) {
      $dids[$row->did] = TRUE;
    }
    $this->assertEqual(count($dids), 4, 'Found ' . count($dids) . ' members of Sample.');
    $this->assertEqual($dids[$sample_foo->did], TRUE, 'Sample::foo is a member of Sample.');
    $this->assertEqual($dids[$sample_constant->did], TRUE, 'Sample::constant is a member of Sample.');
    $this->assertEqual($dids[$sample_property->did], TRUE, 'Sample::property is a member of Sample.');

    $result = db_query('SELECT did FROM {api_members} WHERE class_did = %d', $subclass->did);
    $dids = array();
    while ($row = db_fetch_object($result)) {
      $dids[$row->did] = TRUE;
    }
    $this->assertEqual(count($dids), 5, 'Found ' . count($dids) . ' members of SubSample.');
    $this->assertEqual($dids[$sample_foo->did], TRUE, 'Sample::foo is a member of SubSample.');
    $this->assertEqual($dids[$sample_constant->did], TRUE, 'Sample::constant is a member of SubSample.');
    $this->assertEqual($dids[$sample_property->did], TRUE, 'Sample::property is a member of SubSample.');
    $this->assertEqual($dids[$subSample_bar->did], TRUE, 'SubSample::bar is a member of SubSample.');
  }
}
