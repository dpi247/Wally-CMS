<?php

/**
 * @file
 * Install hooks for API module.
 */

/**
 * Implements hook_schema().
 */
function api_schema() {
  $schema['api_branch'] = array(
    'fields' => array(
      'branch_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'branch_name' => array(
        'type' => 'varchar',
        'length' => '31',
        'not null' => TRUE,
        'default' => '',
      ),
      'project' => array(
        'type' => 'varchar',
        'length' => '31',
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'Controls how this branch will be fetched and parsed.',
        'type' => 'varchar',
        'length' => '31',
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'Serialized type-specific data',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Should this branch be shown in the UI',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'project_title' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('branch_id'),
    'unique keys' => array(
      'project_name' => array('project', 'branch_name'),
    ),
    'indexes' => array(
      'weight' => array('weight'),
      'branch_name' => array('branch_name'),
      'project_title' => array('project_title'),
      'status' => array('status'),
    ),
  );

  $schema['api_documentation'] = array(
    'fields' => array(
      'did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'branch_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'object_name' => array(
        'type' => 'varchar',
        'length' => '127',
        'not null' => TRUE,
        'default' => '',
      ),
      'member_name' => array(
        'description' => 'For class members, the name without Class::',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'object_type' => array(
        'type' => 'varchar',
        'length' => '31',
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'file_name' => array(
        'type' => 'varchar',
        'length' => '127',
        'not null' => TRUE,
        'default' => '',
      ),
      'summary' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'documentation' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'code' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'start_line' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'see' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'var' => array(
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
      ),
      'throws' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'class_did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('did'),
    'indexes' => array(
      'object_name' => array('object_name', 'branch_id', 'object_type'),
      'object_type' => array('object_type'),
      'branch_id' => array('branch_id'),
      'title' => array('title'),
      'class_did' => array('class_did'),
      'file_name' => array('file_name'),
      'member_name' => array('member_name'),
    ),
  );

  $schema['api_file'] = array(
    'fields' => array(
      'did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'modified' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'queued' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'basename' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('did'),
    'indexes' => array(
      'basename' => array('basename'),
    ),
  );

  $schema['api_function'] = array(
    'fields' => array(
      'did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'signature' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'parameters' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'return_value' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('did'),
  );

  $schema['api_reference_storage'] = array(
    'documentation' => 'Keep track of references. For classes/interafaces, from_did extends to_did.',
    'fields' => array(
      'object_name' => array(
        'type' => 'varchar',
        'mysql_type' => 'varbinary',
        'pgsql_type' => 'bytea',
        'length' => '127',
        'not null' => TRUE,
        'default' => '',
      ),
      'branch_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'object_type' => array(
        'type' => 'varchar',
        'length' => '31',
        'not null' => TRUE,
        'default' => '',
      ),
      'from_did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'to_did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'to_did' => array('to_did'),
      'from_did' => array('from_did'),
      'object_name' => array('object_name'),
      'object_type' => array('object_type'),
      'branch_id' => array('branch_id'),
    ),
  );

  $schema['api_overrides'] = array(
    'description' => 'Keep track of method, property, and class constant parents.',
    'fields' => array(
      'did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'overrides_did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'documented_did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'root_did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'did' => array('did'),
      'root_did' => array('root_did'),
      'overrides_did' => array('overrides_did'),
    ),
  );

  $schema['api_members'] = array(
    'description' => 'Keep track of class members, including inherited members.',
    'fields' => array(
      'class_did' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'did' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'did' => array('did'),
      'class_did' => array('class_did'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function api_install() {
  // Get access to api_save_branch().
  drupal_load('module', 'api');

  drupal_install_schema('api');

  module_load_include('module', 'comment');
  variable_set('comment_preview_api', COMMENT_PREVIEW_OPTIONAL);
}

/**
 * Implements hook_enable().
 */
function api_enable() {
  // Workaround for http://drupal.org/node/200931
  drupal_get_schema(NULL, TRUE);

  $exists = FALSE;
  $result = db_query("SELECT branch_name FROM {api_branch} WHERE branch_name='php'");
  while ($branch = db_fetch_object($result)) {
    $exists = TRUE;
    break;
  }

  if (!$exists) {
    // Create new PHP branch.
    $branch = new stdClass();
    $branch->type = 'php';
    $branch->project = 'php';
    $branch->project_title = 'php';
    $branch->branch_name = 'php';
    $branch->title = 'PHP functions';
    $branch->status = 0;
    $branch->data = array(
      'summary' => 'http://svn.php.net/repository/phpdoc/doc-base/trunk/funcsummary.txt',
      'path' => 'http://php.net/!function',
    );
    api_save_branch($branch);
  }
}

/**
 * Optimize the 'N functions call f()' query.
 */
function api_update_13() {
  $return = array();

  db_add_index($return, 'api_reference_storage', 'to_did', array('to_did'));

  return $return;
}

/**
 * Convert {api_branch}.directory to a TEXT field.
 */
function api_update_14() {
  $return = array();

  db_change_field($return, 'api_branch', 'directory', 'directories', array(
    'type' => 'text',
    'not null' => TRUE,
  ));

  return $return;
}

/**
 * Add {api_branch}.excluded_directories field.
 */
function api_update_15() {
  $return = array();

  db_add_field($return, 'api_branch', 'excluded_directories', array(
    'type' => 'text',
    'not null' => TRUE,
  ));

  return $return;
}

/**
 * Delete all documentation to force a reindex.
 */
function api_update_16() {
  $return = array();

  // Force re-index.
  $return[] = update_sql("DELETE FROM {api_documentation}");

  return $return;
}

/**
 * Update #16 left {api_reference_storage} inconsistent; fix that.
 */
function api_update_17() {
  $return = array();

  $return[] = update_sql("DELETE FROM {api_reference_storage}");
  $return[] = update_sql("UPDATE {api_file} SET modified = 52");

  return $return;
}

/**
 * Delete a variable for cron runs; has been replaced with a queue.
 */
function api_update_18() {
  variable_del('api_files_per_cron');
  return array();
}

/**
 * Move start_line field from {api_function} to {api_documentation} table.
 */
function api_update_19() {
  $return = array();

  db_drop_field($return, 'api_function', 'start_line');
  db_add_field($return, 'api_documentation', 'start_line', array('type' => 'int', 'not null' => TRUE, 'default' => 0));

  return $return;
}

/**
 * Add {api_branch}.project field.
 */
function api_update_20() {
  $return = array();

  db_drop_primary_key($return, 'api_branch');
  db_add_field($return, 'api_branch', 'branch_id', array(
    'type' => 'serial',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ), array(
    'primary key' => array('branch_id'),
  ));
  db_add_field($return, 'api_branch', 'project', array(
    'type' => 'varchar',
    'length' => '31',
    'not null' => TRUE,
    'default' => '',
  ), array(
    'unique keys' => array(
      'project_name' => array('project', 'branch_name'),
    ),
  ));
  $return[] = update_sql("UPDATE {api_branch} SET project = 'drupal'");
  variable_set('api_default_branch', db_result(db_query("SELECT branch_id FROM {api_branch} WHERE branch_name = '%s'", variable_get('api_default_branch', NULL))));

  return $return;
}

/**
 * Add {api_reference_storage}.branch_id field.
 */
function api_update_21() {
  $return = array();

  db_add_field($return, 'api_reference_storage', 'branch_id', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ));
  $return[] = update_sql("UPDATE {api_reference_storage} r INNER JOIN {api_branch} b ON b.branch_name = r.branch_name SET r.branch_id = b.branch_id");
  db_drop_index($return, 'api_reference_storage', 'object_ref');
  db_add_index($return, 'api_reference_storage', 'object_ref', array('object_name', 'branch_id', 'object_type'));

  return $return;
}

/**
 * Add {api_documentation}.branch_id field.
 */
function api_update_22() {
  $return = array();

  db_add_field($return, 'api_documentation', 'branch_id', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ));
  $return[] = update_sql("UPDATE {api_documentation} r INNER JOIN {api_branch} b ON b.branch_name = r.branch_name SET r.branch_id = b.branch_id");
  db_drop_index($return, 'api_documentation', 'object_name');
  db_add_index($return, 'api_documentation', 'object_name', array('object_name', 'branch_id', 'object_type'));
  db_drop_index($return, 'api_documentation', 'branch_name');
  db_add_index($return, 'api_documentation', 'branch_id', array('branch_id'));

  return $return;
}

/**
 * Set up branches for multiple types (php vs. file).
 */
function api_update_23() {
  $return = array();

  // Add & populate type column
  db_add_field($return, 'api_branch', 'type', array(
    'description' => 'Controls how this branch will be fetched and parsed.',
    'type' => 'varchar',
    'length' => '31',
    'not null' => TRUE,
    'default' => '',
  ));
  $return[] = update_sql("UPDATE {api_branch} SET type = 'files'");

  // Add & populate data column
  db_add_field($return, 'api_branch', 'data', array(
    'description' => 'Serialized type-specific data',
    'type' => 'text',
    'not null' => TRUE,
    'default' => '',
  ));
  $result = db_query("SELECT branch_id, directories, excluded_directories FROM {api_branch}");
  while ($branch = db_fetch_object($result)) {
    $data = serialize(array(
      'directories' => $branch->directories,
      'excluded_directories' => $branch->excluded_directories,
    ));
    db_query("UPDATE {api_branch} SET data = '%s' WHERE branch_id = %d", $data, $branch->branch_id);
  }
  db_drop_field($return, 'api_branch', 'directories');
  db_drop_field($return, 'api_branch', 'excluded_directories');

  return $return;
}

/**
 * Move any existing PHP reference config to a branch.
 */
function api_update_24() {
  $return = array();

  db_query("INSERT INTO {api_branch} (type, project, branch_name, title, data) VALUES ('%s', '%s', '%s', '%s', '%s')", 'php', 'php', 'php', 'PHP functions', serialize(array('summary' => variable_get('api_php_funcsummary', ''), 'path' => variable_get('api_php_funcpath', ''))));
  variable_del('api_php_funcsummary');
  variable_del('api_php_funcpath');

  return $return;
}

/**
 * Add disabled branch capability.
 */
function api_update_25() {
  $return = array();

  db_add_field($return, 'api_branch', 'status', array(
    'description' => 'Should this branch be shown in the UI',
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ));
  $return[] = update_sql("UPDATE {api_branch} SET status = (type = 'files')");

  return $return;
}

/**
 * Delete old PHP branch links.
 */
function api_update_26() {
  $return = array();

  $return[] = update_sql("DELETE FROM {api_documentation} WHERE branch_name = 'php'");

  return $return;
}

/**
 * Drop redundant field {api_documentation}.branch_name.
 */
function api_update_27() {
  $return = array();

  db_drop_field($return, 'api_documentation', 'branch_name');

  return $return;
}

/**
 * Add {api_documentation}.see field.
 */
function api_update_28() {
  $return = array();

  db_add_field($return, 'api_documentation', 'see', array(
    'type' => 'text',
    'size' => 'medium',
    'not null' => TRUE,
  ));

  return $return;
}

/**
 * Add {api_documentation}.class_did field.
 */
function api_update_29() {
  $return = array();

  db_add_field($return, 'api_documentation', 'class_did', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_index($return, 'api_documentation', 'class_did', array('class_did'));

  return $return;
}

/**
 * Add {api_overrides} table.
 */
function api_update_30() {
  $return = array();

  db_create_table($return, 'api_overrides', array(
    'description' => 'Keep track of method, property, and class constant parents.',
    'fields' => array(
      'did' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'overrides_did' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'root_did' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
    ),
    'indexes' => array(
      'did' => array('did'),
    ),
  ));

  return $return;
}

/**
 * Add {api_documentation}.var and {api_documentation}.throws fields.
 */
function api_update_31() {
  $return = array();

  db_add_field($return, 'api_documentation', 'var', array(
    'type' => 'varchar',
    'length' => 127,
    'not null' => TRUE,
  ));
  db_add_field($return, 'api_documentation', 'throws', array(
    'type' => 'text',
    'size' => 'medium',
    'not null' => TRUE,
  ));

  return $return;
}

/**
 * Add {api_documentation}.member_name field.
 */
function api_update_32() {
  $return = array();

  db_add_field($return, 'api_documentation', 'member_name', array(
    'description' => 'For class members, the name without Class::',
    'type' => 'varchar',
    'length' => 127,
    'not null' => TRUE,
    'default' => '',
  ));

  return $return;
}

/**
 * Add {api_overrides}.documented_did field.
 */
function api_update_33() {
  $return = array();

  db_add_field($return, 'api_overrides', 'documented_did', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  return $return;
}

/**
 * Add {api_members} table.
 */
function api_update_34() {
  $return = array();

  db_create_table($return, 'api_members', array(
    'description' => 'Keep track of class members, including inherited members.',
    'fields' => array(
      'class_did' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'did' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
    ),
    'indexes' => array(
      'class_did' => array('did'),
    ),
  ));

  return $return;
}

/**
 * Standardize column types and add missing indexes.
 */
function api_update_35() {
  $return = array();

  db_change_field($return, 'api_overrides', 'did', 'did', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_change_field($return, 'api_overrides', 'overrides_did', 'overrides_did', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_change_field($return, 'api_overrides', 'documented_did', 'documented_did', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_change_field($return, 'api_overrides', 'root_did', 'root_did', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_change_field($return, 'api_reference_storage', 'from_did', 'from_did', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_change_field($return, 'api_reference_storage', 'to_did', 'to_did', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_index($return, 'api_documentation', 'object_type', array('object_type'));

  return $return;
}

/**
 * Add {api_branch}.project_title field.
 */
function api_update_36() {
  $return = array();

  db_add_field($return, 'api_branch', 'project_title', array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => '')
  );
  // Set it equal to the existing 'project' field.
  $return[] = update_sql("UPDATE {api_branch} b SET b.project_title = b.project");

  return $return;
}

/**
 * Helper function for updates: Forces everything to be reparsed.
 *
 * @param $return
 *   Update function return value array.
 *
 * @return
 *   $return with additional line added to it.
 */
function _api_update_force_all_reparse($return) {
  drupal_load('module', 'api');
  $num = api_mark_for_reparse();
  $return[] = array('success' => TRUE, 'query' => "$num files set to reparse, starting at next cron run");

  return $return;
}

/**
 * Force refresh of everything, because parser has changed.
 */
function api_update_6100() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Force refresh of everything, because parser has changed again.
 */
function api_update_6101() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Force refresh of everything, because parser has changed again.
 */
function api_update_6102() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Force refresh of everything, because parser has changed again.
 */
function api_update_6103() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Drop and add fields in {api_file} and reset parsing queue.
 */
function api_update_6104() {
  $return = array();
  db_drop_field($return, 'api_file', 'version');
  db_drop_field($return, 'api_file', 'found');

  db_add_field($return, 'api_file', 'queued', array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ));

  drupal_load('module', 'api');
  api_reset_parse_queue();
  $return[] = array('success' => TRUE, 'query' => "Parse queue was emptied");

  return $return;
}

/**
 * Force reparse of text files, because parsing has changed for them.
 */
function api_update_6105() {
  $return = array();

  db_query("UPDATE {api_file} af LEFT JOIN {api_documentation} ad ON af.did = ad.did SET af.modified = 52 WHERE ad.object_type = 'file' AND (ad.file_name LIKE '%.txt' OR ad.file_name LIKE '%.info')");
  $num = db_affected_rows();
  $return[] = array('success' => TRUE, 'query' => "$num text files set to reparse, starting at next cron run");

  return $return;
}

/**
 * Force refresh of everything, because parser has changed again.
 */
function api_update_6106() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Add indexes to various tables for query efficiency.
 */
function api_update_6107() {
  $return = array();

  db_add_index($return, 'api_branch', 'branch_name', array('branch_name'));
  db_add_index($return, 'api_branch', 'status', array('status'));
  db_add_index($return, 'api_branch', 'project_title', array('project_title'));

  db_add_index($return, 'api_documentation', 'file_name', array('file_name'));
  db_add_index($return, 'api_documentation', 'member_name', array('member_name'));

  db_drop_index($return, 'api_reference_storage', 'object_ref');
  db_add_index($return, 'api_reference_storage', 'from_did', array('from_did'));
  db_add_index($return, 'api_reference_storage', 'object_name', array('object_name'));
  db_add_index($return, 'api_reference_storage', 'object_type', array('object_type'));
  db_add_index($return, 'api_reference_storage', 'branch_id', array('branch_id'));

  db_add_index($return, 'api_overrides', 'root_did', array('root_did'));
  db_add_index($return, 'api_overrides', 'overrides_did', array('overrides_did'));

  db_drop_index($return, 'api_members', 'class_did');
  db_add_index($return, 'api_members', 'class_did', array('class_did'));
  db_add_index($return, 'api_members', 'did', array('did'));

  return $return;
}

/**
 * Force refresh of everything, because parser has changed again.
 */
function api_update_6108() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Force refresh of everything, as parsing has changed again.
 */
function api_update_6109() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Force refresh of everything, as parsing has changed again.
 */
function api_update_6110() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Force refresh of everything, as parsing has changed again.
 */
function api_update_6111() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Modify {api_reference_storage}.object_name to use binary collation.
 */
function api_update_6112() {
  $return = array();

  db_change_field($return, 'api_reference_storage', 'object_name', 'object_name', array(
      'type' => 'varchar',
      'mysql_type' => 'varbinary',
      'pgsql_type' => 'bytea',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ));

  return $return;
}

/**
 * Force refresh of everything, as parsing has changed again.
 */
function api_update_6113() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Force refresh of everything, as parsing has changed again.
 */
function api_update_6114() {
  $return = array();
  return _api_update_force_all_reparse($return);
}

/**
 * Add basename field to {api_file} table.
 */
function api_update_6115() {
  $return = array();

  // Add the basename field.
  db_add_field($return, 'api_file', 'basename', array(
      'type' => 'varchar',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ));

  // Populate this field from the existing filename field. This is a bit
  // complicated, because PostgreSQL and MySQL do not have the same string
  // functions available. So, start by just copying in the file name field.
  db_query("UPDATE {api_file} f INNER JOIN {api_documentation} d ON f.did = d.did SET basename = d.file_name");
  // Strip off leading / if there is one. Note that SQL counts strings starting
  // from position 1.
  db_query("UPDATE {api_file} f SET f.basename = SUBSTRING(f.basename FROM 2) WHERE SUBSTRING(f.basename FROM 1 FOR 1) = '/'");

  // Now strip off parts coming before a / until we don't have any more.
  while (db_result(db_query("SELECT COUNT(*) FROM {api_file} f WHERE POSITION('/' IN f.basename) > 0"))) {
    db_query("UPDATE {api_file} f SET f.basename = SUBSTRING(f.basename FROM (POSITION('/' IN f.basename) + 1)) WHERE POSITION('/' IN f.basename) > 0");
  }

  return $return;
}

/**
 * Add basename index to {api_file} table.
 */
function api_update_6116() {
  $return = array();
  db_add_index($return, 'api_file', 'basename', array('basename'));
  return $return;
}

/**
 * Remove variables on uninstall.
 */
function api_uninstall() {
  drupal_uninstall_schema('api');
  variable_del('api_default_branch');
  variable_del('api_reference');
  db_query("DELETE FROM {node} WHERE type = 'api'");
}
